---
http_interactions:
- request:
    method: post
    uri: https://api.exa.ai/search
    body:
      encoding: UTF-8
      string: '{"numResults":1,"useAutoprompt":true,"summary":true,"query":"Jina DeepSearch
        architecture"}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - api.exa.ai
      X-Stainless-Lang:
      - ruby
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.4.5
      X-Api-Key:
      - "<EXA_API_KEY>"
      Content-Type:
      - application/json
      Content-Length:
      - '91'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 27 Oct 2025 18:39:38 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Nel:
      - '{"report_to":"cf-nel","success_fraction":0.0,"max_age":604800}'
      Content-Security-Policy:
      - frame-ancestors 'self'
      Cross-Origin-Opener-Policy:
      - same-origin
      Cross-Origin-Resource-Policy:
      - same-origin
      Origin-Agent-Cluster:
      - "?1"
      Referrer-Policy:
      - no-referrer
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
      X-Content-Type-Options:
      - nosniff
      X-Dns-Prefetch-Control:
      - 'off'
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - DENY
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Xss-Protection:
      - '0'
      Vary:
      - Origin
      Access-Control-Allow-Credentials:
      - 'true'
      X-Ratelimit-Limit:
      - '9007199254740991'
      X-Ratelimit-Remaining:
      - '9007199254740990'
      X-Ratelimit-Reset:
      - '1761590379'
      Etag:
      - W/"1fe-Q8TGTBmQNn5q2ZGskd24LivtisM"
      Report-To:
      - '{"group":"cf-nel","max_age":604800,"endpoints":[{"url":"https://a.nel.cloudflare.com/report/v4?s=11MCNAd%2By%2FEpQ9jfAUcs1E9rSitT89m%2BeiHliHNCTA71a55rmJbVkfYbOJ2N9aXz6qoXFZY00iM6Upi6Vz%2FORopWtiH%2Bp18%3D"}]}'
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 99545131aa43cf98-MAD
    body:
      encoding: ASCII-8BIT
      string: '{"requestId":"45353cf61625477f4989e235e0bc237e","autopromptString":"Jina
        DeepSearch architecture","resolvedSearchType":"neural","results":[{"id":"https://skywork.ai/skypage/en/jina-web-search-ai-engineer/1980206257552007168","title":"Jina
        Web Search MCP Server: An AI Engineer''s Deep Dive","url":"https://skywork.ai/skypage/en/jina-web-search-ai-engineer/1980206257552007168","publishedDate":"2025-10-23T18:39:38.152Z","author":null}],"searchTime":903.5,"costDollars":{"total":0.005,"search":{"neural":0.005}}}'
  recorded_at: Mon, 27 Oct 2025 18:39:38 GMT
- request:
    method: post
    uri: https://api.exa.ai/contents
    body:
      encoding: UTF-8
      string: '{"urls":["https://skywork.ai/skypage/en/jina-web-search-ai-engineer/1980206257552007168"],"text":true,"highlights":true,"summary":true,"filterEmptyResults":true}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - api.exa.ai
      X-Stainless-Lang:
      - ruby
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.4.5
      X-Api-Key:
      - "<EXA_API_KEY>"
      Content-Type:
      - application/json
      Content-Length:
      - '161'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 27 Oct 2025 18:39:47 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Content-Security-Policy:
      - frame-ancestors 'self'
      Cross-Origin-Opener-Policy:
      - same-origin
      Cross-Origin-Resource-Policy:
      - same-origin
      Origin-Agent-Cluster:
      - "?1"
      Referrer-Policy:
      - no-referrer
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
      X-Content-Type-Options:
      - nosniff
      X-Dns-Prefetch-Control:
      - 'off'
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - DENY
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Xss-Protection:
      - '0'
      Vary:
      - Origin
      Access-Control-Allow-Credentials:
      - 'true'
      X-Ratelimit-Limit:
      - '50'
      X-Ratelimit-Remaining:
      - '49'
      X-Ratelimit-Reset:
      - '1761590380'
      Ratelimit-Policy:
      - 2000;w=1
      Ratelimit-Limit:
      - '2000'
      Ratelimit-Remaining:
      - '1994'
      Ratelimit-Reset:
      - '1'
      Etag:
      - W/"639e-fIsHbJNlkPyAFeNo73uB7B8BRx8"
      Cf-Cache-Status:
      - DYNAMIC
      Nel:
      - '{"report_to":"cf-nel","success_fraction":0.0,"max_age":604800}'
      Report-To:
      - '{"group":"cf-nel","max_age":604800,"endpoints":[{"url":"https://a.nel.cloudflare.com/report/v4?s=4Qum270Jw4zDFVSoybrFUYKjYWHNdxuWIi45kCukUFGEXUKk1pHTSq%2FMYrz%2BeZUNsBHR3BV2ZcOEsoiNB%2Fdz3s%2BuVj3lsNI%3D"}]}'
      Server:
      - cloudflare
      Cf-Ray:
      - 99545138aa6ecf98-MAD
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        eyJyZXF1ZXN0SWQiOiI2MTYzYzFjNWE4M2M0ZjZmOTBlMWU2YjM1YjdmZWNjNyIsInJlc3VsdHMiOlt7ImlkIjoiaHR0cHM6Ly9za3l3b3JrLmFpL3NreXBhZ2UvZW4vamluYS13ZWItc2VhcmNoLWFpLWVuZ2luZWVyLzE5ODAyMDYyNTc1NTIwMDcxNjgiLCJ0aXRsZSI6IkppbmEgV2ViIFNlYXJjaCBNQ1AgU2VydmVyOiBBbiBBSSBFbmdpbmVlcidzIERlZXAgRGl2ZSIsInVybCI6Imh0dHBzOi8vc2t5d29yay5haS9za3lwYWdlL2VuL2ppbmEtd2ViLXNlYXJjaC1haS1lbmdpbmVlci8xOTgwMjA2MjU3NTUyMDA3MTY4IiwicHVibGlzaGVkRGF0ZSI6IjIwMjUtMTAtMjRUMDA6MDA6MDAuMDAwWiIsImF1dGhvciI6IiIsInRleHQiOiItIENvcHkgTGlua1xuLSBYXG4tIEZhY2Vib29rXG5cbiMjIyBPdXRsaW5lXG5cbiMjIFdoYXQgRXhhY3RseSBpcyB0aGUgSmluYSBXZWIgU2VhcmNoIE1DUCBTZXJ2ZXI/XG5cbiMjIyBQaWxsYXIgMTogSmluYSBBSSAtIFRoZSBTZWFyY2ggRm91bmRhdGlvblxuXG4jIyMgUGlsbGFyIDI6IFRoZSBNb2RlbCBDb250ZXh0IFByb3RvY29sIChNQ1ApIC0gVGhlIFwiSFRUUCBmb3IgQUlcIlxuXG4jIyMgUGlsbGFyIDM6IFRoZSBcXGBoeXBlcnNuaXBlcjA1XFxgIEltcGxlbWVudGF0aW9uIC0gVGhlIFByYWN0aWNhbCBCcmlkZ2VcblxuIyMgV2hhdCBBcmUgSXRzIEtleSBGZWF0dXJlcz9cblxuIyMgSG93IERvZXMgSXQgQ29tcGFyZSB0byBPdGhlciBNQ1AgU2VydmVycz9cblxuIyMjIEZlYXR1cmUgQ29tcGFyaXNvbiBNYXRyaXhcblxuIyMjIFN0cmVuZ3RocyBhbmQgV2Vha25lc3NlcyBhdCBhIEdsYW5jZVxuXG4jIyBXaGF0IFRvb2xzIEFyZSBJbnNpZGUgdGhlIEJveD9cblxuIyMgSG93IERvIEkgVXNlIEl0PyBBIFN0ZXAtYnktU3RlcCBHdWlkZVxuXG4jIyMgU3RlcCAxOiBQcmVyZXF1aXNpdGVzXG5cbiMjIyBTdGVwIDI6IEluc3RhbGxhdGlvbiAmIENvbmZpZ3VyYXRpb24gKERvY2tlciBNZXRob2QpXG5cbiMjIyBTdGVwIDM6IEludGVncmF0aW9uIHdpdGggYW4gTUNQIENsaWVudCAobGlrZSBDbGF1ZGUgRGVza3RvcClcblxuIyMgV2hhdCBBcmUgdGhlIFJlYWwtV29ybGQgVXNlIENhc2VzP1xuXG4jIyMgVXNlIENhc2UgMTogVGhlIEh5cGVyLUluZm9ybWVkIFJBRyBTeXN0ZW1cblxuIyMjIFVzZSBDYXNlIDI6IEF1dG9tYXRlZCBTRU8gYW5kIENvbXBldGl0b3IgQW5hbHlzaXNcblxuIyMgV2hhdCdzIHRoZSBGdXR1cmUgZm9yIEppbmEgYW5kIGl0cyBNQ1AgRWNvc3lzdGVtP1xuXG4jIyBXaGF0IERvZXMgVGhpcyBNZWFuIGZvciBVcyBhcyBCdWlsZGVycz9cblxuIyMgRnJlcXVlbnRseSBBc2tlZCBRdWVzdGlvbnMgKEZBUSlcblxuIyBKaW5hIFdlYiBTZWFyY2ggTUNQIFNlcnZlcjogQW4gQUkgRW5naW5lZXIncyBEZWVwIERpdmVcblxuU2t5d29ya1xuXG4xMC8yNC8yMDI1XG5cbkluZm9ybWF0aW9uXG5cblNoYXJlXG5cbiMjIEZlYXR1cmVkIFBpY2tzXG5cbiMjIEJyb3dzZSBieSBEYXRlXG5cblsxMC8xNV0oaHR0cHM6Ly9za3l3b3JrLmFpL3NreXBhZ2UvZW4vbGlzdC8xMC0xNS0yMDI1KSBbMTAvMTddKGh0dHBzOi8vc2t5d29yay5haS9za3lwYWdlL2VuL2xpc3QvMTAtMTctMjAyNSkgWzEwLzE4XShodHRwczovL3NreXdvcmsuYWkvc2t5cGFnZS9lbi9saXN0LzEwLTE4LTIwMjUpIFsxMC8xOV0oaHR0cHM6Ly9za3l3b3JrLmFpL3NreXBhZ2UvZW4vbGlzdC8xMC0xOS0yMDI1KSBbMTAvMjBdKGh0dHBzOi8vc2t5d29yay5haS9za3lwYWdlL2VuL2xpc3QvMTAtMjAtMjAyNSkgWzEwLzIxXShodHRwczovL3NreXdvcmsuYWkvc2t5cGFnZS9lbi9saXN0LzEwLTIxLTIwMjUpIFsxMC8yMl0oaHR0cHM6Ly9za3l3b3JrLmFpL3NreXBhZ2UvZW4vbGlzdC8xMC0yMi0yMDI1KSBbMTAvMjNdKGh0dHBzOi8vc2t5d29yay5haS9za3lwYWdlL2VuL2xpc3QvMTAtMjMtMjAyNSkgWzEwLzI0XShodHRwczovL3NreXdvcmsuYWkvc2t5cGFnZS9lbi9saXN0LzEwLTI0LTIwMjUpIFsxMC8yNV0oaHR0cHM6Ly9za3l3b3JrLmFpL3NreXBhZ2UvZW4vbGlzdC8xMC0yNS0yMDI1KVxuXG4jIyBCcm93c2UgYnkgQWxwaGFiZXRcblxuW0FdKGh0dHBzOi8vc2t5d29yay5haS9za3lwYWdlL2VuL2xpc3QvQSkgW0JdKGh0dHBzOi8vc2t5d29yay5haS9za3lwYWdlL2VuL2xpc3QvQikgW0NdKGh0dHBzOi8vc2t5d29yay5haS9za3lwYWdlL2VuL2xpc3QvQykgW0RdKGh0dHBzOi8vc2t5d29yay5haS9za3lwYWdlL2VuL2xpc3QvRCkgW0VdKGh0dHBzOi8vc2t5d29yay5haS9za3lwYWdlL2VuL2xpc3QvRSkgW0ZdKGh0dHBzOi8vc2t5d29yay5haS9za3lwYWdlL2VuL2xpc3QvRikgW0ddKGh0dHBzOi8vc2t5d29yay5haS9za3lwYWdlL2VuL2xpc3QvRykgW0hdKGh0dHBzOi8vc2t5d29yay5haS9za3lwYWdlL2VuL2xpc3QvSCkgW0ldKGh0dHBzOi8vc2t5d29yay5haS9za3lwYWdlL2VuL2xpc3QvSSkgW0pdKGh0dHBzOi8vc2t5d29yay5haS9za3lwYWdlL2VuL2xpc3QvSikgW0tdKGh0dHBzOi8vc2t5d29yay5haS9za3lwYWdlL2VuL2xpc3QvSykgW0xdKGh0dHBzOi8vc2t5d29yay5haS9za3lwYWdlL2VuL2xpc3QvTCkgW01dKGh0dHBzOi8vc2t5d29yay5haS9za3lwYWdlL2VuL2xpc3QvTSkgW05dKGh0dHBzOi8vc2t5d29yay5haS9za3lwYWdlL2VuL2xpc3QvTikgW09dKGh0dHBzOi8vc2t5d29yay5haS9za3lwYWdlL2VuL2xpc3QvTykgW1BdKGh0dHBzOi8vc2t5d29yay5haS9za3lwYWdlL2VuL2xpc3QvUCkgW1FdKGh0dHBzOi8vc2t5d29yay5haS9za3lwYWdlL2VuL2xpc3QvUSkgW1JdKGh0dHBzOi8vc2t5d29yay5haS9za3lwYWdlL2VuL2xpc3QvUikgW1NdKGh0dHBzOi8vc2t5d29yay5haS9za3lwYWdlL2VuL2xpc3QvUykgW1RdKGh0dHBzOi8vc2t5d29yay5haS9za3lwYWdlL2VuL2xpc3QvVCkgW1VdKGh0dHBzOi8vc2t5d29yay5haS9za3lwYWdlL2VuL2xpc3QvVSkgW1ZdKGh0dHBzOi8vc2t5d29yay5haS9za3lwYWdlL2VuL2xpc3QvVikgW1ddKGh0dHBzOi8vc2t5d29yay5haS9za3lwYWdlL2VuL2xpc3QvVykgW1hdKGh0dHBzOi8vc2t5d29yay5haS9za3lwYWdlL2VuL2xpc3QvWCkgW1ldKGh0dHBzOi8vc2t5d29yay5haS9za3lwYWdlL2VuL2xpc3QvWSkgW1pdKGh0dHBzOi8vc2t5d29yay5haS9za3lwYWdlL2VuL2xpc3QvWilcblxuW1NreXBhZ2VdKGh0dHBzOi8vc2t5d29yay5haS9za3lwYWdlKVxuXG5bQmxvZ10oaHR0cHM6Ly9za3l3b3JrLmFpL2Jsb2cpXG5cbltSZXNvdXJjZXNdKGh0dHBzOi8vc2t5d29yay5haS9ibG9nL3Jlc291cmNlcy8pXG5cblNreXdvcmtcblxuQXNrIFNreXdvcmsgQUkgYWJvdXQgdGhpcyBhcnRpY2xlXG5cbltXaGF0IGFyZSB0aGUgY29yZSBjb25jbHVzaW9ucyBhbmQga2V5IHRha2Vhd2F5cyBvZiB0aGlzIGFydGljbGU/XShqYXZhc2NyaXB0OnZvaWQoMCkpXG5cbltTdW1tYXJpemUgdGhlIGFydGljbGXigJlzIGtleSBwb2ludHMgaW4gdGhyZWUgYnVsbGV0IHBvaW50cy5dKGphdmFzY3JpcHQ6dm9pZCgwKSlcblxuW1doYXQgaXMgdGhpcyBhcnRpY2xlIGFib3V0P10oamF2YXNjcmlwdDp2b2lkKDApKVxuXG5bTGVhcm4gbW9yZV0oamF2YXNjcmlwdDp2b2lkKDApKVxuXG5UYWJsZSBvZiBDb250ZW50cyBXaGF0IEV4YWN0bHkgaXMgdGhlIEppbmEgV2ViIFNlYXJjaCBNQ1AgU2VydmVyPyBQaWxsYXIgMTogSmluYSBBSSAtIFRoZSBTZWFyY2ggRm91bmRhdGlvbiBQaWxsYXIgMjogVGhlIE1vZGVsIENvbnRleHQgUHJvdG9jb2wgKE1DUCkgLSBUaGUgJiMzNDtIVFRQIGZvciBBSSYjMzQ7IFBpbGxhciAzOiBUaGUgXFxgaHlwZXJzbmlwZXIwNVxcYCBJbXBsZW1lbnRhdGlvbiAtIFRoZSBQcmFjdGljYWwgQnJpZGdlIFdoYXQgQXJlIEl0cyBLZXkgRmVhdHVyZXM/IEhvdyBEb2VzIEl0IENvbXBhcmUgdG8gT3RoZXIgTUNQIFNlcnZlcnM/IEZlYXR1cmUgQ29tcGFyaXNvbiBNYXRyaXggU3RyZW5ndGhzIGFuZCBXZWFrbmVzc2VzIGF0IGEgR2xhbmNlIFdoYXQgVG9vbHMgQXJlIEluc2lkZSB0aGUgQm94PyBIb3cgRG8gSSBVc2UgSXQ/IEEgU3RlcC1ieS1TdGVwIEd1aWRlIFN0ZXAgMTogUHJlcmVxdWlzaXRlcyBTdGVwIDI6IEluc3RhbGxhdGlvbiAmYW1wOyBDb25maWd1cmF0aW9uIFN0ZXAgMzogSW50ZWdyYXRpb24gd2l0aCBhbiBNQ1AgQ2xpZW50IChsaWtlIENsYXVkZSBEZXNrdG9wKSBXaGF0IEFyZSB0aGUgUmVhbC1Xb3JsZCBVc2UgQ2FzZXM/IFVzZSBDYXNlIDE6IFRoZSBIeXBlci1JbmZvcm1lZCBSQUcgU3lzdGVtIFVzZSBDYXNlIDI6IEF1dG9tYXRlZCBTRU8gYW5kIENvbXBldGl0b3IgQW5hbHlzaXMgV2hhdCYjMzk7cyB0aGUgRnV0dXJlIGZvciBKaW5hIGFuZCBpdHMgTUNQIEVjb3N5c3RlbT8gV2hhdCBEb2VzIFRoaXMgTWVhbiBmb3IgVXMgYXMgQnVpbGRlcnM/IEZyZXF1ZW50bHkgQXNrZWQgUXVlc3Rpb25zIChGQVEpIEV2ZXIgZmVsdCBsaWtlIHlvdXIgTExNIGlzIHN0dWNrIGluIHRoZSBwYXN0PyBZb3UgYnVpbGQgYSBicmlsbGlhbnQgYWdlbnQsIGJ1dCBpdCBjYW4mIzM5O3QgYWNjZXNzIHJlYWwtdGltZSB3ZWIgZGF0YSwgY2hlY2sgdGhlIGxhdGVzdCBkb2N1bWVudGF0aW9uLCBvciBhbmFseXplIGEgY29tcGV0aXRvciYjMzk7cyBsaXZlIHdlYnNpdGUuIEkmIzM5O3ZlIGJlZW4gdGhlcmUuIEl0JiMzOTtzIGxpa2UgaGF2aW5nIGEgZ2VuaXVzIHdpdGggbm8gaW50ZXJuZXQgY29ubmVjdGlvbi4gVGhpcyBnYXAgaXMgd2hlcmUgdGhlIE1vZGVsIENvbnRleHQgUHJvdG9jb2wgKE1DUCkgY29tZXMgaW4uIFRoaW5rIG9mIGl0IGFzIHRoZSAmIzM0O0hUVFAgZm9yIEFJJiMzNDvigJRhIHN0YW5kYXJkaXplZCB3YXkgZm9yIExMTXMgdG8gdGFsayB0byBleHRlcm5hbCB0b29scyBhbmQgZGF0YSBzb3VyY2VzLiBJdOKAmXMgYSBnYW1lLWNoYW5nZXIuIEFuZCB0aGF0JiMzOTtzIHdoZXJlIEkgc3R1bWJsZWQgdXBvbiBhIGZhbnRhc3RpYyBjb21tdW5pdHkgcHJvamVjdDogdGhlIEppbmEgV2ViIFNlYXJjaCBNQ1AgU2VydmVyIGJ5IGh5cGVyc25pcGVyMDUuIEl04oCZcyBhIGxpZ2h0d2VpZ2h0LCBwb3dlcmZ1bCBicmlkZ2UgdGhhdCBnaXZlcyB5b3VyIExMTSB0aGUgd2ViLWJyb3dzaW5nIHN1cGVycG93ZXJzIGl0IGRlc2VydmVzLiBJbiB0aGlzIGRlZXAgZGl2ZSwgSSYjMzk7bGwgd2FsayB5b3UgdGhyb3VnaCBldmVyeXRoaW5nIEkmIzM5O3ZlIGxlYXJuZWQgZnJvbSBteSByZXNlYXJjaCwgZnJvbSBpdHMgY29yZSBhcmNoaXRlY3R1cmUgdG8gaG93IGl0IHN0YWNrcyB1cCBhZ2FpbnN0IHRoZSBjb21wZXRpdGlvbi4gQSBkaWFncmFtIGlsbHVzdHJhdGluZyBob3cgSmluYSBSZWFkZXIgY29udmVydHMgYSBVUkwgaW50byBMTE0tZnJpZW5kbHkgdGV4dCwgZm9ybWluZyB0aGUgY29yZSBvZiB0aGUgTUNQIHNlcnZlciYjMzk7cyBjYXBhYmlsaXR5IFdoYXQgRXhhY3RseSBpcyB0aGUgSmluYSBXZWIgU2VhcmNoIE1DUCBTZXJ2ZXI/IEF0IGl0cyBoZWFydCwgdGhpcyBzZXJ2ZXIgaXMgdGhlIGludGVyc2VjdGlvbiBvZiB0aHJlZSBrZXkgdGVjaG5vbG9naWVzLiBVbmRlcnN0YW5kaW5nIHRoZW0gc2VwYXJhdGVseSBpcyB0aGUga2V5IHRvIGdyYXNwaW5nIHRoZSB3aG9sZSBwaWN0dXJlLiBMZXQmIzM5O3MgYnJlYWsgaXQgZG93bi4gUGlsbGFyIDE6IEppbmEgQUkgLSBUaGUgU2VhcmNoIEZvdW5kYXRpb24gRmlyc3QsIHlvdSBoYXZlIHRoZSBlbmdpbmU6IEppbmEgQUkuIEJlZm9yZSBpdHMgYWNxdWlzaXRpb24gYnkgRWxhc3RpYyBpbiAyMDI1LCBKaW5hIEFJIGVzdGFibGlzaGVkIGl0c2VsZiBhcyBhIGxlYWRlciBpbiBidWlsZGluZyBvcGVuLXNvdXJjZSAmIzM0O3NlYXJjaCBmb3VuZGF0aW9uIG1vZGVscy4mIzM0OyBUaGVpciBnb2FsIHdhc24mIzM5O3QganVzdCB0byBjcmVhdGUgYW5vdGhlciBzZWFyY2ggZW5naW5lLCBidXQgdG8gcHJvdmlkZSB0aGUgYnVpbGRpbmcgYmxvY2tzIGZvciBkZXZlbG9wZXJzIHRvIGNyZWF0ZSB0aGVpciBvd24gYWR2YW5jZWQgc2VhcmNoIGFuZCBSQUcgKFJldHJpZXZhbC1BdWdtZW50ZWQgR2VuZXJhdGlvbikgc3lzdGVtcy4gVHdvIG9mIHRoZWlyIHN0YW5kb3V0IHRvb2xzIGFyZTogUmVhZGVyIEFQSSAoci5qaW5hLmFpKTogVGhpcyBpc24mIzM5O3QganVzdCBhIHNpbXBsZSBzY3JhcGVyLiBJdCB0YWtlcyBhbnkgVVJMIGFuZCBpbnRlbGxpZ2VudGx5IGNvbnZlcnRzIGl0cyBjb250ZW50IGludG8gY2xlYW4sIHN0cnVjdHVyZWQsIExMTS1mcmllbmRseSBNYXJrZG93bi4gSXQgc3RyaXBzIG91dCBhZHMsIG5hdmlnYXRpb24gYmFycywgYW5kIG90aGVyIG5vaXNlLCB3aGljaCBpcyBjcnVjaWFsIGZvciBnZXR0aW5nIGhpZ2gtcXVhbGl0eSBpbnB1dCBmb3IgeW91ciBtb2RlbHMuIFNlYXJjaCBBUEkgKHMuamluYS5haSk6IFRoaXMgcHJvdmlkZXMgYSBwb3dlcmZ1bCBzZW1hbnRpYyBzZWFyY2ggbGF5ZXIgb3ZlciB0aGUgd2ViLCByZXR1cm5pbmcgbm90IGp1c3QgbGlua3MsIGJ1dCB0aGUgcHJvY2Vzc2VkIGNvbnRlbnQgYmVoaW5kIHRob3NlIGxpbmtzLiBKaW5hIEFJJiMzOTtzIGNvbW1pdG1lbnQgdG8gb3BlbiBtb2RlbHMgYW5kIGhpZ2gtcXVhbGl0eSBkYXRhIHByb2Nlc3NpbmcgaXMgd2hhdCBtYWtlcyBpdCBzdWNoIGEgcG93ZXJmdWwgZm91bmRhdGlvbi4gUGlsbGFyIDI6IFRoZSBNb2RlbCBDb250ZXh0IFByb3RvY29sIChNQ1ApIC0gVGhlICYjMzQ7SFRUUCBmb3IgQUkmIzM0OyBOZXh0LCB3ZSBoYXZlIHRoZSBjb21tdW5pY2F0aW9uIHN0YW5kYXJkLiBUaGUgTW9kZWwgQ29udGV4dCBQcm90b2NvbCAoTUNQKSwgaW50cm9kdWNlZCBieSBBbnRocm9waWMgaW4gbGF0ZSAyMDI0LCBzdGFuZGFyZGl6ZXMgaG93IExMTXMgaW50ZXJhY3Qgd2l0aCBleHRlcm5hbCB0b29scy4gQmVmb3JlIE1DUCwgZXZlcnkgZGV2ZWxvcGVyIGhhZCB0byBidWlsZCBjdXN0b20sIG9uZS1vZmYgaW50ZWdyYXRpb25zIGZvciBlYWNoIHRvb2wgYW5kIGVhY2ggTExNLiBJdCB3YXMgYSBtZXNzLiBNQ1AgY3JlYXRlcyBhIHVuaXZlcnNhbCBjbGllbnQtc2VydmVyIGFyY2hpdGVjdHVyZS4gVGhlIExMTSAodmlhIGEgY2xpZW50KSBjYW4gZGlzY292ZXIgYW5kIGNhbGwgdG9vbHMgZXhwb3NlZCBieSBhbiBNQ1Agc2VydmVyIHVzaW5nIGEgc2ltcGxlLCBzdGFuZGFyZGl6ZWQgcHJvdG9jb2wuIFRoaXMgbWFrZXMgdG9vbCBpbnRlZ3JhdGlvbiBwb3J0YWJsZSwgc2VjdXJlLCBhbmQgc2NhbGFibGUuIFBpbGxhciAzOiBUaGUgXFxgaHlwZXJzbmlwZXIwNVxcYCBJbXBsZW1lbnRhdGlvbiAtIFRoZSBQcmFjdGljYWwgQnJpZGdlIEZpbmFsbHksIHdlIGhhdmUgdGhlIHN0YXIgb2Ygb3VyIHNob3cuIFRoZSBKaW5hIFdlYiBTZWFyY2ggTUNQIFNlcnZlciBieSBoeXBlcnNuaXBlcjA1IGlzIGEgY29tbXVuaXR5LWJ1aWx0LCBwcmFjdGljYWwgaW1wbGVtZW50YXRpb24gdGhhdCBwYWNrYWdlcyBKaW5hIEFJJiMzOTtzIHBvd2VyZnVsIEFQSXMgaW50byBhbiBlYXN5LXRvLWRlcGxveSBNQ1Agc2VydmVyLiBJdCYjMzk7cyBub3QgYW4gb2ZmaWNpYWwgSmluYSBBSSBwcm9kdWN0IGJ1dCBhIGJyaWxsaWFudCBleGFtcGxlIG9mIHRoZSBvcGVuLXNvdXJjZSBjb21tdW5pdHkgYXQgaXRzIGJlc3QuIEJ1aWx0IHdpdGggdGhlIG9mZmljaWFsIE1DUCBQeXRob24gU0RLLCBpdCBhY3RzIGFzIGEgbGlnaHR3ZWlnaHQgYnJpZGdlLCB0cmFuc2xhdGluZyBNQ1AgcmVxdWVzdHMgZnJvbSBhbiBMTE0gaW50byBBUEkgY2FsbHMgdG8gSmluYSBBSSBhbmQgdGhlbiByZXR1cm5pbmcgdGhlIGNsZWFuLCBzdHJ1Y3R1cmVkIHJlc3VsdHMuIEl0JiMzOTtzIHRoZSBnbHVlIHRoYXQgY29ubmVjdHMgdGhlIExMTSYjMzk7cyAmIzM0O2JyYWluJiMzNDsgdG8gdGhlIHdlYiYjMzk7cyB2YXN0IGtub3dsZWRnZSBiYXNlLiBTb3VyY2U6IEF1dGhvciYjMzk7cyBhbmFseXNpcyBiYXNlZCBvbiBNQ1AgYXJjaGl0ZWN0dXJlIFNvdXJjZTogQXV0aG9yJiMzOTtzIGFuYWx5c2lzIFNvLCB3aGVuIHlvdSB1c2UgdGhpcyBzZXJ2ZXIsIHlvdSYjMzk7cmUgbm90IGp1c3QgdXNpbmcgb25lIHRvb2wuIFlvdSYjMzk7cmUgbGV2ZXJhZ2luZyBhIHBvd2VyZnVsIHN0YWNrOiBhIHN0YXRlLW9mLXRoZS1hcnQgc2VhcmNoIGZvdW5kYXRpb24gKEppbmEpLCBhIHVuaXZlcnNhbCBjb21tdW5pY2F0aW9uIHByb3RvY29sIChNQ1ApLCBhbmQgYSBuaW1ibGUsIG9wZW4tc291cmNlIHNlcnZlciB0aGF0IHRpZXMgaXQgYWxsIHRvZ2V0aGVyLiBUaGlzIGNvbWJpbmF0aW9uIGlzIHdoYXQgZ2l2ZXMgeW91ciBBSSBhZ2VudCBpdHMgd2ViLWJyb3dzaW5nIHN1cGVycG93ZXJzLCBhbGxvd2luZyBpdCB0byBmZXRjaCByZWFsLXRpbWUgZGF0YSwgYW5hbHl6ZSBVUkxzLCBhbmQgcGVyZm9ybSBzZW1hbnRpYyBzZWFyY2hlcyBlZmZvcnRsZXNzbHkuIFRoaXMgYXJjaGl0ZWN0dXJlIGlzIGluY3JlZGlibHkgZWZmaWNpZW50LiBUaGUgTExNIGRvZXNuJiMzOTt0IG5lZWQgdG8gcGFyc2UgbWVzc3kgSFRNTCBvciBoYW5kbGUgbmV0d29yayByZXF1ZXN0cy4gSXQgc2ltcGx5IGFza3MgdGhlIE1DUCBzZXJ2ZXIsICYjMzQ7RmV0Y2ggdGhlIGNvbnRlbnQgb2YgdGhpcyBVUkwsJiMzNDsgYW5kIHJlY2VpdmVzIGNsZWFuLCByZWFkeS10by11c2UgTWFya2Rvd24uIFRoaXMgc2F2ZXMgdG9rZW5zLCByZWR1Y2VzIGNvbXBsZXhpdHksIGFuZCBkcmFtYXRpY2FsbHkgaW1wcm92ZXMgdGhlIHF1YWxpdHkgb2YgdGhlIExMTSYjMzk7cyBvdXRwdXQuIFdoYXQgQXJlIEl0cyBLZXkgRmVhdHVyZXM/IERpdmluZyBpbnRvIHRoZSBHaXRIdWIgcmVwb3NpdG9yeSwgSSBmb3VuZCBhIGxlYW4gYnV0IHBvd2VyZnVsIHNldCBvZiBmZWF0dXJlcyB0aGF0IG1ha2UgdGhpcyBzZXJ2ZXIgcGFydGljdWxhcmx5IGFwcGVhbGluZyBmb3IgQUkgZW5naW5lZXJzOiBNQ1AgUHJvdG9jb2wgQ29tcGxpYW5jZTogSXQmIzM5O3MgZnVsbHkgY29tcGxpYW50IHdpdGggdGhlIE1DUCAyMDI1LTA2LTE4IHNwZWNpZmljYXRpb24sIGVuc3VyaW5nIGJyb2FkIGNvbXBhdGliaWxpdHkgd2l0aCBjbGllbnRzIGxpa2UgQ2xhdWRlIERlc2t0b3AsIEN1cnNvciwgYW5kIG90aGVycy4gQnVpbHQgd2l0aCBPZmZpY2lhbCBTREs6IEl0IHVzZXMgQW50aHJvcGljJiMzOTtzIG9mZmljaWFsIEZhc3RNQ1AgUHl0aG9uIFNESywgd2hpY2ggbWVhbnMgaXQmIzM5O3Mgc3RhYmxlIGFuZCBmb2xsb3dzIGJlc3QgcHJhY3RpY2VzLiBFYXN5IERlcGxveW1lbnQgd2l0aCBEb2NrZXI6IFRoaXMgaXMgYSBodWdlIHBsdXMgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzLiBUaGUgaW5jbHVzaW9uIG9mIGEgZG9ja2VyLWNvbXBvc2UueW1sIGZpbGUgbWVhbnMgeW91IGNhbiBnZXQgYSBwcm9kdWN0aW9uLXJlYWR5IGluc3RhbmNlIHJ1bm5pbmcgd2l0aCBhIHNpbmdsZSBjb21tYW5kLiBTdHJlYW1hYmxlIEhUVFAgVHJhbnNwb3J0OiBJdCB1c2VzIGEgbW9kZXJuIGFuZCBlZmZpY2llbnQgdHJhbnNwb3J0IGxheWVyLCBydW5uaW5nIG9uIHBvcnQgNTAwMyBieSBkZWZhdWx0LiBDb3JlIFdlYiBUb29sczogSXQgZm9jdXNlcyBvbiB0d28gZXNzZW50aWFsIGZ1bmN0aW9uczogZmV0Y2hpbmcgVVJMIGNvbnRlbnQgKGZldGNoXFxfdXJsXFxfY29udGVudCkgYW5kIHBlcmZvcm1pbmcgc2VtYW50aWMgd2ViIHNlYXJjaGVzICh3ZWJcXF9zZWFyY2gpLiBTaW1wbGUgQ29uZmlndXJhdGlvbjogQVBJIGtleXMgYXJlIG1hbmFnZWQgc2VjdXJlbHkgdGhyb3VnaCBlbnZpcm9ubWVudCB2YXJpYWJsZXMgKC5lbnYgZmlsZSksIGEgc3RhbmRhcmQgYW5kIHNlY3VyZSBwcmFjdGljZS4gV2hpbGUgdGhlIHNlcnZlciBpdHNlbGYgaXMgbWluaW1hbGlzdCwgdGhlIHBvd2VyIGNvbWVzIGZyb20gdGhlIHVuZGVybHlpbmcgSmluYSBBSSBBUElzIGl0IGV4cG9zZXMuIEZvciBleGFtcGxlLCB0aGUgZnJlZSB0aWVyIG9mIEppbmEgQUkgaXMgcXVpdGUgZ2VuZXJvdXMsIG9mZmVyaW5nIDEwIG1pbGxpb24gdG9rZW5zIHRvIHN0YXJ0LCB3aGljaCBpcyBmYW50YXN0aWMgZm9yIGV4cGVyaW1lbnRhdGlvbiBhbmQgc21hbGwgcHJvamVjdHMuIEhvd2V2ZXIsIGFzIG9uZSBZb3VUdWJlciBub3RlZCwgdGhlc2UgY2FuIGJlIGNvbnN1bWVkIHF1aWNrbHkgaW4gaW50ZW5zaXZlIHJlc2VhcmNoIHRhc2tzLiBTb3VyY2U6IEFuYWx5c2lzIGZyb20gWW91VHViZSB0dXRvcmlhbHMgYW5kIEppbmEuYWkgd2Vic2l0ZSBTb3VyY2U6IEF1dGhvciYjMzk7cyBlc3RpbWF0ZSBiYXNlZCBvbiBjb21tb24gd2ViIHBhZ2Ugc3RydWN0dXJlcyBIb3cgRG9lcyBJdCBDb21wYXJlIHRvIE90aGVyIE1DUCBTZXJ2ZXJzPyBUaGUgTUNQIGVjb3N5c3RlbSBpcyBleHBsb2RpbmcsIHdpdGggbmV3IHNlcnZlcnMgYXBwZWFyaW5nIGNvbnN0YW50bHkuIFNvLCB3aGVyZSBkb2VzIHRoZSBKaW5hIFdlYiBTZWFyY2ggc2VydmVyIGZpdCBpbj8gSSYjMzk7dmUgY29tcGFyZWQgaXQgdG8gdGhyZWUgb3RoZXIgcG9wdWxhciBhbmQgZGlzdGluY3QgTUNQIHNlcnZlcnM6IFZlY3RhcmEsIFBpbmVjb25lLCBhbmQgUGxheXdyaWdodC4gTXkgYW5hbHlzaXMgc2hvd3MgdGhhdCBlYWNoIHNlcnZlciBpcyBoaWdobHkgc3BlY2lhbGl6ZWQuIFRoZXJlJiMzOTtzIG5vIHNpbmdsZSAmIzM0O2Jlc3QmIzM0OyBzZXJ2ZXI7IHRoZSByaWdodCBjaG9pY2UgZGVwZW5kcyBlbnRpcmVseSBvbiB5b3VyIHVzZSBjYXNlLiBGZWF0dXJlIENvbXBhcmlzb24gTWF0cml4IEZlYXR1cmUgSmluYSBXZWIgU2VhcmNoIChoeXBlcnNuaXBlcjA1KSBWZWN0YXJhIE1DUCBTZXJ2ZXIgUGluZWNvbmUgTUNQIFNlcnZlciBQbGF5d3JpZ2h0IE1DUCBTZXJ2ZXIgUHJpbWFyeSBVc2UgQ2FzZSBXZWIgQ29udGVudCAmYW1wOyBTZWFyY2ggRW50ZXJwcmlzZSBSQUcgJmFtcDsgRmFjdC1DaGVja2luZyBWZWN0b3IgRGF0YWJhc2UgTWFuYWdlbWVudCBCcm93c2VyIEF1dG9tYXRpb24gJmFtcDsgSW50ZXJhY3Rpb24gQ29yZSBGdW5jdGlvbiBGZXRjaGVzIGFuZCBzZWFyY2hlcyBwdWJsaWMgd2ViIGNvbnRlbnQgU2VhcmNoZXMgYSBwcml2YXRlLCBjdXJhdGVkIGRhdGEgY29ycHVzIE1hbmFnZXMgdmVjdG9yIGluZGV4ZXMgKHVwc2VydCwgcXVlcnkpIENvbnRyb2xzIGEgd2ViIGJyb3dzZXIgKGNsaWNrLCB0eXBlLCBuYXZpZ2F0ZSkgS2V5IFRvb2wgRXhhbXBsZSB3ZWJcXF9zZWFyY2ggYXNrXFxfdmVjdGFyYSB1cHNlcnQtcmVjb3JkcyBjbGljaywgZ290byBEYXRhIFNvdXJjZSBMaXZlIEludGVybmV0IFByaXZhdGUgVmVjdGFyYSBDb3JwdXMgUHJpdmF0ZSBQaW5lY29uZSBJbmRleCBMaXZlIEludGVybmV0ICh2aWEgYnJvd3NlcikgT3BlbiBTb3VyY2UgWWVzIChNSVQpIFllcyAoQXBhY2hlLTIuMCkgWWVzIChQcm9wcmlldGFyeSBjb21wb25lbnRzKSBZZXMgKEFwYWNoZS0yLjApIE9mZmljaWFsIFN1cHBvcnQgQ29tbXVuaXR5IFZlY3RhcmEgUGluZWNvbmUgTWljcm9zb2Z0IFNvdXJjZTogQXV0aG9yJiMzOTtzIGFuYWx5c2lzIG9mIG9mZmljaWFsIEdpdEh1YiByZXBvcyBhbmQgZG9jdW1lbnRhdGlvbi4gU3RyZW5ndGhzIGFuZCBXZWFrbmVzc2VzIGF0IGEgR2xhbmNlIFRvIHZpc3VhbGl6ZSB0aGlzLCBJJiMzOTt2ZSBjcmVhdGVkIGEgcmFkYXIgY2hhcnQuIEl0IGNsZWFybHkgc2hvd3MgaG93IGVhY2ggc2VydmVyIGV4Y2VscyBpbiBhIGRpZmZlcmVudCBkb21haW4uIFNvdXJjZTogQXV0aG9yJiMzOTtzIHF1YWxpdGF0aXZlIGFuYWx5c2lzLiBNeSB0YWtlYXdheTogVGhlIEppbmEgV2ViIFNlYXJjaCBNQ1AgU2VydmVyIGlzIHRoZSBnby10byBjaG9pY2UgZm9yIGdpdmluZyBhbiBMTE0gZ2VuZXJhbC1wdXJwb3NlIHdlYiBhY2Nlc3MuIEl0JiMzOTtzIG5vdCBmb3IgaW50ZXJhY3Rpbmcgd2l0aCBhIHByaXZhdGUgZGF0YWJhc2UgKGxpa2UgVmVjdGFyYS9QaW5lY29uZSkgb3IgZm9yIGNvbXBsZXggYnJvd3NlciBhdXRvbWF0aW9uIChsaWtlIFBsYXl3cmlnaHQpLiBJdHMgc3RyZW5ndGggaXMgaXRzIHNpbXBsaWNpdHkgYW5kIGZvY3VzOiBwcm92aWRpbmcgY2xlYW4sIHJlbGV2YW50IHdlYiBjb250ZW50IGFzIGNvbnRleHQuIFNvdXJjZTogR2l0SHViLCBhcyBvZiAyMDI1LTEwLTIwLiBOb3RlOiBcXGBoeXBlcnNuaXBlcjA1XFxgIHByb2plY3QgaXMgc21hbGxlciBhbmQgbm90IGRpcmVjdGx5IGNvbXBhcmFibGUgdG8gbGFyZ2UgY29ycG9yYXRlIHByb2plY3RzLiBXaGF0IFRvb2xzIEFyZSBJbnNpZGUgdGhlIEJveD8gVGhlIGh5cGVyc25pcGVyMDUgc2VydmVyIGlzIGludGVudGlvbmFsbHkgbWluaW1hbCwgcHJvdmlkaW5nIHR3byBjb3JlIHRvb2xzOiBmZXRjaFxcX3VybFxcX2NvbnRlbnQ6IFRha2VzIGEgVVJMIGFuZCByZXR1cm5zIGl0cyBjb250ZW50LCBwcm9jZXNzZWQgYnkgSmluYSYjMzk7cyBSZWFkZXIgQVBJLiB3ZWJcXF9zZWFyY2g6IFRha2VzIGEgcXVlcnkgc3RyaW5nIGFuZCByZXR1cm5zIGEgbGlzdCBvZiBzZWFyY2ggcmVzdWx0cywgd2l0aCBjb250ZW50IHByb2Nlc3NlZCBieSBKaW5hLiBIb3dldmVyLCB0aGUgb2ZmaWNpYWwgSmluYSBBSSBSZW1vdGUgTUNQIFNlcnZlciwgd2hpY2ggdGhpcyBwcm9qZWN0IGlzIGJhc2VkIG9uLCBvZmZlcnMgYSBtdWNoIHdpZGVyIGFycmF5IG9mIHRvb2xzLiBVbmRlcnN0YW5kaW5nIHRoZXNlIGdpdmVzIHlvdSBhIHNlbnNlIG9mIHRoZSBmdWxsIHBvdGVudGlhbCBvZiB0aGUgSmluYSBlY29zeXN0ZW0uIEhlcmUmIzM5O3MgYSBicmVha2Rvd24gYmFzZWQgb24gbXkgcmVzZWFyY2ggYW5kIGEgaGVscGZ1bCBZb3VUdWJlIGRlZXAgZGl2ZTogVG9vbCBOYW1lIERlc2NyaXB0aW9uIEFQSSBLZXkgVXNlIENhc2UgcmVhZFxcX3VybCBFeHRyYWN0cyBjbGVhbiwgc3RydWN0dXJlZCBjb250ZW50IGZyb20gYSBzaW5nbGUgVVJMLiBPcHRpb25hbCBBbmFseXppbmcgYSBzcGVjaWZpYyBhcnRpY2xlIG9yIGRvY3VtZW50YXRpb24gcGFnZS4gcGFyYWxsZWxcXF9yZWFkXFxfdXJsIFJlYWRzIG11bHRpcGxlIFVSTHMgY29uY3VycmVudGx5LiBPcHRpb25hbCBFZmZpY2llbnRseSBnYXRoZXJpbmcgZGF0YSBmcm9tIGEgbGlzdCBvZiBzb3VyY2VzLiBzZWFyY2hcXF93ZWIgUGVyZm9ybXMgYSBnZW5lcmFsIHdlYiBzZWFyY2guIFJlcXVpcmVkIEFuc3dlcmluZyBxdWVzdGlvbnMgdGhhdCByZXF1aXJlIGN1cnJlbnQgaW5mb3JtYXRpb24uIHNlYXJjaFxcX2FyeGl2IFNlYXJjaGVzIHRoZSBhclhpdiByZXBvc2l0b3J5IGZvciBhY2FkZW1pYyBwYXBlcnMuIFJlcXVpcmVkIEFzc2lzdGluZyB3aXRoIHNjaWVudGlmaWMgbGl0ZXJhdHVyZSByZXZpZXdzLiBjYXB0dXJlXFxfc2NyZWVuc2hvdFxcX3VybCBDYXB0dXJlcyBhIGhpZ2gtcXVhbGl0eSBzY3JlZW5zaG90IG9mIGEgd2VicGFnZS4gT3B0aW9uYWwgVmlzdWFsIGFuYWx5c2lzIG9mIGEgcGFnZSYjMzk7cyBsYXlvdXQgb3IgZGVzaWduLiBzb3J0XFxfYnlcXF9yZWxldmFuY2UgUmVyYW5rcyBhIGxpc3Qgb2YgZG9jdW1lbnRzIGJhc2VkIG9uIGEgcXVlcnkuIFJlcXVpcmVkIEltcHJvdmluZyB0aGUgcXVhbGl0eSBvZiBzZWFyY2ggcmVzdWx0cyBiZWZvcmUgc3VtbWFyaXphdGlvbi4gZGVkdXBsaWNhdGVcXF9zdHJpbmdzIFJlbW92ZXMgc2VtYW50aWNhbGx5IHNpbWlsYXIgdGV4dCBzbmlwcGV0cy4gUmVxdWlyZWQgQ3JlYXRpbmcgYSBjb25jaXNlIHN1bW1hcnkgZnJvbSBtdWx0aXBsZSBub2lzeSBzb3VyY2VzLiBTb3VyY2U6IEFuYWx5c2lzIG9mIEppbmEgQUkgZG9jdW1lbnRhdGlvbiBhbmQgY29tbXVuaXR5IHZpZGVvIHR1dG9yaWFscy4gSG93IERvIEkgVXNlIEl0PyBBIFN0ZXAtYnktU3RlcCBHdWlkZSBHZXR0aW5nIHN0YXJ0ZWQgaXMgc3VycHJpc2luZ2x5IHN0cmFpZ2h0Zm9yd2FyZCwgZXNwZWNpYWxseSBpZiB5b3UmIzM5O3JlIHVzaW5nIERvY2tlci4gSGVyZeKAmXMgdGhlIHByb2Nlc3MgSSBmb2xsb3dlZCwgYmFzZWQgb24gdGhlIHByb2plY3QmIzM5O3MgUkVBRE1FLiBTdGVwIDE6IFByZXJlcXVpc2l0ZXMgWW91JiMzOTtsbCBuZWVkIGEgZmV3IHRoaW5nczogUHl0aG9uIDMuOCs6IFRoZSBzZXJ2ZXIgaXMgYnVpbHQgaW4gUHl0aG9uLiBEb2NrZXIgJmFtcDsgRG9ja2VyIENvbXBvc2U6IFRoaXMgaXMgdGhlIHJlY29tbWVuZGVkIG1ldGhvZCBmb3IgYSBjbGVhbiwgaXNvbGF0ZWQgZGVwbG95bWVudC4gSmluYSBBSSBBUEkgS2V5OiBHbyB0byB0aGUgSmluYSBBSSB3ZWJzaXRlLCBzaWduIHVwLCBhbmQgZ3JhYiB5b3VyIGZyZWUgQVBJIGtleS4gVGhlIGZpcnN0IDEwIG1pbGxpb24gdG9rZW5zIGFyZSBmcmVlLiBTdGVwIDI6IEluc3RhbGxhdGlvbiAmYW1wOyBDb25maWd1cmF0aW9uIChEb2NrZXIgTWV0aG9kKSBUaGlzIGlzIHRoZSBiZWF1dHkgb2YgYSB3ZWxsLW1hZGUgb3Blbi1zb3VyY2UgcHJvamVjdC4gVGhlIHNldHVwIGlzIHNjcmlwdGVkIGFuZCBzaW1wbGUuICMgMS4gQ2xvbmUgdGhlIHJlcG9zaXRvcnkgZ2l0IGNsb25lIGh0dHBzOi8vZ2l0aHViLmNvbS9oeXBlcnNuaXBlcjA1L0ppbmFXZWJTZWFyY2hNQ1AuZ2l0IGNkIEppbmFXZWJTZWFyY2hNQ1AgIyAyLiBDcmVhdGUgeW91ciBlbnZpcm9ubWVudCBmaWxlIGNwIC5lbnYuZXhhbXBsZSAuZW52ICMgMy4gQWRkIHlvdXIgQVBJIGtleSB0byB0aGUgLmVudiBmaWxlICMgT3BlbiAuZW52IGluIHlvdXIgZWRpdG9yIGFuZCBwYXN0ZSB5b3VyIGtleSAjIEpJTkFcXF9BUElcXF9LRVk9eW91clxcX2FjdHVhbFxcX2FwaVxcX2tleVxcX2hlcmUgIyA0LiBCdWlsZCBhbmQgcnVuIHdpdGggRG9ja2VyIENvbXBvc2UgZG9ja2VyLWNvbXBvc2UgdXAgLWQgVGhhdCYjMzk7cyBpdCEgVGhlIHNlcnZlciBpcyBub3cgcnVubmluZyBpbiB0aGUgYmFja2dyb3VuZCBvbiBwb3J0IDUwMDMuIFlvdSBjYW4gY2hlY2sgaXRzIGxvZ3Mgd2l0aCBkb2NrZXItY29tcG9zZSBsb2dzIC1mLiBTdGVwIDM6IEludGVncmF0aW9uIHdpdGggYW4gTUNQIENsaWVudCAobGlrZSBDbGF1ZGUgRGVza3RvcCkgTm93LCB5b3UganVzdCBuZWVkIHRvIHRlbGwgeW91ciBMTE0gY2xpZW50IHdoZXJlIHRvIGZpbmQgdGhlIHNlcnZlci4gRm9yIENsYXVkZSBEZXNrdG9wLCB5b3UmIzM5O2QgZWRpdCB5b3VyIGNvbmZpZ3VyYXRpb24gZmlsZSAoY2xhdWRlXFxfZGVza3RvcFxcX2NvbmZpZy5qc29uKSBhbmQgYWRkIHRoZSBzZXJ2ZXIgZGVmaW5pdGlvbjogeyAmIzM0O21jcFNlcnZlcnMmIzM0OzogeyAmIzM0O2ppbmFcXF93ZWJcXF9zZWFyY2gmIzM0OzogeyAmIzM0O3VybCYjMzQ7OiAmIzM0O2h0dHA6Ly9sb2NhbGhvc3Q6NTAwMy9zc2UmIzM0OyB9IH0gfSBBZnRlciByZXN0YXJ0aW5nIHlvdXIgY2xpZW50LCB0aGUgbmV3IHRvb2xzIChmZXRjaFxcX3VybFxcX2NvbnRlbnQgYW5kIHdlYlxcX3NlYXJjaCkgd2lsbCBiZSBhdmFpbGFibGUgdG8geW91ciBMTE0uIEl0IHdpbGwgYXV0b21hdGljYWxseSBpbnZva2UgdGhlbSB3aGVuIHlvdSBhc2sgYSBxdWVzdGlvbiB0aGF0IHJlcXVpcmVzIHdlYiBhY2Nlc3MuIFRoZSBpbnRlcmZhY2UgZm9yIEppbmEgQUkmIzM5O3MgRGVlcFNlYXJjaCwgd2hpY2ggY29tYmluZXMgc2VhcmNoLCByZWFkaW5nLCBhbmQgcmVhc29uaW5nIGNhcGFiaWxpdGllcyBXaGF0IEFyZSB0aGUgUmVhbC1Xb3JsZCBVc2UgQ2FzZXM/IFRoaXMgaXMgd2hlcmUgdGhlb3J5IG1lZXRzIHByYWN0aWNlLiBBIHRvb2wgaXMgb25seSBhcyBnb29kIGFzIHdoYXQgeW91IGNhbiBidWlsZCB3aXRoIGl0LiBIZXJlIGFyZSBhIGNvdXBsZSBvZiBwb3dlcmZ1bCB1c2UgY2FzZXMgdGhhdCB0aGlzIHNlcnZlciB1bmxvY2tzLiBVc2UgQ2FzZSAxOiBUaGUgSHlwZXItSW5mb3JtZWQgUkFHIFN5c3RlbSBTdGFuZGFyZCBSQUcgc3lzdGVtcyBhcmUgbGltaXRlZCB0byBhIHN0YXRpYywgcHJlLWluZGV4ZWQgc2V0IG9mIGRvY3VtZW50cy4gQnV0IHdoYXQgaWYgeW91ciBSQUcgc3lzdGVtIGNvdWxkIHNlYXJjaCB0aGUgbGl2ZSB3ZWIgZm9yIGFuc3dlcnM/IFdpdGggdGhpcyBNQ1Agc2VydmVyLCB5b3UgY2FuIGJ1aWxkIGEgd29ya2Zsb3cgd2hlcmUgdGhlIExMTSBmaXJzdCBxdWVyaWVzIHRoZSB3ZWIgZm9yIHJlbGV2YW50LCB1cC10by10aGUtbWludXRlIGluZm9ybWF0aW9uIGJlZm9yZSBjb25zdWx0aW5nIGl0cyBpbnRlcm5hbCBrbm93bGVkZ2UgYmFzZS4gVGhpcyBpcyBwZXJmZWN0IGZvciBhcHBsaWNhdGlvbnMgdGhhdCBuZWVkIHRvIGFuc3dlciBxdWVzdGlvbnMgYWJvdXQgY3VycmVudCBldmVudHMsIHJlY2VudCBwcm9kdWN0IHJlbGVhc2VzLCBvciBicmVha2luZyBuZXdzLiBVc2UgQ2FzZSAyOiBBdXRvbWF0ZWQgU0VPIGFuZCBDb21wZXRpdG9yIEFuYWx5c2lzIEkgd2FzIHBhcnRpY3VsYXJseSBpbXByZXNzZWQgYnkgYSBZb3VUdWJlIGRlbW9uc3RyYXRpb24gd2hlcmUgYSB1c2VyIHRhc2tlZCBhbiBMTE0gd2l0aCBwZXJmb3JtaW5nIFNFTyByZXNlYXJjaCBmb3IgYSBsb2NhbCBidXNpbmVzcy4gVGhlIHByb2Nlc3Mgd2FzIGluY3JlZGlibGU6IFRoZSB1c2VyIHByb3ZpZGVkIHRoZSBMTE0gd2l0aCBhIGxpc3Qgb2YgY29tcGV0aXRvciBVUkxzLiBUaGUgTExNIHVzZWQgdGhlIHBhcmFsbGVsXFxfcmVhZFxcX3VybCB0b29sIHRvIGZldGNoIGFuZCBhbmFseXplIHRoZSBjb250ZW50IG9mIGFsbCBjb21wZXRpdG9yIHNpdGVzIHNpbXVsdGFuZW91c2x5LiBJdCB0aGVuIHVzZWQgc2VhcmNoXFxfd2ViIHRvIGZpbmQgcmVsZXZhbnQga2V5d29yZHMgYW5kIGluZHVzdHJ5IHRyZW5kcy4gRmluYWxseSwgaXQgc3ludGhlc2l6ZWQgYWxsIHRoaXMgaW5mb3JtYXRpb24gaW50byBhIGNvbXByZWhlbnNpdmUgU0VPIHN0cmF0ZWd5IGRvY3VtZW50LCBjb21wbGV0ZSB3aXRoIGtleXdvcmQgc3VnZ2VzdGlvbnMsIGJsb2cgdG9waWMgaWRlYXMsIGFuZCBhIDYtbW9udGggaW1wbGVtZW50YXRpb24gcm9hZG1hcC4gVGhlIHByZXNlbnRlciBub3RlZCB0aGF0IHRoaXMgZW50aXJlIHByb2Nlc3Mgd2FzIGNvbXBsZXRlZCBpbiBtaW51dGVzLCB3aGlsZSBhIHNpbWlsYXIgdGFzayB1c2luZyBhbm90aGVyIG1ldGhvZCB3YXMgc3RpbGwgcnVubmluZyBhZnRlciA0MCBtaW51dGVzLiBUaGlzIGhpZ2hsaWdodHMgdGhlIG1hc3NpdmUgZWZmaWNpZW5jeSBnYWlucyBwb3NzaWJsZS4gQSB0dXRvcmlhbCBkZW1vbnN0cmF0aW5nIHRoZSBzcGVlZCBhbmQgcG93ZXIgb2YgYSBKaW5hIEFJIE1DUCBzZXJ2ZXIgZm9yIFNFTyByZXNlYXJjaCBXaGF0JiMzOTtzIHRoZSBGdXR1cmUgZm9yIEppbmEgYW5kIGl0cyBNQ1AgRWNvc3lzdGVtPyBUaGUgYmlnZ2VzdCBuZXdzLCB3aXRob3V0IGEgZG91YnQsIGlzIHRoZSBhY3F1aXNpdGlvbiBvZiBKaW5hIEFJIGJ5IEVsYXN0aWMgaW4gT2N0b2JlciAyMDI1LiBUaGlzIGlzIGEgbWFzc2l2ZSB2YWxpZGF0aW9uIG9mIEppbmEmIzM5O3MgdGVjaG5vbG9neSBhbmQgc2V0cyBhIGNsZWFyIHBhdGggZm9yIGl0cyBmdXR1cmUuIFdoYXQgZG9lcyB0aGlzIG1lYW4gZm9yIHNlcnZlcnMgbGlrZSBoeXBlcnNuaXBlcjA1JiMzOTtzPyBEZWVwZXIgRW50ZXJwcmlzZSBJbnRlZ3JhdGlvbjogSmluYSYjMzk7cyBtb2RlbHMgd2lsbCBiZSBpbnRlZ3JhdGVkIGludG8gdGhlIEVsYXN0aWMgU2VhcmNoIEFJIFBsYXRmb3JtIGFuZCBtYWRlIGF2YWlsYWJsZSB0aHJvdWdoIHRoZSBFbGFzdGljIEluZmVyZW5jZSBTZXJ2aWNlIChFSVMpLiBUaGlzIG1lYW5zIG1vcmUgcm9idXN0LCBzY2FsYWJsZSwgYW5kIHNlY3VyZSBkZXBsb3ltZW50cyBmb3IgZW50ZXJwcmlzZSBjdXN0b21lcnMuIEZvY3VzIG9uIFJBRyBhbmQgUmVsZXZhbmNlOiBFbGFzdGljJiMzOTtzIG9mZmljaWFsIHN0YXRlbWVudHMgZW1waGFzaXplIHN0cmVuZ3RoZW5pbmcgdGhlaXIgY2FwYWJpbGl0aWVzIGluIHZlY3RvciBzZWFyY2gsIFJBRywgYW5kIGNvbnRleHQgZW5naW5lZXJpbmcuIFRoaXMgc3VnZ2VzdHMgSmluYSYjMzk7cyB0ZWNobm9sb2d5IHdpbGwgYmUgYXQgdGhlIGhlYXJ0IG9mIG5leHQtZ2VuZXJhdGlvbiBlbnRlcnByaXNlIHNlYXJjaC4gQ29udGludWVkIE9wZW4gU291cmNlIENvbW1pdG1lbnQ6IEVsYXN0aWMgaGFzIHBsZWRnZWQgdG8gY29udGludWUgSmluYSBBSSYjMzk7cyBwcmFjdGljZSBvZiByZWxlYXNpbmcgbW9kZWxzIG9uIEh1Z2dpbmcgRmFjZS4gVGhpcyBpcyBncmVhdCBuZXdzIGZvciB0aGUgY29tbXVuaXR5IGFuZCBmb3IgcHJvamVjdHMgbGlrZSB0aGlzIE1DUCBzZXJ2ZXIsIGVuc3VyaW5nIHRoZSB1bmRlcmx5aW5nIGVuZ2luZSByZW1haW5zIG9wZW4gYW5kIGFjY2Vzc2libGUuIFRoZSBvdmVyYWxsIE1DUCBtYXJrZXQgaXMgcHJvamVjdGVkIHRvIGdyb3cgdG8gJDEwLjMgYmlsbGlvbiBieSAyMDI1LCB3aXRoIGEgc3RhZ2dlcmluZyBDQUdSIG9mIDM0LjYlLiAuIFRoaXMgZXhwbG9zaXZlIGdyb3d0aCwgY29tYmluZWQgd2l0aCB0aGUgc3RyYXRlZ2ljIGJhY2tpbmcgb2YgYSBtYWpvciBwbGF5ZXIgbGlrZSBFbGFzdGljLCBwYWludHMgYSB2ZXJ5IGJyaWdodCBmdXR1cmUgZm9yIHRoZSBKaW5hIGVjb3N5c3RlbS4gU291cmNlOiBTdXBlckFHSSBNYXJrZXQgUmVwb3J0LCAyMDI1IFdoYXQgRG9lcyBUaGlzIE1lYW4gZm9yIFVzIGFzIEJ1aWxkZXJzPyBGb3IgbWUsIHRoZSBzdG9yeSBvZiB0aGUgSmluYSBXZWIgU2VhcmNoIE1DUCBTZXJ2ZXIgaXMgaW5jcmVkaWJseSBpbnNwaXJpbmcuIEl0JiMzOTtzIGEgcGVyZmVjdCBleGFtcGxlIG9mIGhvdyBvcGVuIHN0YW5kYXJkcyBhbmQgb3Blbi1zb3VyY2UgdGVjaG5vbG9neSBjcmVhdGUgYSB2aXJ0dW91cyBjeWNsZS4gQSBjb21wYW55IChBbnRocm9waWMpIHByb3Bvc2VzIGFuIG9wZW4gc3RhbmRhcmQgKE1DUCkuIEFub3RoZXIgY29tcGFueSAoSmluYSBBSSkgYnVpbGRzIGEgcG93ZXJmdWwsIG9wZW4tc291cmNlIGZvdW5kYXRpb24gZm9yIGEgc3BlY2lmaWMgcHJvYmxlbSAoc2VhcmNoKS4gQSBjb21tdW5pdHkgZGV2ZWxvcGVyIChoeXBlcnNuaXBlcjA1KSB1c2VzIHRoZXNlIGJ1aWxkaW5nIGJsb2NrcyB0byBjcmVhdGUgYSBwcmFjdGljYWwsIHZhbHVhYmxlIHRvb2wgdGhhdCBzb2x2ZXMgYSByZWFsLXdvcmxkIHByb2JsZW0gZm9yIG90aGVyIGVuZ2luZWVycy4gQSBsYXJnZXIgY29tcGFueSAoRWxhc3RpYykgcmVjb2duaXplcyB0aGUgdmFsdWUgYW5kIGFjcXVpcmVzIHRoZSBmb3VuZGF0aW9uYWwgdGVjaCwgZW5zdXJpbmcgaXRzIGxvbmctdGVybSBncm93dGggYW5kIHN0YWJpbGl0eS4gVGhpcyBzaG93cyB0aGF0IHdlIGRvbiYjMzk7dCBhbHdheXMgaGF2ZSB0byB3YWl0IGZvciBiaWcgdGVjaCB0byBkZWxpdmVyIHBvbGlzaGVkLCBlbmQtdG8tZW5kIHNvbHV0aW9ucy4gQnkgbGV2ZXJhZ2luZyBvcGVuIHByb3RvY29scyBhbmQgY29tbXVuaXR5IGNvbnRyaWJ1dGlvbnMsIHdlIGNhbiBidWlsZCBwb3dlcmZ1bCwgY3VzdG9taXplZCBBSSB3b3JrZmxvd3MgdG9kYXkuIEl0JiMzOTtzIGEgcmVtaW5kZXIgdGhhdCBzb21lIG9mIHRoZSBtb3N0IGlubm92YXRpdmUgdG9vbHMgY29tZSBmcm9tIGluZGl2aWR1YWwgZGV2ZWxvcGVycyBzb2x2aW5nIGEgcHJvYmxlbSB0aGV5JiMzOTtyZSBwYXNzaW9uYXRlIGFib3V0LiBGcmVxdWVudGx5IEFza2VkIFF1ZXN0aW9ucyAoRkFRKSBJcyB0aGUgSmluYSBXZWIgU2VhcmNoIE1DUCBTZXJ2ZXIgZnJlZSB0byB1c2U/IFRoZSBzZXJ2ZXIgc29mdHdhcmUgaXRzZWxmIGlzIG9wZW4tc291cmNlIChNSVQgTGljZW5zZSkgYW5kIGZyZWUuIEhvd2V2ZXIsIGl0IHJlbGllcyBvbiB0aGUgSmluYSBBSSBBUEksIHdoaWNoIGhhcyBhIGZyZWUgdGllciBvZiAxMCBtaWxsaW9uIHRva2Vucy4gRm9yIGhlYXZ5IHVzYWdlLCB5b3UgbWF5IG5lZWQgdG8gdXBncmFkZSB0byBhIHBhaWQgcGxhbi4gSXMgdGhpcyBhbiBvZmZpY2lhbCBwcm9kdWN0IGZyb20gSmluYSBBST8gTm8sIHRoZSBzZXJ2ZXIgYnkgaHlwZXJzbmlwZXIwNSBpcyBhIGNvbW11bml0eS1idWlsdCBwcm9qZWN0LiBIb3dldmVyLCBpdCB1c2VzIHRoZSBvZmZpY2lhbCBKaW5hIEFJIEFQSXMgYW5kIHRoZSBvZmZpY2lhbCBNQ1AgUHl0aG9uIFNESywgbWFraW5nIGl0IGEgcmVsaWFibGUgYW5kIHdlbGwtYXJjaGl0ZWN0ZWQgdG9vbC4gV2hhdCYjMzk7cyB0aGUgbWFpbiBkaWZmZXJlbmNlIGJldHdlZW4gdGhpcyBhbmQgdGhlIFBsYXl3cmlnaHQgTUNQIFNlcnZlcj8gVGhlIEppbmEgc2VydmVyIGlzIGZvciBjb250ZW50IHJldHJpZXZhbC4gSXQgZXhjZWxzIGF0IGZldGNoaW5nIGFuZCBjbGVhbmluZyB0aGUgdGV4dCBjb250ZW50IG9mIHdlYiBwYWdlcy4gVGhlIFBsYXl3cmlnaHQgc2VydmVyIGlzIGZvciBicm93c2VyIGludGVyYWN0aW9uLiBJdCBleGNlbHMgYXQgYXV0b21hdGluZyBhY3Rpb25zIGxpa2UgY2xpY2tpbmcgYnV0dG9ucywgZmlsbGluZyBmb3JtcywgYW5kIG5hdmlnYXRpbmcgY29tcGxleCwgSmF2YVNjcmlwdC1oZWF2eSB3ZWJzaXRlcy4gSXMgaXQgc2VjdXJlIHRvIHVzZT8gVGhlIHNlcnZlciBpdHNlbGYgZm9sbG93cyBnb29kIHNlY3VyaXR5IHByYWN0aWNlcyBieSB1c2luZyBlbnZpcm9ubWVudCB2YXJpYWJsZXMgZm9yIEFQSSBrZXlzLiBXaGVuIGRlcGxveWluZyB3aXRoIERvY2tlciwgaXQmIzM5O3MgaXNvbGF0ZWQgZnJvbSB5b3VyIGhvc3Qgc3lzdGVtLiBIb3dldmVyLCBsaWtlIGFueSB0b29sIHRoYXQgY29ubmVjdHMgdG8gdGhlIGludGVybmV0LCB5b3Ugc2hvdWxkIGJlIG1pbmRmdWwgb2YgdGhlIHNlY3VyaXR5IG9mIHRoZSBNQ1AgY2xpZW50IHlvdSYjMzk7cmUgdXNpbmcgYW5kIGZvbGxvdyBiZXN0IHByYWN0aWNlcyBmb3IgbmV0d29yayBzZWN1cml0eS4gVGhpcyByZXBvcnQgaXMgZm9yIGluZm9ybWF0aW9uYWwgYW5kIGVkdWNhdGlvbmFsIHB1cnBvc2VzIG9ubHkuIFRoZSBpbmZvcm1hdGlvbiBwcm92aWRlZCBpcyBiYXNlZCBvbiBwdWJsaWNseSBhdmFpbGFibGUgZGF0YSBhcyBvZiBPY3RvYmVyIDIwLCAyMDI1LCBhbmQgbWF5IG5vdCByZWZsZWN0IHRoZSBtb3N0IGN1cnJlbnQgZGV2ZWxvcG1lbnRzLiBVc2VycyBzaG91bGQgZXhlcmNpc2UgdGhlaXIgb3duIGp1ZGdtZW50IGFuZCBjb25kdWN0IHRoZWlyIG93biByZXNlYXJjaCBiZWZvcmUgaW1wbGVtZW50aW5nIGFueSB0ZWNobm9sb2dpZXMgb3IgbWFraW5nIGFueSBpbnZlc3RtZW50IGRlY2lzaW9ucy4gUmVmZXJlbmNlIFxcWzFcXF0gSmluYSBBSSAtIFlvdXIgU2VhcmNoIEZvdW5kYXRpb24sIFN1cGVyY2hhcmdlZC4gaHR0cHM6Ly9qaW5hLmFpLyBcXFsyXFxdIFRlY2huaWNhbCBjb21wYXJpc29uIG9mIHRvcCBNQ1Agc2VydmVycyBmb3IgMjAyNSAtIEdyYXBoaXRlIGh0dHBzOi8vZ3JhcGhpdGUuZGV2L2d1aWRlcy9tY3Atc2VydmVyLWNvbXBhcmlzb24tMjAyNSBcXFszXFxdIEppbmEgQUkgTUNQIEJlYXRzIENsYXVkZSBDb2RlIGJ5IDMwWCAoRnJlZSBUdXRvcmlhbCkgLSBZb3VUdWJlIGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9N09KWnVcXF9UYkZoQSBcXFs0XFxdIEppbmEgQUkgUmVhZGVyIE1DUCBTZXJ2ZXI6IEFuIEFJIEVuZ2luZWVyJiMzOTtzIERlZXAgRGl2ZSBodHRwczovL3NreXdvcmsuYWkvc2t5cGFnZS9lbi9qaW5hLWFpLXJlYWRlci1kZWVwLWRpdmUvMTk3Nzk4NTQ0NjMzNzUxNTUyMCBcXFs1XFxdIEVsYXN0aWMgQ29tcGxldGVzIEFjcXVpc2l0aW9uIG9mIEppbmEgQUksIGEgTGVhZGVyIGluIEZyb250aWVyIE1vZGVscyAuLi4gaHR0cHM6Ly9pci5lbGFzdGljLmNvL25ld3MvbmV3cy1kZXRhaWxzLzIwMjUvRWxhc3RpYy1Db21wbGV0ZXMtQWNxdWlzaXRpb24tb2YtSmluYS1BSS1hLUxlYWRlci1pbi1Gcm9udGllci1Nb2RlbHMtZm9yLU11bHRpbW9kYWwtYW5kLU11bHRpbGluZ3VhbC1TZWFyY2gvZGVmYXVsdC5hc3B4IFxcWzZcXF0gVG9wIDEwIE1DUCBTZXJ2ZXJzIFRyYW5zZm9ybWluZyBBSSBpbiAyMDI1OiBUcmVuZHMsIFRvb2xzLCBhbmQgLi4uIGh0dHBzOi8vc3VwZXJhZ2kuY29tL3RvcC0xMC1tY3Atc2VydmVycy10cmFuc2Zvcm1pbmctYWktaW4tMjAyNS10cmVuZHMtdG9vbHMtYW5kLWluZHVzdHJ5LWFwcGxpY2F0aW9ucy8gXFxbN1xcXSBPZmZpY2lhbCBKaW5hIEFJIFJlbW90ZSBNQ1AgU2VydmVyIC0gR2l0SHViIGh0dHBzOi8vZ2l0aHViLmNvbS9qaW5hLWFpL01DUCBcXFs4XFxdIFRoaXMgTkVXIE1DUCBTZXJ2ZXIgR2l2ZXMgQ2xhdWRlIENvZGUgU1VQRVIgUE9XRVJTIChGUkVFKSBodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PVNmNUFhQThCdTJvIiwiaGlnaGxpZ2h0cyI6WyItIENvcHkgTGlua1xuLSBYXG4tIEZhY2Vib29rXG5cbiMjIyBPdXRsaW5lXG5cbiMjIFdoYXQgRXhhY3RseSBpcyB0aGUgSmluYSBXZWIgU2VhcmNoIE1DUCBTZXJ2ZXI/XG5cbiMjIyBQaWxsYXIgMTogSmluYSBBSSAtIFRoZSBTZWFyY2ggRm91bmRhdGlvblxuXG4jIyMgUGlsbGFyIDI6IFRoZSBNb2RlbCBDb250ZXh0IFByb3RvY29sIChNQ1ApIC0gVGhlIFwiSFRUUCBmb3IgQUlcIlxuXG4jIyMgUGlsbGFyIDM6IFRoZSBcXGBoeXBlcnNuaXBlcjA1XFxgIEltcGxlbWVudGF0aW9uIC0gVGhlIFByYWN0aWNhbCBCcmlkZ2VcblxuIyMgV2hhdCBBcmUgSXRzIEtleSBGZWF0dXJlcz9cblxuIyMgSG93IERvZXMgSXQgQ29tcGFyZSB0byBPdGhlciBNQ1AgU2VydmVycz9cblxuIyMjIEZlYXR1cmUgQ29tcGFyaXNvbiBNYXRyaXhcblxuIyMjIFN0cmVuZ3RocyBhbmQgV2Vha25lc3NlcyBhdCBhIEdsYW5jZVxuXG4jIyBXaGF0IFRvb2xzIEFyZSBJbnNpZGUgdGhlIEJveD9cblxuIyMgSG93IERvIEkgVXNlIEl0PyBBIFN0ZXAtYnktU3RlcCBHdWlkZVxuXG4jIyMgU3RlcCAxOiBQcmVyZXF1aXNpdGVzXG5cbiMjIyBTdGVwIDI6IEluc3RhbGxhdGlvbiAmIENvbmZpZ3VyYXRpb24gKERvY2tlciBNZXRob2QpXG5cbiMjIyBTdGVwIDM6IEludGVncmF0aW9uIHdpdGggYW4gTUNQIENsaWVudCAobGlrZSBDbGF1ZGUgRGVza3RvcClcblxuIyMgV2hhdCBBcmUgdGhlIFJlYWwtV29ybGQgVXNlIENhc2VzP1xuXG4jIyMgVXNlIENhc2UgMTogVGhlIEh5cGVyLUluZm9ybWVkIFJBRyBTeXN0ZW1cblxuIyMjIFVzZSBDYXNlIDI6IEF1dG9tYXRlZCBTRU8gYW5kIENvbXBldGl0b3IgQW5hbHlzaXNcblxuIyMgV2hhdCdzIHRoZSBGdXR1cmUgZm9yIEppbmEgYW5kIGl0cyBNQ1AgRWNvc3lzdGVtP1xuXG4jIyBXaGF0IERvZXMgVGhpcyBNZWFuIGZvciBVcyBhcyBCdWlsZGVycz9cblxuIyMgRnJlcXVlbnRseSBBc2tlZCBRdWVzdGlvbnMgKEZBUSlcblxuIyBKaW5hIFdlYiBTZWFyY2ggTUNQIFNlcnZlcjogQW4gQUkgRW5naW5lZXIncyBEZWVwIERpdmVcblxuU2t5d29ya1xuXG4xMC8yNC8yMDI1XG5cbkluZm9ybWF0aW9uXG5cblNoYXJlXG5cbiMjIEZlYXR1cmVkIFBpY2tzXG5cbiMjIEJyb3dzZSBieSBEYXRlXG5cblsxMC8xNV0oaHR0cHM6Ly9za3l3b3JrLmFpL3NreXBhZ2UvZW4vbGlzdC8xMC0xNS0yMDI1KSBbMTAvMTddKGh0dHBzOi8vc2t5d29yay5haS9za3lwYWdlL2VuL2xpc3QvMTAtMTctMjAyNSkgWzEwLzE4XShodHRwczovL3NreXdvcmsuYWkvc2t5cGFnZS9lbi9saXN0LzEwLTE4LTIwMjUpIFsxMC8xOV0oaHR0cHM6Ly9za3l3b3JrLmFpL3NreXBhZ2UvZW4vbGlzdC8xMC0xOS0yMDI1KSBbMTAvMjBdKGh0dHBzOi8vc2t5d29yay5haS9za3lwYWdlL2VuL2xpc3QvMTAtMjAtMjAyNSkgWzEwLzIxXShodHRwczovL3NreXdvcmsuYWkvc2t5cGFnZS9lbi9saXN0LzEwLTIxLTIwMjUpIFsxMC8yMl0oaHR0cHM6Ly9za3l3b3JrLmFpL3NreXBhZ2UvZSJdLCJoaWdobGlnaHRTY29yZXMiOlsxXSwic3VtbWFyeSI6IlRoZSBhcnRpY2xlIFwiSmluYSBXZWIgU2VhcmNoIE1DUCBTZXJ2ZXI6IEFuIEFJIEVuZ2luZWVyJ3MgRGVlcCBEaXZlXCIgcHJvdmlkZXMgYW4gaW4tZGVwdGggZXhwbG9yYXRpb24gb2YgdGhlIEppbmEgV2ViIFNlYXJjaCBNQ1AgU2VydmVyLCB3aGljaCBzZXJ2ZXMgYXMgYSBmb3VuZGF0aW9uYWwgdG9vbCBmb3IgQUktZHJpdmVuIHNlYXJjaCBhcHBsaWNhdGlvbnMuIEtleSB0b3BpY3MgaW5jbHVkZTpcblxuMS4gKipPdmVydmlldyBvZiBKaW5hIEFJIGFuZCBNQ1AqKjogSmluYSBBSSBpcyBpbnRyb2R1Y2VkIGFzIHRoZSBjb3JlIGZyYW1ld29yayBmb3IgYnVpbGRpbmcgc2VhcmNoIGFwcGxpY2F0aW9ucywgd2hpbGUgdGhlIE1vZGVsIENvbnRleHQgUHJvdG9jb2wgKE1DUCkgaXMgbGlrZW5lZCB0byBcIkhUVFAgZm9yIEFJLFwiIGZhY2lsaXRhdGluZyBjb21tdW5pY2F0aW9uIGJldHdlZW4gQUkgbW9kZWxzLlxuXG4yLiAqKkltcGxlbWVudGF0aW9uIGFuZCBGZWF0dXJlcyoqOiBUaGUgYXJ0aWNsZSBkaXNjdXNzZXMgdGhlIGBoeXBlcnNuaXBlcjA1YCBpbXBsZW1lbnRhdGlvbiwgaGlnaGxpZ2h0aW5nIGl0cyBwcmFjdGljYWwgYXBwbGljYXRpb25zLiBLZXkgZmVhdHVyZXMgb2YgdGhlIE1DUCBTZXJ2ZXIgYXJlIG91dGxpbmVkLCBhbG9uZyB3aXRoIGEgY29tcGFyaXNvbiB0byBvdGhlciBNQ1Agc2VydmVycywgZGV0YWlsaW5nIHN0cmVuZ3RocyBhbmQgd2Vha25lc3Nlcy5cblxuMy4gKipVc2FnZSBHdWlkZSoqOiBBIHN0ZXAtYnktc3RlcCBndWlkZSBpcyBwcm92aWRlZCBmb3IgaW5zdGFsbGF0aW9uIGFuZCBjb25maWd1cmF0aW9uLCBpbmNsdWRpbmcgcHJlcmVxdWlzaXRlcyBhbmQgaW50ZWdyYXRpb24gd2l0aCBNQ1AgY2xpZW50cyBsaWtlIENsYXVkZSBEZXNrdG9wLlxuXG40LiAqKlJlYWwtV29ybGQgQXBwbGljYXRpb25zKio6IFRoZSBhcnRpY2xlIHByZXNlbnRzIHVzZSBjYXNlcyBzdWNoIGFzIGEgaHlwZXItaW5mb3JtZWQgUkFHIHN5c3RlbSBhbmQgYXV0b21hdGVkIFNFTyBhbmFseXNpcywgc2hvd2Nhc2luZyB0aGUgc2VydmVyJ3MgdmVyc2F0aWxpdHkuXG5cbjUuICoqRnV0dXJlIE91dGxvb2sqKjogSXQgY29uY2x1ZGVzIHdpdGggaW5zaWdodHMgaW50byB0aGUgZnV0dXJlIG9mIEppbmEgYW5kIGl0cyBNQ1AgZWNvc3lzdGVtLCBlbXBoYXNpemluZyBpdHMgc2lnbmlmaWNhbmNlIGZvciBkZXZlbG9wZXJzIGFuZCBidWlsZGVycyBpbiB0aGUgQUkgc3BhY2UuXG5cbk92ZXJhbGwsIHRoZSBhcnRpY2xlIHNlcnZlcyBhcyBhIGNvbXByZWhlbnNpdmUgcmVzb3VyY2UgZm9yIEFJIGVuZ2luZWVycyBpbnRlcmVzdGVkIGluIGxldmVyYWdpbmcgdGhlIEppbmEgV2ViIFNlYXJjaCBNQ1AgU2VydmVyIGZvciBpbm5vdmF0aXZlIHNlYXJjaCBzb2x1dGlvbnMuIiwiaW1hZ2UiOiJodHRwczovL3N0YXRpYy1zMy5za3l3b3JrY2RuLmNvbS9mZS9za3l3b3JrLXNpdGUtYXNzZXRzL2ltYWdlcy9hZC5qcGVnP3Y9MS4wIn1dLCJzdGF0dXNlcyI6W3siaWQiOiJodHRwczovL3NreXdvcmsuYWkvc2t5cGFnZS9lbi9qaW5hLXdlYi1zZWFyY2gtYWktZW5naW5lZXIvMTk4MDIwNjI1NzU1MjAwNzE2OCIsInN0YXR1cyI6InN1Y2Nlc3MiLCJzb3VyY2UiOiJjYWNoZWQifV0sImNvc3REb2xsYXJzIjp7InRvdGFsIjowLjAwMywiY29udGVudHMiOnsidGV4dCI6MC4wMDEsImhpZ2hsaWdodHMiOjAuMDAxLCJzdW1tYXJ5IjowLjAwMX19LCJzZWFyY2hUaW1lIjo4Nzg0Ljg1MzIzMzAwMDI2NH0=
  recorded_at: Mon, 27 Oct 2025 18:39:47 GMT
recorded_with: VCR 6.3.1
