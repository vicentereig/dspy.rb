---
http_interactions:
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"input_context\": {\n      \"type\":
        \"string\",\n      \"description\": \"Serialized representation of all input
        fields\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"_type\":
        {\n            \"type\": \"string\",\n            \"const\": \"HistoryEntry\"\n          },\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action_input\":
        {\n            \"oneOf\": [\n              {\n                \"type\": \"object\",\n                \"properties\":
        {\n                  \"_type\": {\n                    \"type\": \"string\",\n                    \"const\":
        \"FinishInput\"\n                  },\n                  \"value\": {\n                    \"type\":
        \"string\"\n                  }\n                },\n                \"required\":
        [\n                  \"_type\",\n                  \"value\"\n                ],\n                \"description\":
        \"DSPy::FinishInput struct\"\n              },\n              {\n                \"type\":
        \"object\",\n                \"properties\": {\n                  \"_type\":
        {\n                    \"type\": \"string\",\n                    \"const\":
        \"ToolInput\"\n                  },\n                  \"parameters\": {\n                    \"type\":
        \"object\",\n                    \"propertyNames\": {\n                      \"type\":
        \"string\"\n                    },\n                    \"additionalProperties\":
        {\n                      \"type\": \"string\"\n                    },\n                    \"description\":
        \"A mapping where keys are strings and values are strings\"\n                  }\n                },\n                \"required\":
        [\n                  \"_type\",\n                  \"parameters\"\n                ],\n                \"description\":
        \"DSPy::ToolInput struct\"\n              },\n              {\n                \"type\":
        \"null\"\n              }\n            ],\n            \"description\": \"Union
        of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ]\n          }\n        },\n        \"required\":
        [\n          \"_type\",\n          \"step\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts and actions, including observations from tools.\"\n    },\n    \"available_tools\":
        {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"_type\": {\n            \"type\": \"string\",\n            \"const\":
        \"AvailableTool\"\n          },\n          \"name\": {\n            \"type\":
        \"string\"\n          },\n          \"description\": {\n            \"type\":
        \"string\"\n          },\n          \"schema\": {\n            \"type\": \"object\",\n            \"propertyNames\":
        {\n              \"type\": \"string\"\n            },\n            \"additionalProperties\":
        {\n              \"type\": \"string\"\n            },\n            \"description\":
        \"A mapping where keys are strings and values are strings\"\n          }\n        },\n        \"required\":
        [\n          \"_type\",\n          \"name\",\n          \"description\",\n          \"schema\"\n        ],\n        \"description\":
        \"DSPy::ReAct::AvailableTool struct\"\n      },\n      \"description\": \"Array
        of available tools with their JSON schemas.\"\n    }\n  },\n  \"required\":
        [\n    \"input_context\",\n    \"history\",\n    \"available_tools\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"thought\": {\n      \"type\": \"string\",\n      \"description\":
        \"Reasoning about what to do next, considering the history and observations.\"\n    },\n    \"action\":
        {\n      \"type\": \"string\",\n      \"enum\": [\n        \"get_todays_date\",\n        \"add_numbers\",\n        \"calculator\",\n        \"get_random_number\",\n        \"finish\"\n      ],\n      \"description\":
        \"The action to take. MUST be one of the tool names listed in `available_tools`
        input, or the literal string \\\"finish\\\" to provide the final answer.\"\n    },\n    \"action_input\":
        {\n      \"oneOf\": [\n        {\n          \"type\": \"object\",\n          \"properties\":
        {\n            \"_type\": {\n              \"type\": \"string\",\n              \"const\":
        \"FinishInput\"\n            },\n            \"value\": {\n              \"type\":
        \"string\"\n            }\n          },\n          \"required\": [\n            \"_type\",\n            \"value\"\n          ],\n          \"description\":
        \"DSPy::FinishInput struct\"\n        },\n        {\n          \"type\": \"object\",\n          \"properties\":
        {\n            \"_type\": {\n              \"type\": \"string\",\n              \"const\":
        \"ToolInput\"\n            },\n            \"parameters\": {\n              \"type\":
        \"object\",\n              \"propertyNames\": {\n                \"type\":
        \"string\"\n              },\n              \"additionalProperties\": {\n                \"type\":
        \"string\"\n              },\n              \"description\": \"A mapping where
        keys are strings and values are strings\"\n            }\n          },\n          \"required\":
        [\n            \"_type\",\n            \"parameters\"\n          ],\n          \"description\":
        \"DSPy::ToolInput struct\"\n        }\n      ],\n      \"description\": \"Input
        for the chosen action. If action is a tool name, provide a ToolInput with
        parameters matching the tool''s schema. If action is \\\"finish\\\", provide
        a FinishInput with the final result value.\"\n    }\n  },\n  \"required\":
        [\n    \"thought\",\n    \"action\",\n    \"action_input\"\n  ]\n}\n```\n\nAll
        interactions will be structured in the following way, with the appropriate
        values filled in.\n## Input values\n```json\n{input_values}\n```\n## Output
        values\nRespond exclusively with the output schema fields in the json block
        below.\n```json\n{output_values}\n```\n\nIn adhering to this structure, your
        objective is: Generate a thought about what to do next to process the given
        inputs."},{"role":"user","content":"## Input Values\n```json\n{\n  \"input_context\":
        \"{\\\"_type\\\":\\\"AnonymousStruct\\\",\\\"question\\\":\\\"What is 42 plus
        58?\\\"}\",\n  \"history\": [],\n  \"available_tools\": [\n    {\n      \"name\":
        \"get_todays_date\",\n      \"description\": \"Returns the current date in
        a human-readable format\",\n      \"schema\": {\n        \"name\": \"get_todays_date\",\n        \"description\":
        \"Returns the current date in a human-readable format\",\n        \"parameters\":
        {\n          \"type\": \"object\",\n          \"properties\": {},\n          \"required\":
        []\n        }\n      }\n    },\n    {\n      \"name\": \"add_numbers\",\n      \"description\":
        \"Adds two numbers together\",\n      \"schema\": {\n        \"name\": \"add_numbers\",\n        \"description\":
        \"Adds two numbers together\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {\n            \"x\": {\n              \"type\":
        \"number\",\n              \"description\": \"Parameter x\"\n            },\n            \"y\":
        {\n              \"type\": \"number\",\n              \"description\": \"Parameter
        y\"\n            }\n          },\n          \"required\": [\n            \"x\",\n            \"y\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"calculator\",\n      \"description\": \"Performs basic arithmetic operations\",\n      \"schema\":
        {\n        \"name\": \"calculator\",\n        \"description\": \"Performs
        basic arithmetic operations\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {\n            \"operation\": {\n              \"type\":
        \"string\",\n              \"description\": \"Parameter operation\"\n            },\n            \"num1\":
        {\n              \"type\": \"number\",\n              \"description\": \"Parameter
        num1\"\n            },\n            \"num2\": {\n              \"type\": \"number\",\n              \"description\":
        \"Parameter num2\"\n            }\n          },\n          \"required\": [\n            \"operation\",\n            \"num1\",\n            \"num2\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"get_random_number\",\n      \"description\": \"Generates a random number
        within a specified range\",\n      \"schema\": {\n        \"name\": \"get_random_number\",\n        \"description\":
        \"Generates a random number within a specified range\",\n        \"parameters\":
        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"min\":
        {\n              \"type\": \"integer\",\n              \"description\": \"Parameter
        min (optional)\"\n            },\n            \"max\": {\n              \"type\":
        \"integer\",\n              \"description\": \"Parameter max (optional)\"\n            }\n          },\n          \"required\":
        []\n        }\n      }\n    }\n  ]\n}\n```\n\nRespond with the corresponding
        output schema fields wrapped in a ```json ``` block,\nstarting with the heading
        `## Output values`.\n\nIMPORTANT: You must respond with valid JSON that matches
        this structure:\n```json\n{\n  \"thought\": \"Reasoning about what to do next,
        considering the history and observations.\",\n  \"action\": \"The action to
        take. MUST be one of the tool names listed in `available_tools` input, or
        the literal string \\\"finish\\\" to provide the final answer.\",\n  \"action_input\":
        \"example value\"\n}\n```\n\nRequired fields: thought, action, action_input\n\nEnsure
        your response:\n1. Is valid JSON (properly quoted strings, no trailing commas)\n2.
        Includes all required fields\n3. Uses the correct data types for each field\n4.
        Is wrapped in ```json``` markdown code blocks\n"}],"temperature":1.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.22.1
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '10470'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 01 Oct 2025 18:13:33 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - "<OPENAI_ORGANIZATION>"
      Openai-Processing-Ms:
      - '4243'
      Openai-Project:
      - proj_n52OL5vlzVaXGnYDaGWmVX5F
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '4743'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9999'
      X-Ratelimit-Remaining-Tokens:
      - '197655'
      X-Ratelimit-Reset-Requests:
      - 8.64s
      X-Ratelimit-Reset-Tokens:
      - 703ms
      X-Request-Id:
      - "<REQUEST_ID>"
      X-Openai-Proxy-Wasm:
      - v0.1
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=<REDACTED>
      - _cfuvid=<REDACTED>
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 987def22abc9266b-EWR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-CLvcPqWGbVTAs0ajky6JFW8XaKV5n",
          "object": "chat.completion",
          "created": 1759342409,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"thought\": \"I need to calculate the sum of 42 and 58. The 'add_numbers' tool can directly add two numbers, which is what I need for this calculation.\",\n  \"action\": \"add_numbers\",\n  \"action_input\": {\n    \"_type\": \"ToolInput\",\n    \"parameters\": {\n      \"x\": 42,\n      \"y\": 58\n    }\n  }\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 1982,
            "completion_tokens": 94,
            "total_tokens": 2076,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_560af6e559"
        }
  recorded_at: Wed, 01 Oct 2025 18:13:33 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"input_context\": {\n      \"type\":
        \"string\",\n      \"description\": \"Serialized representation of all input
        fields\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"_type\":
        {\n            \"type\": \"string\",\n            \"const\": \"HistoryEntry\"\n          },\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action_input\":
        {\n            \"oneOf\": [\n              {\n                \"type\": \"object\",\n                \"properties\":
        {\n                  \"_type\": {\n                    \"type\": \"string\",\n                    \"const\":
        \"FinishInput\"\n                  },\n                  \"value\": {\n                    \"type\":
        \"string\"\n                  }\n                },\n                \"required\":
        [\n                  \"_type\",\n                  \"value\"\n                ],\n                \"description\":
        \"DSPy::FinishInput struct\"\n              },\n              {\n                \"type\":
        \"object\",\n                \"properties\": {\n                  \"_type\":
        {\n                    \"type\": \"string\",\n                    \"const\":
        \"ToolInput\"\n                  },\n                  \"parameters\": {\n                    \"type\":
        \"object\",\n                    \"propertyNames\": {\n                      \"type\":
        \"string\"\n                    },\n                    \"additionalProperties\":
        {\n                      \"type\": \"string\"\n                    },\n                    \"description\":
        \"A mapping where keys are strings and values are strings\"\n                  }\n                },\n                \"required\":
        [\n                  \"_type\",\n                  \"parameters\"\n                ],\n                \"description\":
        \"DSPy::ToolInput struct\"\n              },\n              {\n                \"type\":
        \"null\"\n              }\n            ],\n            \"description\": \"Union
        of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ]\n          }\n        },\n        \"required\":
        [\n          \"_type\",\n          \"step\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts, actions, and observations.\"\n    },\n    \"observation\": {\n      \"type\":
        \"string\",\n      \"description\": \"The result from the last action\"\n    }\n  },\n  \"required\":
        [\n    \"input_context\",\n    \"history\",\n    \"observation\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"interpretation\": {\n      \"type\":
        \"string\",\n      \"description\": \"Interpretation of the observation\"\n    },\n    \"next_step\":
        {\n      \"type\": \"string\",\n      \"enum\": [\n        \"continue\",\n        \"finish\"\n      ],\n      \"description\":
        \"What to do next: ''#<DSPy::NextStep::Continue>'' or ''#<DSPy::NextStep::Finish>''\"\n    }\n  },\n  \"required\":
        [\n    \"interpretation\",\n    \"next_step\"\n  ]\n}\n```\n\nAll interactions
        will be structured in the following way, with the appropriate values filled
        in.\n## Input values\n```json\n{input_values}\n```\n## Output values\nRespond
        exclusively with the output schema fields in the json block below.\n```json\n{output_values}\n```\n\nIn
        adhering to this structure, your objective is: Process the observation from
        a tool and decide what to do next."},{"role":"user","content":"## Input Values\n```json\n{\n  \"input_context\":
        \"{\\\"_type\\\":\\\"AnonymousStruct\\\",\\\"question\\\":\\\"What is 42 plus
        58?\\\"}\",\n  \"history\": [\n    {\n      \"step\": 1,\n      \"thought\":
        \"I need to calculate the sum of 42 and 58. The ''add_numbers'' tool can directly
        add two numbers, which is what I need for this calculation.\",\n      \"action\":
        \"add_numbers\",\n      \"action_input\": {\n        \"parameters\": {\n          \"x\":
        42,\n          \"y\": 58\n        }\n      },\n      \"observation\": \"100\"\n    }\n  ],\n  \"observation\":
        \"100\"\n}\n```\n\nRespond with the corresponding output schema fields wrapped
        in a ```json ``` block,\nstarting with the heading `## Output values`.\n\nIMPORTANT:
        You must respond with valid JSON that matches this structure:\n```json\n{\n  \"interpretation\":
        \"Interpretation of the observation\",\n  \"next_step\": \"What to do next:
        ''#<DSPy::NextStep::Continue>'' or ''#<DSPy::NextStep::Finish>''\"\n}\n```\n\nRequired
        fields: interpretation, next_step\n\nEnsure your response:\n1. Is valid JSON
        (properly quoted strings, no trailing commas)\n2. Includes all required fields\n3.
        Uses the correct data types for each field\n4. Is wrapped in ```json``` markdown
        code blocks\n"}],"temperature":1.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.22.1
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '5426'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 01 Oct 2025 18:13:35 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - "<OPENAI_ORGANIZATION>"
      Openai-Processing-Ms:
      - '1136'
      Openai-Project:
      - proj_n52OL5vlzVaXGnYDaGWmVX5F
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '1399'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9998'
      X-Ratelimit-Remaining-Tokens:
      - '198789'
      X-Ratelimit-Reset-Requests:
      - 12.204s
      X-Ratelimit-Reset-Tokens:
      - 363ms
      X-Request-Id:
      - "<REQUEST_ID>"
      X-Openai-Proxy-Wasm:
      - v0.1
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=<REDACTED>
      - _cfuvid=<REDACTED>
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 987def43cd37266b-EWR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-CLvcU40UtIu9CS3hsjDdfbwDbc8oV",
          "object": "chat.completion",
          "created": 1759342414,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"interpretation\": \"The sum of 42 and 58 has been successfully calculated to be 100.\",\n  \"next_step\": \"finish\"\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 1072,
            "completion_tokens": 41,
            "total_tokens": 1113,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_560af6e559"
        }
  recorded_at: Wed, 01 Oct 2025 18:13:35 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"input_context\": {\n      \"type\":
        \"string\",\n      \"description\": \"Serialized representation of all input
        fields\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"_type\":
        {\n            \"type\": \"string\",\n            \"const\": \"HistoryEntry\"\n          },\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action_input\":
        {\n            \"oneOf\": [\n              {\n                \"type\": \"object\",\n                \"properties\":
        {\n                  \"_type\": {\n                    \"type\": \"string\",\n                    \"const\":
        \"FinishInput\"\n                  },\n                  \"value\": {\n                    \"type\":
        \"string\"\n                  }\n                },\n                \"required\":
        [\n                  \"_type\",\n                  \"value\"\n                ],\n                \"description\":
        \"DSPy::FinishInput struct\"\n              },\n              {\n                \"type\":
        \"object\",\n                \"properties\": {\n                  \"_type\":
        {\n                    \"type\": \"string\",\n                    \"const\":
        \"ToolInput\"\n                  },\n                  \"parameters\": {\n                    \"type\":
        \"object\",\n                    \"propertyNames\": {\n                      \"type\":
        \"string\"\n                    },\n                    \"additionalProperties\":
        {\n                      \"type\": \"string\"\n                    },\n                    \"description\":
        \"A mapping where keys are strings and values are strings\"\n                  }\n                },\n                \"required\":
        [\n                  \"_type\",\n                  \"parameters\"\n                ],\n                \"description\":
        \"DSPy::ToolInput struct\"\n              },\n              {\n                \"type\":
        \"null\"\n              }\n            ],\n            \"description\": \"Union
        of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ]\n          }\n        },\n        \"required\":
        [\n          \"_type\",\n          \"step\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts and actions, including observations from tools.\"\n    },\n    \"available_tools\":
        {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"_type\": {\n            \"type\": \"string\",\n            \"const\":
        \"AvailableTool\"\n          },\n          \"name\": {\n            \"type\":
        \"string\"\n          },\n          \"description\": {\n            \"type\":
        \"string\"\n          },\n          \"schema\": {\n            \"type\": \"object\",\n            \"propertyNames\":
        {\n              \"type\": \"string\"\n            },\n            \"additionalProperties\":
        {\n              \"type\": \"string\"\n            },\n            \"description\":
        \"A mapping where keys are strings and values are strings\"\n          }\n        },\n        \"required\":
        [\n          \"_type\",\n          \"name\",\n          \"description\",\n          \"schema\"\n        ],\n        \"description\":
        \"DSPy::ReAct::AvailableTool struct\"\n      },\n      \"description\": \"Array
        of available tools with their JSON schemas.\"\n    }\n  },\n  \"required\":
        [\n    \"input_context\",\n    \"history\",\n    \"available_tools\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"thought\": {\n      \"type\": \"string\",\n      \"description\":
        \"Reasoning about what to do next, considering the history and observations.\"\n    },\n    \"action\":
        {\n      \"type\": \"string\",\n      \"enum\": [\n        \"get_todays_date\",\n        \"add_numbers\",\n        \"calculator\",\n        \"get_random_number\",\n        \"finish\"\n      ],\n      \"description\":
        \"The action to take. MUST be one of the tool names listed in `available_tools`
        input, or the literal string \\\"finish\\\" to provide the final answer.\"\n    },\n    \"action_input\":
        {\n      \"oneOf\": [\n        {\n          \"type\": \"object\",\n          \"properties\":
        {\n            \"_type\": {\n              \"type\": \"string\",\n              \"const\":
        \"FinishInput\"\n            },\n            \"value\": {\n              \"type\":
        \"string\"\n            }\n          },\n          \"required\": [\n            \"_type\",\n            \"value\"\n          ],\n          \"description\":
        \"DSPy::FinishInput struct\"\n        },\n        {\n          \"type\": \"object\",\n          \"properties\":
        {\n            \"_type\": {\n              \"type\": \"string\",\n              \"const\":
        \"ToolInput\"\n            },\n            \"parameters\": {\n              \"type\":
        \"object\",\n              \"propertyNames\": {\n                \"type\":
        \"string\"\n              },\n              \"additionalProperties\": {\n                \"type\":
        \"string\"\n              },\n              \"description\": \"A mapping where
        keys are strings and values are strings\"\n            }\n          },\n          \"required\":
        [\n            \"_type\",\n            \"parameters\"\n          ],\n          \"description\":
        \"DSPy::ToolInput struct\"\n        }\n      ],\n      \"description\": \"Input
        for the chosen action. If action is a tool name, provide a ToolInput with
        parameters matching the tool''s schema. If action is \\\"finish\\\", provide
        a FinishInput with the final result value.\"\n    }\n  },\n  \"required\":
        [\n    \"thought\",\n    \"action\",\n    \"action_input\"\n  ]\n}\n```\n\nAll
        interactions will be structured in the following way, with the appropriate
        values filled in.\n## Input values\n```json\n{input_values}\n```\n## Output
        values\nRespond exclusively with the output schema fields in the json block
        below.\n```json\n{output_values}\n```\n\nIn adhering to this structure, your
        objective is: Generate a thought about what to do next to process the given
        inputs."},{"role":"user","content":"## Input Values\n```json\n{\n  \"input_context\":
        \"{\\\"_type\\\":\\\"AnonymousStruct\\\",\\\"question\\\":\\\"What is 42 plus
        58?\\\"}\",\n  \"history\": [\n    {\n      \"step\": 1,\n      \"thought\":
        \"I need to calculate the sum of 42 and 58. The ''add_numbers'' tool can directly
        add two numbers, which is what I need for this calculation.\",\n      \"action\":
        \"add_numbers\",\n      \"action_input\": {\n        \"parameters\": {\n          \"x\":
        42,\n          \"y\": 58\n        }\n      },\n      \"observation\": \"100\"\n    }\n  ],\n  \"available_tools\":
        [\n    {\n      \"name\": \"get_todays_date\",\n      \"description\": \"Returns
        the current date in a human-readable format\",\n      \"schema\": {\n        \"name\":
        \"get_todays_date\",\n        \"description\": \"Returns the current date
        in a human-readable format\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {},\n          \"required\": []\n        }\n      }\n    },\n    {\n      \"name\":
        \"add_numbers\",\n      \"description\": \"Adds two numbers together\",\n      \"schema\":
        {\n        \"name\": \"add_numbers\",\n        \"description\": \"Adds two
        numbers together\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\":
        {\n            \"x\": {\n              \"type\": \"number\",\n              \"description\":
        \"Parameter x\"\n            },\n            \"y\": {\n              \"type\":
        \"number\",\n              \"description\": \"Parameter y\"\n            }\n          },\n          \"required\":
        [\n            \"x\",\n            \"y\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"calculator\",\n      \"description\": \"Performs basic arithmetic operations\",\n      \"schema\":
        {\n        \"name\": \"calculator\",\n        \"description\": \"Performs
        basic arithmetic operations\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {\n            \"operation\": {\n              \"type\":
        \"string\",\n              \"description\": \"Parameter operation\"\n            },\n            \"num1\":
        {\n              \"type\": \"number\",\n              \"description\": \"Parameter
        num1\"\n            },\n            \"num2\": {\n              \"type\": \"number\",\n              \"description\":
        \"Parameter num2\"\n            }\n          },\n          \"required\": [\n            \"operation\",\n            \"num1\",\n            \"num2\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"get_random_number\",\n      \"description\": \"Generates a random number
        within a specified range\",\n      \"schema\": {\n        \"name\": \"get_random_number\",\n        \"description\":
        \"Generates a random number within a specified range\",\n        \"parameters\":
        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"min\":
        {\n              \"type\": \"integer\",\n              \"description\": \"Parameter
        min (optional)\"\n            },\n            \"max\": {\n              \"type\":
        \"integer\",\n              \"description\": \"Parameter max (optional)\"\n            }\n          },\n          \"required\":
        []\n        }\n      }\n    }\n  ]\n}\n```\n\nRespond with the corresponding
        output schema fields wrapped in a ```json ``` block,\nstarting with the heading
        `## Output values`.\n\nIMPORTANT: You must respond with valid JSON that matches
        this structure:\n```json\n{\n  \"thought\": \"Reasoning about what to do next,
        considering the history and observations.\",\n  \"action\": \"The action to
        take. MUST be one of the tool names listed in `available_tools` input, or
        the literal string \\\"finish\\\" to provide the final answer.\",\n  \"action_input\":
        \"example value\"\n}\n```\n\nRequired fields: thought, action, action_input\n\nEnsure
        your response:\n1. Is valid JSON (properly quoted strings, no trailing commas)\n2.
        Includes all required fields\n3. Uses the correct data types for each field\n4.
        Is wrapped in ```json``` markdown code blocks\n"}],"temperature":1.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.22.1
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '10857'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 01 Oct 2025 18:13:37 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - "<OPENAI_ORGANIZATION>"
      Openai-Processing-Ms:
      - '1828'
      Openai-Project:
      - proj_n52OL5vlzVaXGnYDaGWmVX5F
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '1864'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9998'
      X-Ratelimit-Remaining-Tokens:
      - '197567'
      X-Ratelimit-Reset-Requests:
      - 10.859s
      X-Ratelimit-Reset-Tokens:
      - 729ms
      X-Request-Id:
      - "<REQUEST_ID>"
      X-Openai-Proxy-Wasm:
      - v0.1
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=<REDACTED>
      - _cfuvid=<REDACTED>
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 987def504e5d266b-EWR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-CLvcVNPwiOtMjJGRw0U8wHwb0tIhV",
          "object": "chat.completion",
          "created": 1759342415,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"thought\": \"Since I have already calculated the sum and received the observation that the result is 100, I should now finish the task by providing this final result.\",\n  \"action\": \"finish\",\n  \"action_input\": {\n    \"_type\": \"FinishInput\",\n    \"value\": \"100\"\n  }\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 2079,
            "completion_tokens": 75,
            "total_tokens": 2154,
            "prompt_tokens_details": {
              "cached_tokens": 1152,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_560af6e559"
        }
  recorded_at: Wed, 01 Oct 2025 18:13:37 GMT
recorded_with: VCR 6.3.1
