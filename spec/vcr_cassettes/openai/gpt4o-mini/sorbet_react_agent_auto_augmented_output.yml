---
http_interactions:
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"developer","content":"      Your
        input schema fields are:\n        ```json\n         {\"$schema\":\"http://json-schema.org/draft-06/schema#\",\"type\":\"object\",\"properties\":{\"question\":{\"type\":\"string\",\"description\":\"The
        question to answer\"},\"history\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"step\":{\"type\":\"integer\"},\"thought\":{\"type\":\"string\"},\"action\":{\"type\":\"string\"},\"action_input\":{\"oneOf\":[{\"type\":\"string\"},{\"type\":\"number\"},{\"type\":\"object\",\"propertyNames\":{\"type\":\"string\"},\"additionalProperties\":{\"type\":\"string\"},\"description\":\"A
        mapping where keys are strings and values are strings\"},{\"type\":\"array\",\"items\":{\"type\":\"string\"}}],\"description\":\"Union
        of multiple types\"},\"observation\":{\"type\":\"string\"}},\"required\":[\"step\"],\"description\":\"DSPy::HistoryEntry
        struct\"},\"description\":\"Previous thoughts and actions, including observations
        from tools. The agent MUST use information from the history to inform its
        actions and final answer. Each entry is a hash representing a step in the
        reasoning process.\"},\"available_tools\":{\"type\":\"string\",\"description\":\"List
        of available tools and their JSON schemas. The agent MUST choose an action
        from this list or use \\\"finish\\\". For each tool, use the name exactly
        as specified and provide action_input as a JSON object matching the tool''s
        schema.\"}},\"required\":[\"question\",\"history\",\"available_tools\"]}\n        ```\n      Your
        output schema fields are:\n        ```json\n          {\"$schema\":\"http://json-schema.org/draft-06/schema#\",\"type\":\"object\",\"properties\":{\"thought\":{\"type\":\"string\",\"description\":\"Reasoning
        about what to do next, considering the history and observations.\"},\"action\":{\"type\":\"string\",\"description\":\"The
        action to take. MUST be one of the tool names listed in `available_tools`
        input, or the literal string \\\"finish\\\" to provide the final answer.\"},\"action_input\":{\"oneOf\":[{\"type\":\"string\"},{\"type\":\"object\",\"propertyNames\":{\"type\":\"string\"},\"additionalProperties\":{\"type\":\"string\"},\"description\":\"A
        mapping where keys are strings and values are strings\"}],\"description\":\"Input
        for the chosen action. If action is a tool name, this MUST be a JSON object
        matching the tool''s schema. If action is \\\"finish\\\", this field MUST
        contain the final answer to the original question. This answer MUST be directly
        taken from the relevant Observation in the history if available. For example,
        if an observation showed \\\"Observation: 100.0\\\", and you are finishing,
        this field MUST be \\\"100.0\\\". Do not leave empty if finishing with an
        observed answer.\"}},\"required\":[\"thought\",\"action\",\"action_input\"]}\n        ````\n      \n      For
        example, based on the schemas above, a valid interaction would be:\n      ##
        Input values\n        ```json\n          {\"question\":\"example\",\"history\":\"example\",\"available_tools\":\"example\"}\n        ```\n      ##
        Output values\n        ```json\n          {\"thought\":\"example\",\"action\":\"example\",\"action_input\":\"example\"}\n        ```\n      \n      All
        interactions will be structured in the following way, with the appropriate
        values filled in.\n\n      ## Input values\n        ```json\n         {input_values}\n        ```  \n      ##
        Output values\n      Respond exclusively with the output schema fields in
        the json block below.\n        ```json\n          {output_values}\n        ```\n      \n      In
        adhering to this structure, your objective is: Generate a thought about what
        to do next to answer the question.\n\n"},{"role":"user","content":"        ##
        Input Values\n        ```json\n        {\"question\":\"What is 42 plus 58?\",\"history\":[],\"available_tools\":\"-
        get_todays_date: {\\n  \\\"name\\\": \\\"get_todays_date\\\",\\n  \\\"description\\\":
        \\\"Returns the current date in a human-readable format\\\",\\n  \\\"parameters\\\":
        {\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"properties\\\": {},\\n    \\\"required\\\":
        []\\n  }\\n}\\n- add_numbers: {\\n  \\\"name\\\": \\\"add_numbers\\\",\\n  \\\"description\\\":
        \\\"Adds two numbers together\\\",\\n  \\\"parameters\\\": {\\n    \\\"type\\\":
        \\\"object\\\",\\n    \\\"properties\\\": {\\n      \\\"x\\\": {\\n        \\\"type\\\":
        \\\"number\\\",\\n        \\\"description\\\": \\\"Parameter x\\\"\\n      },\\n      \\\"y\\\":
        {\\n        \\\"type\\\": \\\"number\\\",\\n        \\\"description\\\": \\\"Parameter
        y\\\"\\n      }\\n    },\\n    \\\"required\\\": [\\n      \\\"x\\\",\\n      \\\"y\\\"\\n    ]\\n  }\\n}\\n-
        calculator: {\\n  \\\"name\\\": \\\"calculator\\\",\\n  \\\"description\\\":
        \\\"Performs basic arithmetic operations\\\",\\n  \\\"parameters\\\": {\\n    \\\"type\\\":
        \\\"object\\\",\\n    \\\"properties\\\": {\\n      \\\"operation\\\": {\\n        \\\"type\\\":
        \\\"string\\\",\\n        \\\"description\\\": \\\"Parameter operation\\\"\\n      },\\n      \\\"num1\\\":
        {\\n        \\\"type\\\": \\\"number\\\",\\n        \\\"description\\\": \\\"Parameter
        num1\\\"\\n      },\\n      \\\"num2\\\": {\\n        \\\"type\\\": \\\"number\\\",\\n        \\\"description\\\":
        \\\"Parameter num2\\\"\\n      }\\n    },\\n    \\\"required\\\": [\\n      \\\"operation\\\",\\n      \\\"num1\\\",\\n      \\\"num2\\\"\\n    ]\\n  }\\n}\\n-
        get_random_number: {\\n  \\\"name\\\": \\\"get_random_number\\\",\\n  \\\"description\\\":
        \\\"Generates a random number within a specified range\\\",\\n  \\\"parameters\\\":
        {\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"properties\\\": {\\n      \\\"min\\\":
        {\\n        \\\"type\\\": \\\"integer\\\",\\n        \\\"description\\\":
        \\\"Parameter min (optional)\\\"\\n      },\\n      \\\"max\\\": {\\n        \\\"type\\\":
        \\\"integer\\\",\\n        \\\"description\\\": \\\"Parameter max (optional)\\\"\\n      }\\n    },\\n    \\\"required\\\":
        []\\n  }\\n}\"}\n        ```     \n        \n        Respond with the corresponding
        output schema fields wrapped in a ```json ``` block, \n         starting with
        the heading `## Output values`.\n"}],"temperature":0.7,"stream":false}'
    headers:
      User-Agent:
      - Faraday v2.12.2
      Authorization:
      - Bearer <OPENAI_API_KEY>
      Content-Type:
      - application/json
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sat, 21 Jun 2025 00:11:02 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - user-ftp1nrq85er9xnlu0la8snte
      Openai-Processing-Ms:
      - '1406'
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '1410'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9999'
      X-Ratelimit-Remaining-Tokens:
      - '198642'
      X-Ratelimit-Reset-Requests:
      - 8.64s
      X-Ratelimit-Reset-Tokens:
      - 407ms
      X-Request-Id:
      - req_90dcebda8f18e4534f4860ef6538855f
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=pej9P1cmRLPVqommkuN9s0il6xddIewY7usredYMJXE-1750464662-1.0.1.1-VDObgBWGRIiHmaQYtKthaebW2nV7D4ULEKd2R7.33CxXlMYi7efvGU8d86CANwPqDFm5Nr08CsR9pV1T6ef31W7spChrL6if7QltUV1SMf4;
        path=/; expires=Sat, 21-Jun-25 00:41:02 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=6R2zG8SKmvQdeebzL8k7LZ5spBnlIFqLpu4sn8ckp8c-1750464662848-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 952f4944ab235676-EZE
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-Bkg6vtPaguOvzRNgtWCKYTCzZDJ3k",
          "object": "chat.completion",
          "created": 1750464661,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"thought\": \"To answer the question about what 42 plus 58 is, I can use one of the tools available for addition. The 'add_numbers' tool specifically allows me to add two numbers together, which is exactly what I need to do.\",\n  \"action\": \"add_numbers\",\n  \"action_input\": {\n    \"x\": 42,\n    \"y\": 58\n  }\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 1268,
            "completion_tokens": 93,
            "total_tokens": 1361,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_34a54ae93c"
        }
  recorded_at: Sat, 21 Jun 2025 00:11:02 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"developer","content":"      Your
        input schema fields are:\n        ```json\n         {\"$schema\":\"http://json-schema.org/draft-06/schema#\",\"type\":\"object\",\"properties\":{\"question\":{\"type\":\"string\",\"description\":\"The
        original question\"},\"history\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"step\":{\"type\":\"integer\"},\"thought\":{\"type\":\"string\"},\"action\":{\"type\":\"string\"},\"action_input\":{\"oneOf\":[{\"type\":\"string\"},{\"type\":\"number\"},{\"type\":\"object\",\"propertyNames\":{\"type\":\"string\"},\"additionalProperties\":{\"type\":\"string\"},\"description\":\"A
        mapping where keys are strings and values are strings\"},{\"type\":\"array\",\"items\":{\"type\":\"string\"}}],\"description\":\"Union
        of multiple types\"},\"observation\":{\"type\":\"string\"}},\"required\":[\"step\"],\"description\":\"DSPy::HistoryEntry
        struct\"},\"description\":\"Previous thoughts, actions, and observations.
        Each entry is a hash representing a step in the reasoning process.\"},\"observation\":{\"type\":\"string\",\"description\":\"The
        result from the last action\"}},\"required\":[\"question\",\"history\",\"observation\"]}\n        ```\n      Your
        output schema fields are:\n        ```json\n          {\"$schema\":\"http://json-schema.org/draft-06/schema#\",\"type\":\"object\",\"properties\":{\"interpretation\":{\"type\":\"string\",\"description\":\"Interpretation
        of the observation\"},\"next_step\":{\"type\":\"string\",\"enum\":[\"continue\",\"finish\"],\"description\":\"What
        to do next: ''#<DSPy::NextStep::Continue>'' or ''#<DSPy::NextStep::Finish>''\"}},\"required\":[\"interpretation\",\"next_step\"]}\n        ````\n      \n      For
        example, based on the schemas above, a valid interaction would be:\n      ##
        Input values\n        ```json\n          {\"question\":\"example\",\"history\":\"example\",\"observation\":\"example\"}\n        ```\n      ##
        Output values\n        ```json\n          {\"interpretation\":\"example\",\"next_step\":\"example\"}\n        ```\n      \n      All
        interactions will be structured in the following way, with the appropriate
        values filled in.\n\n      ## Input values\n        ```json\n         {input_values}\n        ```  \n      ##
        Output values\n      Respond exclusively with the output schema fields in
        the json block below.\n        ```json\n          {output_values}\n        ```\n      \n      In
        adhering to this structure, your objective is: Process the observation from
        a tool and decide what to do next.\n\n"},{"role":"user","content":"        ##
        Input Values\n        ```json\n        {\"question\":\"What is 42 plus 58?\",\"history\":[\"#<DSPy::HistoryEntry:0x000000012b794790>\"],\"observation\":\"100.0\"}\n        ```     \n        \n        Respond
        with the corresponding output schema fields wrapped in a ```json ``` block,
        \n         starting with the heading `## Output values`.\n"}],"temperature":0.7,"stream":false}'
    headers:
      User-Agent:
      - Faraday v2.12.2
      Authorization:
      - Bearer <OPENAI_API_KEY>
      Content-Type:
      - application/json
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sat, 21 Jun 2025 00:11:04 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - user-ftp1nrq85er9xnlu0la8snte
      Openai-Processing-Ms:
      - '1331'
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '1334'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9998'
      X-Ratelimit-Remaining-Tokens:
      - '199345'
      X-Ratelimit-Reset-Requests:
      - 15.62s
      X-Ratelimit-Reset-Tokens:
      - 196ms
      X-Request-Id:
      - req_1cc45a2f64a4c80f0b815fcf3fb3373b
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=_OhdtOZ781gR.l1q3H68HxkCBZSkaxgqwMe48cDo7oQ-1750464664-1.0.1.1-bg21EId8czcxi1T5GO4mEXVJpTMgpoyKaKR3RLMC1wKMcm.S5rS5Dk7ubjL8qdMXIhu5BbnHRtSw1VqyNCKziV.hUqrOfWJr2IXm2.mBcW8;
        path=/; expires=Sat, 21-Jun-25 00:41:04 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=6O91z4h7LeDgwE6DwUyyiGS89Lqh.8dEBsOeCVGRv.g-1750464664501-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 952f494f48387842-EZE
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-Bkg6xKun28OrGHt2UkYvQfo1dmVms",
          "object": "chat.completion",
          "created": 1750464663,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"interpretation\": \"The observation indicates that the sum of 42 and 58 is correctly calculated as 100.\",\n  \"next_step\": \"finish\"\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 578,
            "completion_tokens": 43,
            "total_tokens": 621,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_34a54ae93c"
        }
  recorded_at: Sat, 21 Jun 2025 00:11:04 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"developer","content":"      Your
        input schema fields are:\n        ```json\n         {\"$schema\":\"http://json-schema.org/draft-06/schema#\",\"type\":\"object\",\"properties\":{\"question\":{\"type\":\"string\",\"description\":\"The
        question to answer\"},\"history\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"step\":{\"type\":\"integer\"},\"thought\":{\"type\":\"string\"},\"action\":{\"type\":\"string\"},\"action_input\":{\"oneOf\":[{\"type\":\"string\"},{\"type\":\"number\"},{\"type\":\"object\",\"propertyNames\":{\"type\":\"string\"},\"additionalProperties\":{\"type\":\"string\"},\"description\":\"A
        mapping where keys are strings and values are strings\"},{\"type\":\"array\",\"items\":{\"type\":\"string\"}}],\"description\":\"Union
        of multiple types\"},\"observation\":{\"type\":\"string\"}},\"required\":[\"step\"],\"description\":\"DSPy::HistoryEntry
        struct\"},\"description\":\"Previous thoughts and actions, including observations
        from tools. The agent MUST use information from the history to inform its
        actions and final answer. Each entry is a hash representing a step in the
        reasoning process.\"},\"available_tools\":{\"type\":\"string\",\"description\":\"List
        of available tools and their JSON schemas. The agent MUST choose an action
        from this list or use \\\"finish\\\". For each tool, use the name exactly
        as specified and provide action_input as a JSON object matching the tool''s
        schema.\"}},\"required\":[\"question\",\"history\",\"available_tools\"]}\n        ```\n      Your
        output schema fields are:\n        ```json\n          {\"$schema\":\"http://json-schema.org/draft-06/schema#\",\"type\":\"object\",\"properties\":{\"thought\":{\"type\":\"string\",\"description\":\"Reasoning
        about what to do next, considering the history and observations.\"},\"action\":{\"type\":\"string\",\"description\":\"The
        action to take. MUST be one of the tool names listed in `available_tools`
        input, or the literal string \\\"finish\\\" to provide the final answer.\"},\"action_input\":{\"oneOf\":[{\"type\":\"string\"},{\"type\":\"object\",\"propertyNames\":{\"type\":\"string\"},\"additionalProperties\":{\"type\":\"string\"},\"description\":\"A
        mapping where keys are strings and values are strings\"}],\"description\":\"Input
        for the chosen action. If action is a tool name, this MUST be a JSON object
        matching the tool''s schema. If action is \\\"finish\\\", this field MUST
        contain the final answer to the original question. This answer MUST be directly
        taken from the relevant Observation in the history if available. For example,
        if an observation showed \\\"Observation: 100.0\\\", and you are finishing,
        this field MUST be \\\"100.0\\\". Do not leave empty if finishing with an
        observed answer.\"}},\"required\":[\"thought\",\"action\",\"action_input\"]}\n        ````\n      \n      For
        example, based on the schemas above, a valid interaction would be:\n      ##
        Input values\n        ```json\n          {\"question\":\"example\",\"history\":\"example\",\"available_tools\":\"example\"}\n        ```\n      ##
        Output values\n        ```json\n          {\"thought\":\"example\",\"action\":\"example\",\"action_input\":\"example\"}\n        ```\n      \n      All
        interactions will be structured in the following way, with the appropriate
        values filled in.\n\n      ## Input values\n        ```json\n         {input_values}\n        ```  \n      ##
        Output values\n      Respond exclusively with the output schema fields in
        the json block below.\n        ```json\n          {output_values}\n        ```\n      \n      In
        adhering to this structure, your objective is: Generate a thought about what
        to do next to answer the question.\n\n"},{"role":"user","content":"        ##
        Input Values\n        ```json\n        {\"question\":\"What is 42 plus 58?\",\"history\":[\"#<DSPy::HistoryEntry:0x000000012b794790>\"],\"available_tools\":\"-
        get_todays_date: {\\n  \\\"name\\\": \\\"get_todays_date\\\",\\n  \\\"description\\\":
        \\\"Returns the current date in a human-readable format\\\",\\n  \\\"parameters\\\":
        {\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"properties\\\": {},\\n    \\\"required\\\":
        []\\n  }\\n}\\n- add_numbers: {\\n  \\\"name\\\": \\\"add_numbers\\\",\\n  \\\"description\\\":
        \\\"Adds two numbers together\\\",\\n  \\\"parameters\\\": {\\n    \\\"type\\\":
        \\\"object\\\",\\n    \\\"properties\\\": {\\n      \\\"x\\\": {\\n        \\\"type\\\":
        \\\"number\\\",\\n        \\\"description\\\": \\\"Parameter x\\\"\\n      },\\n      \\\"y\\\":
        {\\n        \\\"type\\\": \\\"number\\\",\\n        \\\"description\\\": \\\"Parameter
        y\\\"\\n      }\\n    },\\n    \\\"required\\\": [\\n      \\\"x\\\",\\n      \\\"y\\\"\\n    ]\\n  }\\n}\\n-
        calculator: {\\n  \\\"name\\\": \\\"calculator\\\",\\n  \\\"description\\\":
        \\\"Performs basic arithmetic operations\\\",\\n  \\\"parameters\\\": {\\n    \\\"type\\\":
        \\\"object\\\",\\n    \\\"properties\\\": {\\n      \\\"operation\\\": {\\n        \\\"type\\\":
        \\\"string\\\",\\n        \\\"description\\\": \\\"Parameter operation\\\"\\n      },\\n      \\\"num1\\\":
        {\\n        \\\"type\\\": \\\"number\\\",\\n        \\\"description\\\": \\\"Parameter
        num1\\\"\\n      },\\n      \\\"num2\\\": {\\n        \\\"type\\\": \\\"number\\\",\\n        \\\"description\\\":
        \\\"Parameter num2\\\"\\n      }\\n    },\\n    \\\"required\\\": [\\n      \\\"operation\\\",\\n      \\\"num1\\\",\\n      \\\"num2\\\"\\n    ]\\n  }\\n}\\n-
        get_random_number: {\\n  \\\"name\\\": \\\"get_random_number\\\",\\n  \\\"description\\\":
        \\\"Generates a random number within a specified range\\\",\\n  \\\"parameters\\\":
        {\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"properties\\\": {\\n      \\\"min\\\":
        {\\n        \\\"type\\\": \\\"integer\\\",\\n        \\\"description\\\":
        \\\"Parameter min (optional)\\\"\\n      },\\n      \\\"max\\\": {\\n        \\\"type\\\":
        \\\"integer\\\",\\n        \\\"description\\\": \\\"Parameter max (optional)\\\"\\n      }\\n    },\\n    \\\"required\\\":
        []\\n  }\\n}\"}\n        ```     \n        \n        Respond with the corresponding
        output schema fields wrapped in a ```json ``` block, \n         starting with
        the heading `## Output values`.\n"}],"temperature":0.7,"stream":false}'
    headers:
      User-Agent:
      - Faraday v2.12.2
      Authorization:
      - Bearer <OPENAI_API_KEY>
      Content-Type:
      - application/json
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sat, 21 Jun 2025 00:11:06 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - user-ftp1nrq85er9xnlu0la8snte
      Openai-Processing-Ms:
      - '1963'
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '1968'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9997'
      X-Ratelimit-Remaining-Tokens:
      - '198631'
      X-Ratelimit-Reset-Requests:
      - 22.607s
      X-Ratelimit-Reset-Tokens:
      - 410ms
      X-Request-Id:
      - req_4c9f9388655d9315d689dc53b0a4dd86
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=7yDXEtvIPVWvi5HDqiNVhlR7lKeHOMhX9hp1hfSOc_c-1750464666-1.0.1.1-0ZqTVmeSvtfe1RBIMHuaBJAN9fTPNjv2qxKOdrb0yr8Klm2wEAgs89Nk4z4Au_XqPNQOkqdeS2vphzYQq2uvZMpWXGGXcWNGfmAl4Fd3vMI;
        path=/; expires=Sat, 21-Jun-25 00:41:06 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=tcNb6xRU.W8CaYPtNHl7Lrr9XRFUIS3KlJFitijGU_Q-1750464666817-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 952f49594f2f1e88-EZE
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-Bkg6yDeN3zsdZQF4lrkR8PUrIBIuY",
          "object": "chat.completion",
          "created": 1750464664,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"thought\": \"To answer the question 'What is 42 plus 58?', I can use one of the available tools that performs addition. The 'add_numbers' tool is specifically designed for this purpose and requires two numerical inputs.\",\n  \"action\": \"add_numbers\",\n  \"action_input\": {\n    \"x\": 42,\n    \"y\": 58\n  }\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 1286,
            "completion_tokens": 88,
            "total_tokens": 1374,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_34a54ae93c"
        }
  recorded_at: Sat, 21 Jun 2025 00:11:06 GMT
recorded_with: VCR 6.3.1
