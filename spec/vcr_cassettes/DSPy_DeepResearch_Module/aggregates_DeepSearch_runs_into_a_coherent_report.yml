---
http_interactions:
- request:
    method: post
    uri: https://api.exa.ai/search
    body:
      encoding: UTF-8
      string: '{"numResults":5,"useAutoprompt":true,"summary":true,"query":"Jina DeepSearch
        DeepResearch overview"}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - api.exa.ai
      X-Stainless-Lang:
      - ruby
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.4.5
      X-Api-Key:
      - "<EXA_API_KEY>"
      Content-Type:
      - application/json
      Content-Length:
      - '100'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 27 Oct 2025 22:56:24 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Nel:
      - '{"report_to":"cf-nel","success_fraction":0.0,"max_age":604800}'
      Content-Security-Policy:
      - frame-ancestors 'self'
      Cross-Origin-Opener-Policy:
      - same-origin
      Cross-Origin-Resource-Policy:
      - same-origin
      Origin-Agent-Cluster:
      - "?1"
      Referrer-Policy:
      - no-referrer
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
      X-Content-Type-Options:
      - nosniff
      X-Dns-Prefetch-Control:
      - 'off'
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - DENY
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Xss-Protection:
      - '0'
      Vary:
      - Origin
      Access-Control-Allow-Credentials:
      - 'true'
      X-Ratelimit-Limit:
      - '9007199254740991'
      X-Ratelimit-Remaining:
      - '9007199254740990'
      X-Ratelimit-Reset:
      - '1761605785'
      Etag:
      - W/"5e9-xB+Tz0LmVU0CuRSOM8bqNblwr7Q"
      Report-To:
      - '{"group":"cf-nel","max_age":604800,"endpoints":[{"url":"https://a.nel.cloudflare.com/report/v4?s=UXsZcw5iWtiKAykdF28%2BU6NrfePJ8d4kBLhPhj8omgtKr3ApWwmRa4IfaZDTymMQ4w7YL3FI%2FWuRIRSkSfIPiEbtstHyDY8%3D"}]}'
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 9955c94f9de6ec91-MAD
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        eyJyZXF1ZXN0SWQiOiJjZTY0YWZiNmNjM2ZkYzdjMjhhMWI4NTVmZTAxNjIzNSIsImF1dG9wcm9tcHRTdHJpbmciOiJKaW5hIERlZXBTZWFyY2ggRGVlcFJlc2VhcmNoIG92ZXJ2aWV3IiwicmVzb2x2ZWRTZWFyY2hUeXBlIjoibmV1cmFsIiwicmVzdWx0cyI6W3siaWQiOiJodHRwczovL2ppbmEuYWkvZGVlcHNlYXJjaC8iLCJ0aXRsZSI6IkRlZXBTZWFyY2ggLSBKaW5hIEFJIiwidXJsIjoiaHR0cHM6Ly9qaW5hLmFpL2RlZXBzZWFyY2gvIiwicHVibGlzaGVkRGF0ZSI6IjIwMjUtMDMtMTNUMDA6MDA6MDAuMDAwWiIsImF1dGhvciI6bnVsbH0seyJpZCI6Imh0dHBzOi8vamluYS5haS9uZXdzL2EtcHJhY3RpY2FsLWd1aWRlLXRvLWltcGxlbWVudGluZy1kZWVwc2VhcmNoLWRlZXByZXNlYXJjaC8iLCJ0aXRsZSI6IkEgUHJhY3RpY2FsIEd1aWRlIHRvIEltcGxlbWVudGluZyBEZWVwU2VhcmNoL0RlZXBSZXNlYXJjaCIsInVybCI6Imh0dHBzOi8vamluYS5haS9uZXdzL2EtcHJhY3RpY2FsLWd1aWRlLXRvLWltcGxlbWVudGluZy1kZWVwc2VhcmNoLWRlZXByZXNlYXJjaC8iLCJhdXRob3IiOm51bGx9LHsiaWQiOiJodHRwczovL2F3cy5hbWF6b24uY29tL21hcmtldHBsYWNlL3BwL3Byb2R2aWV3LWY3aG9rZ3hwZmNtejQiLCJ0aXRsZSI6IkppbmEgRGVlcFNlYXJjaCAtIEFXUyBNYXJrZXRwbGFjZSIsInVybCI6Imh0dHBzOi8vYXdzLmFtYXpvbi5jb20vbWFya2V0cGxhY2UvcHAvcHJvZHZpZXctZjdob2tneHBmY216NCIsImF1dGhvciI6bnVsbH0seyJpZCI6Imh0dHBzOi8vbWVkaXVtLmNvbS9Ac2FoaW4uc2FtaWEvaG93LWRlZXBzZWFyY2gtYW5kLWRlZXByZXNlYXJjaC13aXRoLWxsbXMtYXJlLXJlZGVmaW5pbmctdGhlLXdheS13ZS1maW5kLWluZm9ybWF0aW9uLWVjZTAxOWEzZmFjYiIsInRpdGxlIjoiSG93IERlZXBTZWFyY2ggYW5kIERlZXBSZXNlYXJjaCB3aXRoIExMTXMgQXJlIFJlZGVmaW5pbmcgdGhlIC4uLiIsInVybCI6Imh0dHBzOi8vbWVkaXVtLmNvbS9Ac2FoaW4uc2FtaWEvaG93LWRlZXBzZWFyY2gtYW5kLWRlZXByZXNlYXJjaC13aXRoLWxsbXMtYXJlLXJlZGVmaW5pbmctdGhlLXdheS13ZS1maW5kLWluZm9ybWF0aW9uLWVjZTAxOWEzZmFjYiIsInB1Ymxpc2hlZERhdGUiOiIyMDI1LTAyLTI1VDAwOjAwOjAwLjAwMFoiLCJhdXRob3IiOm51bGx9LHsiaWQiOiJodHRwczovL2FpLXJvY2tzdGFycy5jb20vamluYS1haS1kZWVlcHNlYXJjaCIsInRpdGxlIjoiRGVlcFNlYXJjaCBieSBKaW5hLmFpOiBUaGUgYnJlYWt0aHJvdWdoIGluIEFJIHNlYXJjaCBmb3IgY29tcGxleCBxdWVyaWVzISIsInVybCI6Imh0dHBzOi8vYWktcm9ja3N0YXJzLmNvbS9qaW5hLWFpLWRlZWVwc2VhcmNoIiwicHVibGlzaGVkRGF0ZSI6IjIwMjUtMDItMTlUMDA6MDA6MDAuMDAwWiIsImF1dGhvciI6IkZsb3JpYW4gU2NocsO2ZGVyIn1dLCJzZWFyY2hUaW1lIjo4NTQuOCwiY29zdERvbGxhcnMiOnsidG90YWwiOjAuMDA1LCJzZWFyY2giOnsibmV1cmFsIjowLjAwNX19fQ==
  recorded_at: Mon, 27 Oct 2025 22:56:24 GMT
- request:
    method: post
    uri: https://collector.newrelic.com/agent_listener/invoke_raw_method?license_key=<NEW_RELIC_LICENSE_KEY>&marshal_format=json&method=log_event_data&protocol_version=17&run_id=BUhKk-LkXdWVADvrtB84K3po__j4AAEBAAAnIQEAAA8HAgQfPOcaAwAGOS4yMS4wAAtzaW1iYS5sb2NhbAAHRFNQeS5yYg
    body:
      encoding: UTF-8
      string: '[{"common":{"attributes":{"entity.name":"DSPy.rb","hostname":"simba.local","entity.guid":"MzkyNjk2NHxBUE18QVBQTElDQVRJT058NTI0MDg1MDE4"}},"logs":[{"level":"INFO","timestamp":1761605782823.2378,"message":"trace_id=\"cb3791f1-0c18-4f47-8346-1ef6f70950d4\"
        identifier=\"sec-overview\" title=\"Overview\" prompt=\"Jina DeepSearch DeepResearch
        overview\" token_budget=4000 module_path=[{id: \"8a57f1f4-7325-4e22-a494-c53e0d71d488\",
        class: \"DSPy::DeepResearch::Module\", label: nil}] module_root={id: \"8a57f1f4-7325-4e22-a494-c53e0d71d488\",
        class: \"DSPy::DeepResearch::Module\", label: nil} module_leaf={id: \"8a57f1f4-7325-4e22-a494-c53e0d71d488\",
        class: \"DSPy::DeepResearch::Module\", label: nil} module_scope={ancestry_token:
        \"8a57f1f4-7325-4e22-a494-c53e0d71d488\", depth: 1} event=\"deep_research.section.enqueued\"\n"},{"level":"INFO","timestamp":1761605782823.355,"message":"trace_id=\"cb3791f1-0c18-4f47-8346-1ef6f70950d4\"
        identifier=\"sec-architecture\" title=\"Architecture\" prompt=\"Jina DeepSearch
        DeepResearch architecture\" token_budget=4000 module_path=[{id: \"8a57f1f4-7325-4e22-a494-c53e0d71d488\",
        class: \"DSPy::DeepResearch::Module\", label: nil}] module_root={id: \"8a57f1f4-7325-4e22-a494-c53e0d71d488\",
        class: \"DSPy::DeepResearch::Module\", label: nil} module_leaf={id: \"8a57f1f4-7325-4e22-a494-c53e0d71d488\",
        class: \"DSPy::DeepResearch::Module\", label: nil} module_scope={ancestry_token:
        \"8a57f1f4-7325-4e22-a494-c53e0d71d488\", depth: 1} event=\"deep_research.section.enqueued\"\n"}]}]'
    headers:
      Content-Encoding:
      - identity
      Host:
      - collector.newrelic.com
      Nr-Utilizationmetadata:
      - AQICFgALc2ltYmEubG9jYWwXAAtzaW1iYS5sb2NhbA
      Nr-Utilizationextra:
      - AQARAAUAAAAIAABgAA
      Nr-Session:
      - BUhKk-LkXdWVADvrtB84K3po__j4AAEBAAAnIQEAAA8HAgQfPOcaAwAGOS4yMS4wAAtzaW1iYS5sb2NhbAAHRFNQeS5yYg
      Nr-Agenttags:
      - AX2uHIkGAAlhY2NvdW50SWQABzM5MjY5NjQAEHRydXN0ZWRBY2NvdW50SWQABzM5MjY5NjQAB2FjY291bnQAD0FjY291bnQgMzkyNjk2NA
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - NewRelic-RubyAgent/9.21.0 (ruby 3.4.5 arm64-darwin23) zlib/1.2.12
      Content-Type:
      - application/octet-stream
  response:
    status:
      code: 202
      message: ''
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Type:
      - application/json; charset=UTF-8
      X-Envoy-Upstream-Service-Time:
      - '1'
      Date:
      - Mon, 27 Oct 2025 22:56:27 GMT
      Server:
      - envoy
      Nr-Rate-Limited:
      - allowed
      X-Served-By:
      - cache-toj-leto2350044-TOJ
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Mon, 27 Oct 2025 22:56:27 GMT
- request:
    method: post
    uri: https://api.exa.ai/contents
    body:
      encoding: UTF-8
      string: '{"urls":["https://jina.ai/deepsearch/"],"text":true,"highlights":true,"summary":true,"filterEmptyResults":true}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - api.exa.ai
      X-Stainless-Lang:
      - ruby
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.4.5
      X-Api-Key:
      - "<EXA_API_KEY>"
      Content-Type:
      - application/json
      Content-Length:
      - '111'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 27 Oct 2025 22:56:29 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Nel:
      - '{"report_to":"cf-nel","success_fraction":0.0,"max_age":604800}'
      Content-Security-Policy:
      - frame-ancestors 'self'
      Cross-Origin-Opener-Policy:
      - same-origin
      Cross-Origin-Resource-Policy:
      - same-origin
      Origin-Agent-Cluster:
      - "?1"
      Referrer-Policy:
      - no-referrer
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
      X-Content-Type-Options:
      - nosniff
      X-Dns-Prefetch-Control:
      - 'off'
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - DENY
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Xss-Protection:
      - '0'
      Vary:
      - Origin
      Access-Control-Allow-Credentials:
      - 'true'
      X-Ratelimit-Limit:
      - '50'
      X-Ratelimit-Remaining:
      - '49'
      X-Ratelimit-Reset:
      - '1761605786'
      Ratelimit-Policy:
      - 2000;w=1
      Ratelimit-Limit:
      - '2000'
      Ratelimit-Remaining:
      - '1985'
      Ratelimit-Reset:
      - '1'
      Etag:
      - W/"58bf-lLz4YjFwO6N7RQuHMwG3QXFUxrg"
      Report-To:
      - '{"group":"cf-nel","max_age":604800,"endpoints":[{"url":"https://a.nel.cloudflare.com/report/v4?s=xoYH78FTfmaliqO2r92zCn6NkBkbtsZ6DkPHQ0O2ZYXiXzpOrCTONAB13UUs19cQsxMKPcd2os5ChkwdFczS5Phoft5FDMU%3D"}]}'
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 9955c95648d7ec91-MAD
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 27 Oct 2025 22:56:29 GMT
- request:
    method: post
    uri: https://api.exa.ai/contents
    body:
      encoding: UTF-8
      string: '{"urls":["https://jina.ai/news/a-practical-guide-to-implementing-deepsearch-deepresearch/"],"text":true,"highlights":true,"summary":true,"filterEmptyResults":true}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - api.exa.ai
      X-Stainless-Lang:
      - ruby
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.4.5
      X-Api-Key:
      - "<EXA_API_KEY>"
      Content-Type:
      - application/json
      Content-Length:
      - '163'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 27 Oct 2025 22:56:33 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Content-Security-Policy:
      - frame-ancestors 'self'
      Cross-Origin-Opener-Policy:
      - same-origin
      Cross-Origin-Resource-Policy:
      - same-origin
      Origin-Agent-Cluster:
      - "?1"
      Referrer-Policy:
      - no-referrer
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
      X-Content-Type-Options:
      - nosniff
      X-Dns-Prefetch-Control:
      - 'off'
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - DENY
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Xss-Protection:
      - '0'
      Vary:
      - Origin
      Access-Control-Allow-Credentials:
      - 'true'
      X-Ratelimit-Limit:
      - '50'
      X-Ratelimit-Remaining:
      - '49'
      X-Ratelimit-Reset:
      - '1761605792'
      Ratelimit-Policy:
      - 2000;w=1
      Ratelimit-Limit:
      - '2000'
      Ratelimit-Remaining:
      - '1998'
      Ratelimit-Reset:
      - '1'
      Etag:
      - W/"9e80-iGGBmqVrGp3xUw6SYK/A94JbFpY"
      Cf-Cache-Status:
      - DYNAMIC
      Nel:
      - '{"report_to":"cf-nel","success_fraction":0.0,"max_age":604800}'
      Report-To:
      - '{"group":"cf-nel","max_age":604800,"endpoints":[{"url":"https://a.nel.cloudflare.com/report/v4?s=le%2F7QUvdbpgdDzHv8DxXpoWB2JzJ0bSfATFvHnfzsQlkEs%2B1JQ3fqmlCKvkWz8G%2BxYESPj2zEqY5acwp2TN6zXkHZ2yStB0%3D"}]}'
      Server:
      - cloudflare
      Cf-Ray:
      - 9955c97a3f58ec91-MAD
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 27 Oct 2025 22:56:33 GMT
- request:
    method: post
    uri: https://api.exa.ai/contents
    body:
      encoding: UTF-8
      string: '{"urls":["https://aws.amazon.com/marketplace/pp/prodview-f7hokgxpfcmz4"],"text":true,"highlights":true,"summary":true,"filterEmptyResults":true}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - api.exa.ai
      X-Stainless-Lang:
      - ruby
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.4.5
      X-Api-Key:
      - "<EXA_API_KEY>"
      Content-Type:
      - application/json
      Content-Length:
      - '144'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 27 Oct 2025 22:56:38 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Nel:
      - '{"report_to":"cf-nel","success_fraction":0.0,"max_age":604800}'
      Content-Security-Policy:
      - frame-ancestors 'self'
      Cross-Origin-Opener-Policy:
      - same-origin
      Cross-Origin-Resource-Policy:
      - same-origin
      Origin-Agent-Cluster:
      - "?1"
      Referrer-Policy:
      - no-referrer
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
      X-Content-Type-Options:
      - nosniff
      X-Dns-Prefetch-Control:
      - 'off'
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - DENY
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Xss-Protection:
      - '0'
      Vary:
      - Origin
      Access-Control-Allow-Credentials:
      - 'true'
      X-Ratelimit-Limit:
      - '50'
      X-Ratelimit-Remaining:
      - '49'
      X-Ratelimit-Reset:
      - '1761605796'
      Ratelimit-Policy:
      - 2000;w=1
      Ratelimit-Limit:
      - '2000'
      Ratelimit-Remaining:
      - '1983'
      Ratelimit-Reset:
      - '1'
      Etag:
      - W/"101b-DL7QOzYeblqdntvjCUfQC4yUBO4"
      Report-To:
      - '{"group":"cf-nel","max_age":604800,"endpoints":[{"url":"https://a.nel.cloudflare.com/report/v4?s=ByAPXolgp3YBk%2FMQ1c76cNGgI3TJalJsNoBd8zCyFTAuidnsNBVhaVuN5L9uI4ugx5FCYbNi7BzuOXzGl21sLbi2B2QCzJ8%3D"}]}'
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 9955c9949b60ec91-MAD
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        eyJyZXF1ZXN0SWQiOiIzZDE0YzhhMDkzNGRkYTg4NGIwNmJkY2EyMmQwMDVmNSIsInJlc3VsdHMiOlt7ImlkIjoiaHR0cHM6Ly9hd3MuYW1hem9uLmNvbS9tYXJrZXRwbGFjZS9wcC9wcm9kdmlldy1mN2hva2d4cGZjbXo0IiwidGl0bGUiOiJBV1MgTWFya2V0cGxhY2U6IEppbmEgRGVlcFNlYXJjaCIsInVybCI6Imh0dHBzOi8vYXdzLmFtYXpvbi5jb20vbWFya2V0cGxhY2UvcHAvcHJvZHZpZXctZjdob2tneHBmY216NCIsInB1Ymxpc2hlZERhdGUiOiIyMDI1LTA0LTE0VDAwOjAwOjAwLjAwMFoiLCJhdXRob3IiOiIiLCJ0ZXh0IjoiIyMgT3ZlcnZpZXdcblxuRGVlcFNlYXJjaCBjb21iaW5lcyB3ZWIgc2VhcmNoaW5nLCByZWFkaW5nLCBhbmQgcmVhc29uaW5nIHRvIGRlbGl2ZXIgY29tcHJlaGVuc2l2ZSByZXNlYXJjaCByZXN1bHRzLiBUaGluayBvZiBpdCBhcyBhbiBhZ2VudCB0aGF0IHlvdSBhc3NpZ24gYSByZXNlYXJjaCB0YXNrIHRv4oCUaXQgc2VhcmNoZXMgZXh0ZW5zaXZlbHkgYWNyb3NzIHNvdXJjZXMgYW5kIGl0ZXJhdGVzIHRocm91Z2ggbXVsdGlwbGUgc3RlcHMgYmVmb3JlIHByb3ZpZGluZyBhIHRob3VnaHRmdWwgYW5zd2VyLlxuXG5BdCBpdHMgY29yZSwgRGVlcFNlYXJjaCBsZXZlcmFnZXMgdGhlIFtBV1MgSmluYSBSZWFkZXIgU2VydmljZV0oaHR0cHM6Ly9hd3MuYW1hem9uLmNvbS9tYXJrZXRwbGFjZS9wcC9wcm9kdmlldy1vbW9vbGFvYm50NTN1P3NyPTAtMyZyZWZfPWJlYWdsZSZhcHBsaWNhdGlvbklkPUFXU01QQ29udGVzc2EpIGFsb25nIHdpdGggc2V2ZXJhbCBvdGhlciBjb21wb25lbnRzIHRvIHBvd2VyIGl0cyBzZWFyY2hpbmcgYW5kIGNvbnRlbnQgdW5kZXJzdGFuZGluZyBjYXBhYmlsaXRpZXMuXG5cbi0gSXRlcmF0aXZlIFNlYXJjaC1SZWFkLVJlYXNvbiBMb29wOiBEZWVwU2VhcmNoIGNvbnRpbnVvdXNseSByZWZpbmVzIGFuc3dlcnMgdGhyb3VnaCBtdWx0aS10dXJuIHNlYXJjaCBhbmQgcmVhc29uaW5nLCBkZWxpdmVyaW5nIGhpZ2hlciBhY2N1cmFjeSB0aGFuIHNpbmdsZS1wYXNzIFJBRyBzeXN0ZW1zLlxuLSBPcGVuQUktQ29tcGF0aWJsZSBBUEk6IFNlYW1sZXNzbHkgaW50ZWdyYXRlcyBpbnRvIGFueSBPcGVuQUktY29tcGF0aWJsZSBjbGllbnQgYnkgc2ltcGx5IHN3aXRjaGluZyB0aGUgYmFzZSBVUkwg4oCUIG5vIGFkZGl0aW9uYWwgY29kZSBjaGFuZ2VzIHJlcXVpcmVkLlxuXG4jIyBQcmljaW5nXG5cblByaWNpbmcgaXMgYmFzZWQgb24geW91ciBzcGVjaWZpYyByZXF1aXJlbWVudHMgYW5kIGVsaWdpYmlsaXR5LiBUbyBnZXQgYSBjdXN0b20gcXVvdGUgZm9yIHlvdXIgbmVlZHMsIHJlcXVlc3QgYSBwcml2YXRlIG9mZmVyLlxuXG4jIyBIb3cgY2FuIHdlIG1ha2UgdGhpcyBwYWdlIGJldHRlcj9cblxuV2UnZCBsaWtlIHRvIGhlYXIgeW91ciBmZWVkYmFjayBhbmQgaWRlYXMgb24gaG93IHRvIGltcHJvdmUgdGhpcyBwYWdlLlxuXG4jIyBMZWdhbFxuXG5WZW5kb3JzIGFyZSByZXNwb25zaWJsZSBmb3IgdGhlaXIgcHJvZHVjdCBkZXNjcmlwdGlvbnMgYW5kIG90aGVyIHByb2R1Y3QgY29udGVudC4gQVdTIGRvZXMgbm90IHdhcnJhbnQgdGhhdCB2ZW5kb3JzJyBwcm9kdWN0IGRlc2NyaXB0aW9ucyBvciBvdGhlciBwcm9kdWN0IGNvbnRlbnQgYXJlIGFjY3VyYXRlLCBjb21wbGV0ZSwgcmVsaWFibGUsIGN1cnJlbnQsIG9yIGVycm9yLWZyZWUuXG5cbiMjIFJlc291cmNlc1xuXG4jIyBTdXBwb3J0IiwiaGlnaGxpZ2h0cyI6WyIjIyBPdmVydmlld1xuXG5EZWVwU2VhcmNoIGNvbWJpbmVzIHdlYiBzZWFyY2hpbmcsIHJlYWRpbmcsIGFuZCByZWFzb25pbmcgdG8gZGVsaXZlciBjb21wcmVoZW5zaXZlIHJlc2VhcmNoIHJlc3VsdHMuIFRoaW5rIG9mIGl0IGFzIGFuIGFnZW50IHRoYXQgeW91IGFzc2lnbiBhIHJlc2VhcmNoIHRhc2sgdG/igJRpdCBzZWFyY2hlcyBleHRlbnNpdmVseSBhY3Jvc3Mgc291cmNlcyBhbmQgaXRlcmF0ZXMgdGhyb3VnaCBtdWx0aXBsZSBzdGVwcyBiZWZvcmUgcHJvdmlkaW5nIGEgdGhvdWdodGZ1bCBhbnN3ZXIuXG5cbkF0IGl0cyBjb3JlLCBEZWVwU2VhcmNoIGxldmVyYWdlcyB0aGUgW0FXUyBKaW5hIFJlYWRlciBTZXJ2aWNlXShodHRwczovL2F3cy5hbWF6b24uY29tL21hcmtldHBsYWNlL3BwL3Byb2R2aWV3LW9tb29sYW9ibnQ1M3U/c3I9MC0zJnJlZl89YmVhZ2xlJmFwcGxpY2F0aW9uSWQ9QVdTTVBDb250ZXNzYSkgYWxvbmcgd2l0aCBzZXZlcmFsIG90aGVyIGNvbXBvbmVudHMgdG8gcG93ZXIgaXRzIHNlYXJjaGluZyBhbmQgY29udGVudCB1bmRlcnN0YW5kaW5nIGNhcGFiaWxpdGllcy5cblxuLSBJdGVyYXRpdmUgU2VhcmNoLVJlYWQtUmVhc29uIExvb3A6IERlZXBTZWFyY2ggY29udGludW91c2x5IHJlZmluZXMgYW5zd2VycyB0aHJvdWdoIG11bHRpLXR1cm4gc2VhcmNoIGFuZCByZWFzb25pbmcsIGRlbGl2ZXJpbmcgaGlnaGVyIGFjY3VyYWN5IHRoYW4gc2luZ2xlLXBhc3MgUkFHIHN5c3RlbXMuXG4tIE9wZW5BSS1Db21wYXRpYmxlIEFQSTogU2VhbWxlc3NseSBpbnRlZ3JhdGVzIGludG8gYW55IE9wZW5BSS1jb21wYXRpYmxlIGNsaWVudCBieSBzaW1wbHkgc3dpdGNoaW5nIHRoZSBiYXNlIFVSTCDigJQgbm8gYWRkaXRpb25hbCBjb2RlIGNoYW5nZXMgcmVxdWlyZWQuXG5cbiMjIFByaWNpbmdcblxuUHJpY2luZyBpcyBiYXNlZCBvbiB5b3VyIHNwZWNpZmljIHJlcXVpcmVtZW50cyBhbmQgZWxpZ2liaWxpdHkuIFRvIGdldCBhIGN1c3RvbSBxdW90ZSBmb3IgeW91ciBuZWVkcywgcmVxdWVzdCBhIHByaXZhdGUgb2ZmZXIuXG5cbiMjIEhvdyBjYW4gd2UgbWFrZSB0aGlzIHBhZ2UgYmV0dGVyP1xuXG5XZSdkIGxpa2UgdG8gaGVhciB5b3VyIGZlZWRiYWNrIGFuZCBpZGVhcyBvbiBob3cgdG8gaW1wcm92ZSB0aGlzIHBhZ2UuXG5cbiMjIExlZ2FsXG5cblZlbmRvcnMgYXJlIHJlc3BvbnNpYmxlIGZvciB0aGVpciBwcm9kdWN0IGRlc2NyaXB0aW9ucyBhbmQgb3RoZXIgcHJvZHVjdCBjb250ZW50LiBBV1MgZG9lcyBub3Qgd2FycmFudCB0aGF0IHZlbmRvcnMnIHByb2R1Y3QgZGVzY3JpcHRpb25zIG9yIG90aGVyIHByb2R1Y3QgY29udGVudCBhcmUgYWNjdXJhdGUsIGNvbXBsZXRlLCByZWxpYWJsZSwgY3VycmVudCwgb3IgZXJyb3ItZnJlZS5cblxuIyMgUmVzb3VyY2VzXG5cbiMjIFN1cHBvcnQiXSwiaGlnaGxpZ2h0U2NvcmVzIjpbMV0sInN1bW1hcnkiOiJEZWVwU2VhcmNoIGlzIGFuIGFkdmFuY2VkIHJlc2VhcmNoIHRvb2wgYXZhaWxhYmxlIG9uIEFXUyBNYXJrZXRwbGFjZSB0aGF0IGNvbWJpbmVzIHdlYiBzZWFyY2hpbmcsIHJlYWRpbmcsIGFuZCByZWFzb25pbmcgdG8gcHJvdmlkZSBjb21wcmVoZW5zaXZlIHJlc2VhcmNoIHJlc3VsdHMuIEl0IG9wZXJhdGVzIHRocm91Z2ggYW4gaXRlcmF0aXZlIHNlYXJjaC1yZWFkLXJlYXNvbiBsb29wLCBlbmhhbmNpbmcgYWNjdXJhY3kgYnkgcmVmaW5pbmcgYW5zd2VycyB0aHJvdWdoIG11bHRpcGxlIHNlYXJjaCBhbmQgcmVhc29uaW5nIGN5Y2xlcy4gVGhlIHNlcnZpY2UgdXRpbGl6ZXMgdGhlIEFXUyBKaW5hIFJlYWRlciBTZXJ2aWNlIGFuZCBvZmZlcnMgYW4gT3BlbkFJLWNvbXBhdGlibGUgQVBJIGZvciBlYXN5IGludGVncmF0aW9uIGludG8gZXhpc3Rpbmcgc3lzdGVtcy4gUHJpY2luZyBpcyBjdXN0b21pemVkIGJhc2VkIG9uIHVzZXIgcmVxdWlyZW1lbnRzLCBhbmQgaW50ZXJlc3RlZCB1c2VycyBjYW4gcmVxdWVzdCBhIHByaXZhdGUgb2ZmZXIgZm9yIGEgcXVvdGUuIiwiZmF2aWNvbiI6Imh0dHBzOi8vcHJvZC11cy1lYXN0LTEuY2RuLmNocm9tZS5tYXJrZXRwbGFjZS5hd3MuZGV2L2Fzc2V0cy83MzFlNDQ0ZC1hYzRjLTQwM2UtODlmNS0xZWI3NGM0MmYzNjIvY2xpZW50L2Zhdmljb24uaWNvIn1dLCJzdGF0dXNlcyI6W3siaWQiOiJodHRwczovL2F3cy5hbWF6b24uY29tL21hcmtldHBsYWNlL3BwL3Byb2R2aWV3LWY3aG9rZ3hwZmNtejQiLCJzdGF0dXMiOiJzdWNjZXNzIiwic291cmNlIjoiY2FjaGVkIn1dLCJjb3N0RG9sbGFycyI6eyJ0b3RhbCI6MC4wMDMsImNvbnRlbnRzIjp7InRleHQiOjAuMDAxLCJoaWdobGlnaHRzIjowLjAwMSwic3VtbWFyeSI6MC4wMDF9fSwic2VhcmNoVGltZSI6Mzk4Ny41MDgwNTc5OTk4OTAzfQ==
  recorded_at: Mon, 27 Oct 2025 22:56:38 GMT
- request:
    method: post
    uri: https://api.exa.ai/contents
    body:
      encoding: UTF-8
      string: '{"urls":["https://medium.com/@sahin.samia/how-deepsearch-and-deepresearch-with-llms-are-redefining-the-way-we-find-information-ece019a3facb"],"text":true,"highlights":true,"summary":true,"filterEmptyResults":true}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - api.exa.ai
      X-Stainless-Lang:
      - ruby
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.4.5
      X-Api-Key:
      - "<EXA_API_KEY>"
      Content-Type:
      - application/json
      Content-Length:
      - '213'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 27 Oct 2025 22:56:41 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Nel:
      - '{"report_to":"cf-nel","success_fraction":0.0,"max_age":604800}'
      Content-Security-Policy:
      - frame-ancestors 'self'
      Cross-Origin-Opener-Policy:
      - same-origin
      Cross-Origin-Resource-Policy:
      - same-origin
      Origin-Agent-Cluster:
      - "?1"
      Referrer-Policy:
      - no-referrer
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
      X-Content-Type-Options:
      - nosniff
      X-Dns-Prefetch-Control:
      - 'off'
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - DENY
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Xss-Protection:
      - '0'
      Vary:
      - Origin
      Access-Control-Allow-Credentials:
      - 'true'
      X-Ratelimit-Limit:
      - '50'
      X-Ratelimit-Remaining:
      - '49'
      X-Ratelimit-Reset:
      - '1761605800'
      Ratelimit-Policy:
      - 2000;w=1
      Ratelimit-Limit:
      - '2000'
      Ratelimit-Remaining:
      - '1996'
      Ratelimit-Reset:
      - '1'
      Etag:
      - W/"1f38-JXiFn5nNFD9tJALWUY5uQPpEpLA"
      Report-To:
      - '{"group":"cf-nel","max_age":604800,"endpoints":[{"url":"https://a.nel.cloudflare.com/report/v4?s=dFlcnl4uzKieLD%2FkmH6%2B%2FCwmE0Nmg051ykeMKTelzqF89QoZcZ1BDL%2BR9liafqbB290PN9KJyUSUgE3JKMQKVCHeVcgQNus%3D"}]}'
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 9955c9aeca2aec91-MAD
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 27 Oct 2025 22:56:41 GMT
- request:
    method: post
    uri: https://api.exa.ai/contents
    body:
      encoding: UTF-8
      string: '{"urls":["https://ai-rockstars.com/jina-ai-deeepsearch"],"text":true,"highlights":true,"summary":true,"filterEmptyResults":true}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - api.exa.ai
      X-Stainless-Lang:
      - ruby
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.4.5
      X-Api-Key:
      - "<EXA_API_KEY>"
      Content-Type:
      - application/json
      Content-Length:
      - '128'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 27 Oct 2025 22:56:48 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Nel:
      - '{"report_to":"cf-nel","success_fraction":0.0,"max_age":604800}'
      Content-Security-Policy:
      - frame-ancestors 'self'
      Cross-Origin-Opener-Policy:
      - same-origin
      Cross-Origin-Resource-Policy:
      - same-origin
      Origin-Agent-Cluster:
      - "?1"
      Referrer-Policy:
      - no-referrer
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
      X-Content-Type-Options:
      - nosniff
      X-Dns-Prefetch-Control:
      - 'off'
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - DENY
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Xss-Protection:
      - '0'
      Vary:
      - Origin
      Access-Control-Allow-Credentials:
      - 'true'
      X-Ratelimit-Limit:
      - '50'
      X-Ratelimit-Remaining:
      - '49'
      X-Ratelimit-Reset:
      - '1761605803'
      Ratelimit-Policy:
      - 2000;w=1
      Ratelimit-Limit:
      - '2000'
      Ratelimit-Remaining:
      - '1989'
      Ratelimit-Reset:
      - '1'
      Etag:
      - W/"2196-VWfxz2K7WQzktFpsjBXrJUx68ig"
      Report-To:
      - '{"group":"cf-nel","max_age":604800,"endpoints":[{"url":"https://a.nel.cloudflare.com/report/v4?s=xYtW1VpqcxPpTXxe1R5cQLvxKb2NAgb4BbbrNB6USzejQZOsZZvzHZp%2FI0zXjAZIems1em7YdQi8znbMXYJ0%2FeRf0qBHeVE%3D"}]}'
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 9955c9c1f853ec91-MAD
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 27 Oct 2025 22:56:48 GMT
- request:
    method: post
    uri: https://api.exa.ai/search
    body:
      encoding: UTF-8
      string: '{"numResults":5,"useAutoprompt":true,"summary":true,"query":"Jina DeepSearch
        DeepResearch architecture"}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - api.exa.ai
      X-Stainless-Lang:
      - ruby
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.4.5
      X-Api-Key:
      - "<EXA_API_KEY>"
      Content-Type:
      - application/json
      Content-Length:
      - '104'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 27 Oct 2025 22:56:49 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Nel:
      - '{"report_to":"cf-nel","success_fraction":0.0,"max_age":604800}'
      Content-Security-Policy:
      - frame-ancestors 'self'
      Cross-Origin-Opener-Policy:
      - same-origin
      Cross-Origin-Resource-Policy:
      - same-origin
      Origin-Agent-Cluster:
      - "?1"
      Referrer-Policy:
      - no-referrer
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
      X-Content-Type-Options:
      - nosniff
      X-Dns-Prefetch-Control:
      - 'off'
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - DENY
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Xss-Protection:
      - '0'
      Vary:
      - Origin
      Access-Control-Allow-Credentials:
      - 'true'
      X-Ratelimit-Limit:
      - '9007199254740991'
      X-Ratelimit-Remaining:
      - '9007199254740990'
      X-Ratelimit-Reset:
      - '1761605810'
      Etag:
      - W/"5dc-mg6258LlcbvBn5SZChcOIlOGg40"
      Report-To:
      - '{"group":"cf-nel","max_age":604800,"endpoints":[{"url":"https://a.nel.cloudflare.com/report/v4?s=xKtR%2FHN2eBL3otNArf76QmiIkTHa%2Fy2P0BNaejXAiCfaRQ5ss9PJ6SukOl0alm8PQpUmiGZ1ludYWPRpC5j4m395%2FHOSHiU%3D"}]}'
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 9955c9eef943ec91-MAD
    body:
      encoding: ASCII-8BIT
      string: '{"requestId":"9cd95580769bbcf8791da926121ae23b","autopromptString":"Jina
        DeepSearch DeepResearch architecture","resolvedSearchType":"neural","results":[{"id":"https://jina.ai/news/a-practical-guide-to-implementing-deepsearch-deepresearch/","title":"A
        Practical Guide to Implementing DeepSearch/DeepResearch","url":"https://jina.ai/news/a-practical-guide-to-implementing-deepsearch-deepresearch/","author":null},{"id":"https://jina.ai/deepsearch/","title":"DeepSearch
        - Jina AI","url":"https://jina.ai/deepsearch/","publishedDate":"2025-03-13T00:00:00.000Z","author":null},{"id":"https://github.com/jina-ai/node-DeepResearch","title":"jina-ai/node-DeepResearch
        - GitHub","url":"https://github.com/jina-ai/node-DeepResearch","author":null},{"id":"https://huggingface.co/blog/exploding-gradients/deepresearch-survey","title":"In-Depth
        Analysis of the Latest Deep Research Technology","url":"https://huggingface.co/blog/exploding-gradients/deepresearch-survey","publishedDate":"2025-09-16T00:00:00.000Z","author":null},{"id":"https://medium.com/@sahin.samia/how-deepsearch-and-deepresearch-with-llms-are-redefining-the-way-we-find-information-ece019a3facb","title":"How
        DeepSearch and DeepResearch with LLMs Are Redefining the ...","url":"https://medium.com/@sahin.samia/how-deepsearch-and-deepresearch-with-llms-are-redefining-the-way-we-find-information-ece019a3facb","publishedDate":"2025-02-25T00:00:00.000Z","author":null}],"searchTime":655.2,"costDollars":{"total":0.005,"search":{"neural":0.005}}}'
  recorded_at: Mon, 27 Oct 2025 22:56:49 GMT
- request:
    method: post
    uri: https://collector.newrelic.com/agent_listener/invoke_raw_method?license_key=<NEW_RELIC_LICENSE_KEY>&marshal_format=json&method=log_event_data&protocol_version=17&run_id=BUhKk-LkXdWVADvrtB84K3po__j4AAEBAAAnIQEAAA8HAgQfPOcaAwAGOS4yMS4wAAtzaW1iYS5sb2NhbAAHRFNQeS5yYg
    body:
      encoding: UTF-8
      string: '[{"common":{"attributes":{"entity.name":"DSPy.rb","hostname":"simba.local","entity.guid":"MzkyNjk2NHxBUE18QVBQTElDQVRJT058NTI0MDg1MDE4"}},"logs":[{"level":"INFO","timestamp":1761605808448.087,"message":"trace_id=\"cb3791f1-0c18-4f47-8346-1ef6f70950d4\"
        identifier=\"sec-overview\" title=\"Overview\" attempt=0 citations=[\"https://jina.ai/deepsearch/\",
        \"https://jina.ai/news/a-practical-guide-to-implementing-deepsearch-deepresearch/\",
        \"https://aws.amazon.com/marketplace/pp/prodview-f7hokgxpfcmz4\", \"https://medium.com/@sahin.samia/how-deepsearch-and-deepresearch-with-llms-are-redefining-the-way-we-find-information-ece019a3facb\",
        \"https://ai-rockstars.com/jina-ai-deeepsearch\"] module_path=[{id: \"8a57f1f4-7325-4e22-a494-c53e0d71d488\",
        class: \"DSPy::DeepResearch::Module\", label: nil}] module_root={id: \"8a57f1f4-7325-4e22-a494-c53e0d71d488\",
        class: \"DSPy::DeepResearch::Module\", label: nil} module_leaf={id: \"8a57f1f4-7325-4e22-a494-c53e0d71d488\",
        class: \"DSPy::DeepResearch::Module\", label: nil} module_scope={ancestry_token:
        \"8a57f1f4-7325-4e22-a494-c53e0d71d488\", depth: 1} event=\"deep_research.section.approved\"\n"}]}]'
    headers:
      Content-Encoding:
      - identity
      Host:
      - collector.newrelic.com
      Nr-Utilizationmetadata:
      - AQICFgALc2ltYmEubG9jYWwXAAtzaW1iYS5sb2NhbA
      Nr-Utilizationextra:
      - AQARAAUAAAAIAABgAA
      Nr-Session:
      - BUhKk-LkXdWVADvrtB84K3po__j4AAEBAAAnIQEAAA8HAgQfPOcaAwAGOS4yMS4wAAtzaW1iYS5sb2NhbAAHRFNQeS5yYg
      Nr-Agenttags:
      - AX2uHIkGAAlhY2NvdW50SWQABzM5MjY5NjQAEHRydXN0ZWRBY2NvdW50SWQABzM5MjY5NjQAB2FjY291bnQAD0FjY291bnQgMzkyNjk2NA
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - NewRelic-RubyAgent/9.21.0 (ruby 3.4.5 arm64-darwin23) zlib/1.2.12
      Content-Type:
      - application/octet-stream
  response:
    status:
      code: 202
      message: ''
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Type:
      - application/json; charset=UTF-8
      X-Envoy-Upstream-Service-Time:
      - '1'
      Date:
      - Mon, 27 Oct 2025 22:56:52 GMT
      Server:
      - envoy
      Nr-Rate-Limited:
      - allowed
      X-Served-By:
      - cache-toj-leto2350044-TOJ
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Mon, 27 Oct 2025 22:56:52 GMT
- request:
    method: post
    uri: https://api.exa.ai/contents
    body:
      encoding: UTF-8
      string: '{"urls":["https://jina.ai/news/a-practical-guide-to-implementing-deepsearch-deepresearch/"],"text":true,"highlights":true,"summary":true,"filterEmptyResults":true}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - api.exa.ai
      X-Stainless-Lang:
      - ruby
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.4.5
      X-Api-Key:
      - "<EXA_API_KEY>"
      Content-Type:
      - application/json
      Content-Length:
      - '163'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 27 Oct 2025 22:56:53 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Nel:
      - '{"report_to":"cf-nel","success_fraction":0.0,"max_age":604800}'
      Content-Security-Policy:
      - frame-ancestors 'self'
      Cross-Origin-Opener-Policy:
      - same-origin
      Cross-Origin-Resource-Policy:
      - same-origin
      Origin-Agent-Cluster:
      - "?1"
      Referrer-Policy:
      - no-referrer
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
      X-Content-Type-Options:
      - nosniff
      X-Dns-Prefetch-Control:
      - 'off'
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - DENY
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Xss-Protection:
      - '0'
      Vary:
      - Origin
      Access-Control-Allow-Credentials:
      - 'true'
      X-Ratelimit-Limit:
      - '50'
      X-Ratelimit-Remaining:
      - '49'
      X-Ratelimit-Reset:
      - '1761605811'
      Ratelimit-Policy:
      - 2000;w=1
      Ratelimit-Limit:
      - '2000'
      Ratelimit-Remaining:
      - '1998'
      Ratelimit-Reset:
      - '1'
      Etag:
      - W/"9f25-AhSPDcwkLTJo86xGYXySia+JRJQ"
      Report-To:
      - '{"group":"cf-nel","max_age":604800,"endpoints":[{"url":"https://a.nel.cloudflare.com/report/v4?s=MUoHjiNPyqPSI5TEZKjlC6uq%2FknLwiUwBk9XfEXOFCEXPO309a4LzMqj4BQjFaOnmKqZdwbEdUEOzRPNk4OG9y%2FKXgVDqvw%3D"}]}'
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 9955c9f47981ec91-MAD
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 27 Oct 2025 22:56:53 GMT
- request:
    method: post
    uri: https://api.exa.ai/contents
    body:
      encoding: UTF-8
      string: '{"urls":["https://jina.ai/deepsearch/"],"text":true,"highlights":true,"summary":true,"filterEmptyResults":true}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - api.exa.ai
      X-Stainless-Lang:
      - ruby
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.4.5
      X-Api-Key:
      - "<EXA_API_KEY>"
      Content-Type:
      - application/json
      Content-Length:
      - '111'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 27 Oct 2025 22:56:59 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Nel:
      - '{"report_to":"cf-nel","success_fraction":0.0,"max_age":604800}'
      Content-Security-Policy:
      - frame-ancestors 'self'
      Cross-Origin-Opener-Policy:
      - same-origin
      Cross-Origin-Resource-Policy:
      - same-origin
      Origin-Agent-Cluster:
      - "?1"
      Referrer-Policy:
      - no-referrer
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
      X-Content-Type-Options:
      - nosniff
      X-Dns-Prefetch-Control:
      - 'off'
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - DENY
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Xss-Protection:
      - '0'
      Vary:
      - Origin
      Access-Control-Allow-Credentials:
      - 'true'
      X-Ratelimit-Limit:
      - '50'
      X-Ratelimit-Remaining:
      - '49'
      X-Ratelimit-Reset:
      - '1761605815'
      Ratelimit-Policy:
      - 2000;w=1
      Ratelimit-Limit:
      - '2000'
      Ratelimit-Remaining:
      - '1993'
      Ratelimit-Reset:
      - '1'
      Etag:
      - W/"58a9-Qw9X4DQJuj5e7qeVLqjsORfnQBo"
      Report-To:
      - '{"group":"cf-nel","max_age":604800,"endpoints":[{"url":"https://a.nel.cloudflare.com/report/v4?s=5WTIXNgsR6jsCLVSojlsRxyrREZoVF1Nnq8grb5E4xQ1W8IthwzPD53i4UCZ%2FUOnNNUl%2FweOULPj0XUKTJ0V1R6TAhr4jnw%3D"}]}'
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 9955ca0eeb39ec91-MAD
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 27 Oct 2025 22:56:59 GMT
- request:
    method: post
    uri: https://api.exa.ai/contents
    body:
      encoding: UTF-8
      string: '{"urls":["https://github.com/jina-ai/node-DeepResearch"],"text":true,"highlights":true,"summary":true,"filterEmptyResults":true}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - api.exa.ai
      X-Stainless-Lang:
      - ruby
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.4.5
      X-Api-Key:
      - "<EXA_API_KEY>"
      Content-Type:
      - application/json
      Content-Length:
      - '128'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 27 Oct 2025 22:57:02 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Nel:
      - '{"report_to":"cf-nel","success_fraction":0.0,"max_age":604800}'
      Content-Security-Policy:
      - frame-ancestors 'self'
      Cross-Origin-Opener-Policy:
      - same-origin
      Cross-Origin-Resource-Policy:
      - same-origin
      Origin-Agent-Cluster:
      - "?1"
      Referrer-Policy:
      - no-referrer
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
      X-Content-Type-Options:
      - nosniff
      X-Dns-Prefetch-Control:
      - 'off'
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - DENY
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Xss-Protection:
      - '0'
      Vary:
      - Origin
      Access-Control-Allow-Credentials:
      - 'true'
      X-Ratelimit-Limit:
      - '50'
      X-Ratelimit-Remaining:
      - '49'
      X-Ratelimit-Reset:
      - '1761605821'
      Ratelimit-Policy:
      - 2000;w=1
      Ratelimit-Limit:
      - '2000'
      Ratelimit-Remaining:
      - '1987'
      Ratelimit-Reset:
      - '1'
      Etag:
      - W/"5135-ne6dN9uEBJBKimTsbBjaR1jRtlE"
      Report-To:
      - '{"group":"cf-nel","max_age":604800,"endpoints":[{"url":"https://a.nel.cloudflare.com/report/v4?s=YcR6Uu5XznaGVpjdbVPfI5n4QmfB3oGlsPE5AXnTDTo%2FwtgrHRTPBYbO6ONREY2yRdICjwB2YtBA5ffK2Ah4jGrVlVhbwxU%3D"}]}'
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 9955ca314c7bec91-MAD
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 27 Oct 2025 22:57:02 GMT
- request:
    method: post
    uri: https://api.exa.ai/contents
    body:
      encoding: UTF-8
      string: '{"urls":["https://huggingface.co/blog/exploding-gradients/deepresearch-survey"],"text":true,"highlights":true,"summary":true,"filterEmptyResults":true}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - api.exa.ai
      X-Stainless-Lang:
      - ruby
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.4.5
      X-Api-Key:
      - "<EXA_API_KEY>"
      Content-Type:
      - application/json
      Content-Length:
      - '151'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 27 Oct 2025 22:57:06 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Nel:
      - '{"report_to":"cf-nel","success_fraction":0.0,"max_age":604800}'
      Content-Security-Policy:
      - frame-ancestors 'self'
      Cross-Origin-Opener-Policy:
      - same-origin
      Cross-Origin-Resource-Policy:
      - same-origin
      Origin-Agent-Cluster:
      - "?1"
      Referrer-Policy:
      - no-referrer
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
      X-Content-Type-Options:
      - nosniff
      X-Dns-Prefetch-Control:
      - 'off'
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - DENY
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Xss-Protection:
      - '0'
      Vary:
      - Origin
      Access-Control-Allow-Credentials:
      - 'true'
      X-Ratelimit-Limit:
      - '50'
      X-Ratelimit-Remaining:
      - '49'
      X-Ratelimit-Reset:
      - '1761605824'
      Ratelimit-Policy:
      - 2000;w=1
      Ratelimit-Limit:
      - '2000'
      Ratelimit-Remaining:
      - '1977'
      Ratelimit-Reset:
      - '1'
      Etag:
      - W/"e2e3-PwAmmABuDmOECKhLwgBqfhei+0k"
      Report-To:
      - '{"group":"cf-nel","max_age":604800,"endpoints":[{"url":"https://a.nel.cloudflare.com/report/v4?s=l7wohqahOtPbCDYska9s6RwqXOfw6jJ94J9a8BpmQJZGK7goH6RTPEvlyN3x4%2ByGwg5yQBfQ11qNHj%2BZzrZrQppccZnZjpQ%3D"}]}'
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 9955ca44eb51ec91-MAD
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 27 Oct 2025 22:57:06 GMT
- request:
    method: post
    uri: https://api.exa.ai/contents
    body:
      encoding: UTF-8
      string: '{"urls":["https://medium.com/@sahin.samia/how-deepsearch-and-deepresearch-with-llms-are-redefining-the-way-we-find-information-ece019a3facb"],"text":true,"highlights":true,"summary":true,"filterEmptyResults":true}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - api.exa.ai
      X-Stainless-Lang:
      - ruby
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.4.5
      X-Api-Key:
      - "<EXA_API_KEY>"
      Content-Type:
      - application/json
      Content-Length:
      - '213'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 27 Oct 2025 22:57:09 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Nel:
      - '{"report_to":"cf-nel","success_fraction":0.0,"max_age":604800}'
      Content-Security-Policy:
      - frame-ancestors 'self'
      Cross-Origin-Opener-Policy:
      - same-origin
      Cross-Origin-Resource-Policy:
      - same-origin
      Origin-Agent-Cluster:
      - "?1"
      Referrer-Policy:
      - no-referrer
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
      X-Content-Type-Options:
      - nosniff
      X-Dns-Prefetch-Control:
      - 'off'
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - DENY
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Xss-Protection:
      - '0'
      Vary:
      - Origin
      Access-Control-Allow-Credentials:
      - 'true'
      X-Ratelimit-Limit:
      - '50'
      X-Ratelimit-Remaining:
      - '49'
      X-Ratelimit-Reset:
      - '1761605829'
      Ratelimit-Policy:
      - 2000;w=1
      Ratelimit-Limit:
      - '2000'
      Ratelimit-Remaining:
      - '1979'
      Ratelimit-Reset:
      - '1'
      Etag:
      - W/"1f54-0eLOL6pq8TA7fwGmgLe/2eGXDco"
      Report-To:
      - '{"group":"cf-nel","max_age":604800,"endpoints":[{"url":"https://a.nel.cloudflare.com/report/v4?s=603W9j%2BI9zypSnVTst6Yzf2DVdIW%2B5tAIEr7bop1XmXVZ0%2B4QJhnd4wpOcNP5Hfzv2v8WgwdMz%2B5Buwn3ldtYYIC43%2BMano%3D"}]}'
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 9955ca62bb70ec91-MAD
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 27 Oct 2025 22:57:09 GMT
recorded_with: VCR 6.3.1
