---
http_interactions:
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"parameters":{"model":"gpt-4o-mini","messages":[{"role":"system","content":"      Your
        input schema fields are:\n        ```json\n         {\"$schema\":\"http://json-schema.org/draft-06/schema#\",\"type\":\"object\",\"properties\":{\"question\":{\"type\":\"string\",\"description\":\"A
        question to answer\"}},\"required\":[\"question\"]}\n        ```\n      Your
        output schema fields are:\n        ```json\n          {\"$schema\":\"http://json-schema.org/draft-06/schema#\",\"type\":\"object\",\"properties\":{\"answer\":{\"type\":\"string\",\"description\":\"A
        helpful answer to the question\"}},\"required\":[\"answer\"]}\n        ````\n      \n      All
        interactions will be structured in the following way, with the appropriate
        values filled in.\n\n      ## Input values\n        ```json\n         {input_values}\n        ```  \n      ##
        Output values\n      Respond exclusively with the output schema fields in
        the json block below.\n        ```json\n          {output_values}\n        ```\n      \n      In
        adhering to this structure, your objective is: Answer questions accurately
        and helpfully\n\n"},{"role":"user","content":"        ## Input Values\n        ```json\n        {\"question\":\"What
        is the capital of France?\"}\n        ```     \n        \n        Respond
        with the corresponding output schema fields wrapped in a ```json ``` block,
        \n         starting with the heading `## Output values`.\n"}],"temperature":0.0}}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.9.0
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer test-key
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '1437'
  response:
    status:
      code: 401
      message: Unauthorized
    headers:
      Date:
      - Wed, 25 Jun 2025 18:41:45 GMT
      Content-Type:
      - application/json; charset=utf-8
      Content-Length:
      - '258'
      Connection:
      - keep-alive
      Vary:
      - Origin
      X-Request-Id:
      - req_5ff8f435ec8a9973168a7fd33d85ff6c
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=.4Mm3nXdBTmkspJspP74o25ZJl3oDF.2GSpSOEiz4Hw-1750876905-1.0.1.1-6WXNYD3Z3rGlWJV.j4XYcFkPyfO6uXq362HC1WDKglsjfBE6yrrGmZ4FmRTTSq.BsxBvupxYIen4_iBrR.InGL5EZbTix48j6wlCYrwnwoo;
        path=/; expires=Wed, 25-Jun-25 19:11:45 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=Wp5UICUJJRc2XOCiBdZynVc3rPTErrmWwxcJtLJyvzg-1750876905466-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 955699d1ec54712d-OSL
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: UTF-8
      string: |
        {
            "error": {
                "message": "Incorrect API key provided: test-key. You can find your API key at https://platform.openai.com/account/api-keys.",
                "type": "invalid_request_error",
                "param": null,
                "code": "invalid_api_key"
            }
        }
  recorded_at: Wed, 25 Jun 2025 18:41:45 GMT
recorded_with: VCR 6.3.1
