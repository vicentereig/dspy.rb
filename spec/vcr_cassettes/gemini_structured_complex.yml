---
http_interactions:
- request:
    method: post
    uri: https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=<GEMINI_API_KEY>
    body:
      encoding: UTF-8
      string: '{"contents":[{"role":"user","parts":[{"text":"Your input schema fields
        are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"query\": {\n      \"type\": \"string\",\n      \"description\":
        \"User query\"\n    }\n  },\n  \"required\": [\n    \"query\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"items\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"_type\":
        {\n            \"type\": \"string\",\n            \"const\": \"GeminiStructuredItem\"\n          },\n          \"name\":
        {\n            \"type\": \"string\"\n          },\n          \"value\": {\n            \"type\":
        \"integer\"\n          },\n          \"tags\": {\n            \"type\": \"array\",\n            \"items\":
        {\n              \"type\": \"string\"\n            }\n          }\n        },\n        \"required\":
        [\n          \"_type\",\n          \"name\",\n          \"value\",\n          \"tags\"\n        ],\n        \"description\":
        \"GeminiStructuredItem struct\"\n      },\n      \"description\": \"List of
        items\"\n    },\n    \"metadata\": {\n      \"type\": \"object\",\n      \"properties\":
        {\n        \"_type\": {\n          \"type\": \"string\",\n          \"const\":
        \"GeminiStructuredMetadata\"\n        },\n        \"total_count\": {\n          \"type\":
        \"integer\"\n        },\n        \"processed_at\": {\n          \"type\":
        \"string\"\n        }\n      },\n      \"required\": [\n        \"_type\",\n        \"total_count\",\n        \"processed_at\"\n      ],\n      \"description\":
        \"Processing metadata\"\n    }\n  },\n  \"required\": [\n    \"items\",\n    \"metadata\"\n  ]\n}\n```\n\nAll
        interactions will be structured in the following way, with the appropriate
        values filled in.\n## Input values\n```json\n{input_values}\n```\n## Output
        values\nRespond exclusively with the output schema fields in the json block
        below.\n```json\n{output_values}\n```\n\nIn adhering to this structure, your
        objective is: Generate complex structured data"}]},{"role":"user","parts":[{"text":"##
        Input Values\n```json\n{\n  \"query\": \"List three popular programming languages
        with their usage\"\n}\n```\n\nRespond with the corresponding output schema
        fields wrapped in a ```json ``` block,\nstarting with the heading `## Output
        values`."}]}],"generation_config":{"response_mime_type":"application/json","response_json_schema":{"type":"object","properties":{"items":{"type":"array","items":{"type":"object","properties":{"_type":{"type":"string"},"name":{"type":"string"},"value":{"type":"integer"},"tags":{"type":"array","items":{"type":"string"}}},"required":["_type","name","value","tags"]}},"metadata":{"type":"object","properties":{"_type":{"type":"string"},"total_count":{"type":"integer"},"processed_at":{"type":"string"}},"required":["_type","total_count","processed_at"]}},"required":["items","metadata"]}}}'
    headers:
      User-Agent:
      - Faraday v2.13.4
      Content-Type:
      - application/json
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Content-Encoding:
      - gzip
      Date:
      - Tue, 23 Sep 2025 16:57:51 GMT
      Server:
      - scaffolding on HTTPServer2
      Content-Length:
      - '539'
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Server-Timing:
      - gfet4t7; dur=1300
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "candidates": [
            {
              "content": {
                "parts": [
                  {
                    "text": "{\"items\":[{\"_type\":\"GeminiStructuredItem\",\"name\":\"Python\",\"value\":40,\"tags\":[\"data science\",\"machine learning\",\"web development\"]},{\"_type\":\"GeminiStructuredItem\",\"name\":\"Java\",\"value\":35,\"tags\":[\"enterprise applications\",\"android development\",\"big data\"]},{\"_type\":\"GeminiStructuredItem\",\"name\":\"JavaScript\",\"value\":25,\"tags\":[\"web development\",\"front-end\",\"back-end\"]}],\"metadata\":{\"_type\":\"GeminiStructuredMetadata\",\"total_count\":3,\"processed_at\":\"2024-01-26T12:00:00Z\"}}"
                  }
                ],
                "role": "model"
              },
              "finishReason": "STOP",
              "avgLogprobs": -0.05459257713834146
            }
          ],
          "usageMetadata": {
            "promptTokenCount": 614,
            "candidatesTokenCount": 133,
            "totalTokenCount": 747,
            "promptTokensDetails": [
              {
                "modality": "TEXT",
                "tokenCount": 614
              }
            ],
            "candidatesTokensDetails": [
              {
                "modality": "TEXT",
                "tokenCount": 133
              }
            ]
          },
          "modelVersion": "gemini-1.5-flash",
          "responseId": "jtHSaNe6CZGBkdUP58L1yAI"
        }
  recorded_at: Tue, 23 Sep 2025 16:57:51 GMT
recorded_with: VCR 6.3.1
