---
http_interactions:
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"input_context\": {\n      \"type\":
        \"string\",\n      \"description\": \"Serialized representation of all input
        fields\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"_type\":
        {\n            \"type\": \"string\",\n            \"const\": \"HistoryEntry\"\n          },\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action_input\":
        {\n            \"oneOf\": [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              },\n              {\n                \"type\":
        \"null\"\n              }\n            ],\n            \"description\": \"Union
        of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        \"string\"\n          }\n        },\n        \"required\": [\n          \"_type\",\n          \"step\",\n          \"observation\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts and actions, including observations from tools.\"\n    },\n    \"available_tools\":
        {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"_type\": {\n            \"type\": \"string\",\n            \"const\":
        \"AvailableTool\"\n          },\n          \"name\": {\n            \"type\":
        \"string\"\n          },\n          \"description\": {\n            \"type\":
        \"string\"\n          },\n          \"schema\": {\n            \"type\": \"object\",\n            \"propertyNames\":
        {\n              \"type\": \"string\"\n            },\n            \"additionalProperties\":
        {\n              \"type\": \"string\"\n            },\n            \"description\":
        \"A mapping where keys are strings and values are strings\"\n          }\n        },\n        \"required\":
        [\n          \"_type\",\n          \"name\",\n          \"description\",\n          \"schema\"\n        ],\n        \"description\":
        \"DSPy::ReAct::AvailableTool struct\"\n      },\n      \"description\": \"Array
        of available tools with their JSON schemas.\"\n    }\n  },\n  \"required\":
        [\n    \"input_context\",\n    \"history\",\n    \"available_tools\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"thought\": {\n      \"type\": \"string\",\n      \"description\":
        \"Reasoning about what to do next, considering the history and observations.\"\n    },\n    \"action\":
        {\n      \"type\": \"string\",\n      \"enum\": [\n        \"memory_store\",\n        \"memory_retrieve\",\n        \"memory_search\",\n        \"memory_list\",\n        \"memory_update\",\n        \"memory_delete\",\n        \"memory_clear\",\n        \"memory_count\",\n        \"memory_get_metadata\",\n        \"finish\"\n      ],\n      \"description\":
        \"The action to take. MUST be one of the tool names listed in `available_tools`
        input, or the literal string \\\"finish\\\" to provide the final answer.\"\n    },\n    \"action_input\":
        {\n      \"type\": \"string\",\n      \"description\": \"Input for the chosen
        action. If action is a tool name, this MUST be a JSON object matching the
        tool''s schema. If action is \\\"finish\\\", this field MUST contain the final
        result based on processing the input data.\"\n    }\n  },\n  \"required\":
        [\n    \"thought\",\n    \"action\",\n    \"action_input\"\n  ]\n}\n```\n\nAll
        interactions will be structured in the following way, with the appropriate
        values filled in.\n## Input values\n```json\n{input_values}\n```\n## Output
        values\nRespond exclusively with the output schema fields in the json block
        below.\n```json\n{output_values}\n```\n\nIn adhering to this structure, your
        objective is: Generate a thought about what to do next to process the given
        inputs."},{"role":"user","content":"## Input Values\n```json\n{\n  \"input_context\":
        \"{\\\"_type\\\":\\\"AnonymousStruct\\\",\\\"question\\\":\\\"Remember that
        my birthday is in June.\\\"}\",\n  \"history\": [],\n  \"available_tools\":
        [\n    {\n      \"name\": \"memory_store\",\n      \"description\": \"Store
        a key-value pair in memory with optional tags\",\n      \"schema\": {\n        \"name\":
        \"memory_store\",\n        \"description\": \"Store a key-value pair in memory
        with optional tags\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\":
        {\n            \"key\": {\n              \"type\": \"string\",\n              \"description\":
        \"Parameter key\"\n            },\n            \"value\": {\n              \"type\":
        \"string\",\n              \"description\": \"Parameter value\"\n            },\n            \"tags\":
        {\n              \"type\": [\n                \"array\",\n                \"null\"\n              ],\n              \"items\":
        {\n                \"type\": \"string\"\n              },\n              \"description\":
        \"Parameter tags (optional)\"\n            }\n          },\n          \"required\":
        [\n            \"key\",\n            \"value\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_retrieve\",\n      \"description\": \"Retrieve a value by key from
        memory\",\n      \"schema\": {\n        \"name\": \"memory_retrieve\",\n        \"description\":
        \"Retrieve a value by key from memory\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {\n            \"key\": {\n              \"type\":
        \"string\",\n              \"description\": \"Parameter key\"\n            }\n          },\n          \"required\":
        [\n            \"key\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_search\",\n      \"description\": \"Search memories by pattern in
        keys and/or values\",\n      \"schema\": {\n        \"name\": \"memory_search\",\n        \"description\":
        \"Search memories by pattern in keys and/or values\",\n        \"parameters\":
        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"pattern\":
        {\n              \"type\": \"string\",\n              \"description\": \"Parameter
        pattern\"\n            },\n            \"in_keys\": {\n              \"type\":
        \"boolean\",\n              \"description\": \"Parameter in_keys (optional)\"\n            },\n            \"in_values\":
        {\n              \"type\": \"boolean\",\n              \"description\": \"Parameter
        in_values (optional)\"\n            }\n          },\n          \"required\":
        [\n            \"pattern\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_list\",\n      \"description\": \"List all stored memory keys\",\n      \"schema\":
        {\n        \"name\": \"memory_list\",\n        \"description\": \"List all
        stored memory keys\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\":
        {},\n          \"required\": []\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_update\",\n      \"description\": \"Update an existing memory value\",\n      \"schema\":
        {\n        \"name\": \"memory_update\",\n        \"description\": \"Update
        an existing memory value\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {\n            \"key\": {\n              \"type\":
        \"string\",\n              \"description\": \"Parameter key\"\n            },\n            \"value\":
        {\n              \"type\": \"string\",\n              \"description\": \"Parameter
        value\"\n            }\n          },\n          \"required\": [\n            \"key\",\n            \"value\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_delete\",\n      \"description\": \"Delete a memory by key\",\n      \"schema\":
        {\n        \"name\": \"memory_delete\",\n        \"description\": \"Delete
        a memory by key\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\":
        {\n            \"key\": {\n              \"type\": \"string\",\n              \"description\":
        \"Parameter key\"\n            }\n          },\n          \"required\": [\n            \"key\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_clear\",\n      \"description\": \"Clear all stored memories\",\n      \"schema\":
        {\n        \"name\": \"memory_clear\",\n        \"description\": \"Clear all
        stored memories\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\":
        {},\n          \"required\": []\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_count\",\n      \"description\": \"Get the count of stored memories\",\n      \"schema\":
        {\n        \"name\": \"memory_count\",\n        \"description\": \"Get the
        count of stored memories\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {},\n          \"required\": []\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_get_metadata\",\n      \"description\": \"Get metadata for a specific
        memory\",\n      \"schema\": {\n        \"name\": \"memory_get_metadata\",\n        \"description\":
        \"Get metadata for a specific memory\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {\n            \"key\": {\n              \"type\":
        \"string\",\n              \"description\": \"Parameter key\"\n            }\n          },\n          \"required\":
        [\n            \"key\"\n          ]\n        }\n      }\n    }\n  ]\n}\n```\n\nRespond
        with the corresponding output schema fields wrapped in a ```json ``` block,\nstarting
        with the heading `## Output values`."}],"temperature":1.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.22.1
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '10717'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 02 Oct 2025 20:21:49 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - "<OPENAI_ORGANIZATION>"
      Openai-Processing-Ms:
      - '1817'
      Openai-Project:
      - proj_n52OL5vlzVaXGnYDaGWmVX5F
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '2052'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9999'
      X-Ratelimit-Remaining-Tokens:
      - '197616'
      X-Ratelimit-Reset-Requests:
      - 8.64s
      X-Ratelimit-Reset-Tokens:
      - 715ms
      X-Request-Id:
      - "<REQUEST_ID>"
      X-Openai-Proxy-Wasm:
      - v0.1
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=<REDACTED>
      - _cfuvid=<REDACTED>
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 9886e8791fdc0edf-EWR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-CMK679KTDJRUQYDD8zv4xQtkOcZZm",
          "object": "chat.completion",
          "created": 1759436507,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"thought\": \"I need to store the user's information about their birthday in June into memory. The action I should take next is to use the 'memory_store' tool to save this information with a suitable key.\",\n  \"action\": \"memory_store\",\n  \"action_input\": {\n    \"key\": \"birthday\",\n    \"value\": \"June\"\n  }\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 2057,
            "completion_tokens": 84,
            "total_tokens": 2141,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_560af6e559"
        }
  recorded_at: Thu, 02 Oct 2025 20:21:49 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"input_context\": {\n      \"type\":
        \"string\",\n      \"description\": \"Serialized representation of all input
        fields\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"_type\":
        {\n            \"type\": \"string\",\n            \"const\": \"HistoryEntry\"\n          },\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action_input\":
        {\n            \"oneOf\": [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              },\n              {\n                \"type\":
        \"null\"\n              }\n            ],\n            \"description\": \"Union
        of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        \"string\"\n          }\n        },\n        \"required\": [\n          \"_type\",\n          \"step\",\n          \"observation\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts, actions, and observations.\"\n    },\n    \"observation\": {\n      \"type\":
        \"string\",\n      \"description\": \"The result from the last action\"\n    }\n  },\n  \"required\":
        [\n    \"input_context\",\n    \"history\",\n    \"observation\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"interpretation\": {\n      \"type\":
        \"string\",\n      \"description\": \"Interpretation of the observation\"\n    },\n    \"next_step\":
        {\n      \"type\": \"string\",\n      \"enum\": [\n        \"continue\",\n        \"finish\"\n      ],\n      \"description\":
        \"What to do next: ''#<DSPy::NextStep::Continue>'' or ''#<DSPy::NextStep::Finish>''\"\n    }\n  },\n  \"required\":
        [\n    \"interpretation\",\n    \"next_step\"\n  ]\n}\n```\n\nAll interactions
        will be structured in the following way, with the appropriate values filled
        in.\n## Input values\n```json\n{input_values}\n```\n## Output values\nRespond
        exclusively with the output schema fields in the json block below.\n```json\n{output_values}\n```\n\nIn
        adhering to this structure, your objective is: Process the observation from
        a tool and decide what to do next."},{"role":"user","content":"## Input Values\n```json\n{\n  \"input_context\":
        \"{\\\"_type\\\":\\\"AnonymousStruct\\\",\\\"question\\\":\\\"Remember that
        my birthday is in June.\\\"}\",\n  \"history\": [\n    {\n      \"step\":
        1,\n      \"thought\": \"I need to store the user''s information about their
        birthday in June into memory. The action I should take next is to use the
        ''memory_store'' tool to save this information with a suitable key.\",\n      \"action\":
        \"memory_store\",\n      \"action_input\": {\n        \"key\": \"birthday\",\n        \"value\":
        \"June\"\n      },\n      \"observation\": \"Stored memory ''birthday'' successfully\"\n    }\n  ],\n  \"observation\":
        \"Stored memory ''birthday'' successfully\"\n}\n```\n\nRespond with the corresponding
        output schema fields wrapped in a ```json ``` block,\nstarting with the heading
        `## Output values`."}],"temperature":1.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.22.1
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '4251'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 02 Oct 2025 20:21:51 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - "<OPENAI_ORGANIZATION>"
      Openai-Processing-Ms:
      - '1868'
      Openai-Project:
      - proj_n52OL5vlzVaXGnYDaGWmVX5F
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '2481'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9998'
      X-Ratelimit-Remaining-Tokens:
      - '199061'
      X-Ratelimit-Reset-Requests:
      - 15.06s
      X-Ratelimit-Reset-Tokens:
      - 281ms
      X-Request-Id:
      - "<REQUEST_ID>"
      X-Openai-Proxy-Wasm:
      - v0.1
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=<REDACTED>
      - _cfuvid=<REDACTED>
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 9886e886694a0edf-EWR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-CMK697fevX5XtYRf97iyd0ZVJyvAp",
          "object": "chat.completion",
          "created": 1759436509,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"interpretation\": \"The observation confirms that the user's birthday information has been successfully stored in memory.\",\n  \"next_step\": \"finish\"\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 850,
            "completion_tokens": 39,
            "total_tokens": 889,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_560af6e559"
        }
  recorded_at: Thu, 02 Oct 2025 20:21:51 GMT
- request:
    method: post
    uri: https://collector.newrelic.com/agent_listener/invoke_raw_method?license_key=<NEW_RELIC_LICENSE_KEY>&marshal_format=json&method=log_event_data&protocol_version=17&run_id=BU15KT787zQsADvrtB0vtKZo3t8kAAEBAAAnIQEAAJG9AgQfPOcaAwAGOS4yMS4wAAlzaW1iYS5sYW4AB0RTUHkucmI
    body:
      encoding: UTF-8
      string: '[{"common":{"attributes":{"entity.name":"DSPy.rb","hostname":"simba.lan","entity.guid":"MzkyNjk2NHxBUE18QVBQTElDQVRJT058NTI0MDg1MDE4"}},"logs":[{"level":"INFO","timestamp":1759436506840.493,"message":"trace_id=\"0faa02b5-93b9-44ef-bf1c-b2df1bc3eca3\"
        otel_span_stack=[] input_tokens=1294 output_tokens=83 total_tokens=1377 gen_ai.system=\"openai\"
        gen_ai.request.model=\"gpt-4o-mini\" dspy.signature=nil event=\"lm.tokens\"\n"},{"level":"INFO","timestamp":1759436509073.935,"message":"trace_id=\"0faa02b5-93b9-44ef-bf1c-b2df1bc3eca3\"
        otel_span_stack=[] input_tokens=2057 output_tokens=84 total_tokens=2141 gen_ai.system=\"openai\"
        gen_ai.request.model=\"gpt-4o-mini\" dspy.signature=nil event=\"lm.tokens\"\n"}]}]'
    headers:
      Content-Encoding:
      - identity
      Host:
      - collector.newrelic.com
      Nr-Utilizationmetadata:
      - AQICFgAJc2ltYmEubGFuFwAJc2ltYmEubGFu
      Nr-Utilizationextra:
      - AQARAAUAAAAIAABgAA
      Nr-Session:
      - BU15KT787zQsADvrtB0vtKZo3t8kAAEBAAAnIQEAAJG9AgQfPOcaAwAGOS4yMS4wAAlzaW1iYS5sYW4AB0RTUHkucmI
      Nr-Agenttags:
      - AX2uHIkGAAlhY2NvdW50SWQABzM5MjY5NjQAEHRydXN0ZWRBY2NvdW50SWQABzM5MjY5NjQAB2FjY291bnQAD0FjY291bnQgMzkyNjk2NA
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - NewRelic-RubyAgent/9.21.0 (ruby 3.3.6 arm64-darwin23) zlib/1.2.12
      Content-Type:
      - application/octet-stream
  response:
    status:
      code: 202
      message: ''
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Type:
      - application/json; charset=UTF-8
      X-Envoy-Upstream-Service-Time:
      - '1'
      Date:
      - Thu, 02 Oct 2025 20:21:51 GMT
      Server:
      - envoy
      Nr-Rate-Limited:
      - allowed
      X-Served-By:
      - cache-iad-kcgs7200156-IAD
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Thu, 02 Oct 2025 20:21:51 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"input_context\": {\n      \"type\":
        \"string\",\n      \"description\": \"Serialized representation of all input
        fields\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"_type\":
        {\n            \"type\": \"string\",\n            \"const\": \"HistoryEntry\"\n          },\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action_input\":
        {\n            \"oneOf\": [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              },\n              {\n                \"type\":
        \"null\"\n              }\n            ],\n            \"description\": \"Union
        of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        \"string\"\n          }\n        },\n        \"required\": [\n          \"_type\",\n          \"step\",\n          \"observation\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts and actions, including observations from tools.\"\n    },\n    \"available_tools\":
        {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"_type\": {\n            \"type\": \"string\",\n            \"const\":
        \"AvailableTool\"\n          },\n          \"name\": {\n            \"type\":
        \"string\"\n          },\n          \"description\": {\n            \"type\":
        \"string\"\n          },\n          \"schema\": {\n            \"type\": \"object\",\n            \"propertyNames\":
        {\n              \"type\": \"string\"\n            },\n            \"additionalProperties\":
        {\n              \"type\": \"string\"\n            },\n            \"description\":
        \"A mapping where keys are strings and values are strings\"\n          }\n        },\n        \"required\":
        [\n          \"_type\",\n          \"name\",\n          \"description\",\n          \"schema\"\n        ],\n        \"description\":
        \"DSPy::ReAct::AvailableTool struct\"\n      },\n      \"description\": \"Array
        of available tools with their JSON schemas.\"\n    }\n  },\n  \"required\":
        [\n    \"input_context\",\n    \"history\",\n    \"available_tools\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"thought\": {\n      \"type\": \"string\",\n      \"description\":
        \"Reasoning about what to do next, considering the history and observations.\"\n    },\n    \"action\":
        {\n      \"type\": \"string\",\n      \"enum\": [\n        \"memory_store\",\n        \"memory_retrieve\",\n        \"memory_search\",\n        \"memory_list\",\n        \"memory_update\",\n        \"memory_delete\",\n        \"memory_clear\",\n        \"memory_count\",\n        \"memory_get_metadata\",\n        \"finish\"\n      ],\n      \"description\":
        \"The action to take. MUST be one of the tool names listed in `available_tools`
        input, or the literal string \\\"finish\\\" to provide the final answer.\"\n    },\n    \"action_input\":
        {\n      \"type\": \"string\",\n      \"description\": \"Input for the chosen
        action. If action is a tool name, this MUST be a JSON object matching the
        tool''s schema. If action is \\\"finish\\\", this field MUST contain the final
        result based on processing the input data.\"\n    }\n  },\n  \"required\":
        [\n    \"thought\",\n    \"action\",\n    \"action_input\"\n  ]\n}\n```\n\nAll
        interactions will be structured in the following way, with the appropriate
        values filled in.\n## Input values\n```json\n{input_values}\n```\n## Output
        values\nRespond exclusively with the output schema fields in the json block
        below.\n```json\n{output_values}\n```\n\nIn adhering to this structure, your
        objective is: Generate a thought about what to do next to process the given
        inputs."},{"role":"user","content":"## Input Values\n```json\n{\n  \"input_context\":
        \"{\\\"_type\\\":\\\"AnonymousStruct\\\",\\\"question\\\":\\\"Remember that
        my birthday is in June.\\\"}\",\n  \"history\": [\n    {\n      \"step\":
        1,\n      \"thought\": \"I need to store the user''s information about their
        birthday in June into memory. The action I should take next is to use the
        ''memory_store'' tool to save this information with a suitable key.\",\n      \"action\":
        \"memory_store\",\n      \"action_input\": {\n        \"key\": \"birthday\",\n        \"value\":
        \"June\"\n      },\n      \"observation\": \"Stored memory ''birthday'' successfully\"\n    }\n  ],\n  \"available_tools\":
        [\n    {\n      \"name\": \"memory_store\",\n      \"description\": \"Store
        a key-value pair in memory with optional tags\",\n      \"schema\": {\n        \"name\":
        \"memory_store\",\n        \"description\": \"Store a key-value pair in memory
        with optional tags\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\":
        {\n            \"key\": {\n              \"type\": \"string\",\n              \"description\":
        \"Parameter key\"\n            },\n            \"value\": {\n              \"type\":
        \"string\",\n              \"description\": \"Parameter value\"\n            },\n            \"tags\":
        {\n              \"type\": [\n                \"array\",\n                \"null\"\n              ],\n              \"items\":
        {\n                \"type\": \"string\"\n              },\n              \"description\":
        \"Parameter tags (optional)\"\n            }\n          },\n          \"required\":
        [\n            \"key\",\n            \"value\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_retrieve\",\n      \"description\": \"Retrieve a value by key from
        memory\",\n      \"schema\": {\n        \"name\": \"memory_retrieve\",\n        \"description\":
        \"Retrieve a value by key from memory\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {\n            \"key\": {\n              \"type\":
        \"string\",\n              \"description\": \"Parameter key\"\n            }\n          },\n          \"required\":
        [\n            \"key\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_search\",\n      \"description\": \"Search memories by pattern in
        keys and/or values\",\n      \"schema\": {\n        \"name\": \"memory_search\",\n        \"description\":
        \"Search memories by pattern in keys and/or values\",\n        \"parameters\":
        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"pattern\":
        {\n              \"type\": \"string\",\n              \"description\": \"Parameter
        pattern\"\n            },\n            \"in_keys\": {\n              \"type\":
        \"boolean\",\n              \"description\": \"Parameter in_keys (optional)\"\n            },\n            \"in_values\":
        {\n              \"type\": \"boolean\",\n              \"description\": \"Parameter
        in_values (optional)\"\n            }\n          },\n          \"required\":
        [\n            \"pattern\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_list\",\n      \"description\": \"List all stored memory keys\",\n      \"schema\":
        {\n        \"name\": \"memory_list\",\n        \"description\": \"List all
        stored memory keys\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\":
        {},\n          \"required\": []\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_update\",\n      \"description\": \"Update an existing memory value\",\n      \"schema\":
        {\n        \"name\": \"memory_update\",\n        \"description\": \"Update
        an existing memory value\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {\n            \"key\": {\n              \"type\":
        \"string\",\n              \"description\": \"Parameter key\"\n            },\n            \"value\":
        {\n              \"type\": \"string\",\n              \"description\": \"Parameter
        value\"\n            }\n          },\n          \"required\": [\n            \"key\",\n            \"value\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_delete\",\n      \"description\": \"Delete a memory by key\",\n      \"schema\":
        {\n        \"name\": \"memory_delete\",\n        \"description\": \"Delete
        a memory by key\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\":
        {\n            \"key\": {\n              \"type\": \"string\",\n              \"description\":
        \"Parameter key\"\n            }\n          },\n          \"required\": [\n            \"key\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_clear\",\n      \"description\": \"Clear all stored memories\",\n      \"schema\":
        {\n        \"name\": \"memory_clear\",\n        \"description\": \"Clear all
        stored memories\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\":
        {},\n          \"required\": []\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_count\",\n      \"description\": \"Get the count of stored memories\",\n      \"schema\":
        {\n        \"name\": \"memory_count\",\n        \"description\": \"Get the
        count of stored memories\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {},\n          \"required\": []\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_get_metadata\",\n      \"description\": \"Get metadata for a specific
        memory\",\n      \"schema\": {\n        \"name\": \"memory_get_metadata\",\n        \"description\":
        \"Get metadata for a specific memory\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {\n            \"key\": {\n              \"type\":
        \"string\",\n              \"description\": \"Parameter key\"\n            }\n          },\n          \"required\":
        [\n            \"key\"\n          ]\n        }\n      }\n    }\n  ]\n}\n```\n\nRespond
        with the corresponding output schema fields wrapped in a ```json ``` block,\nstarting
        with the heading `## Output values`."}],"temperature":1.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.22.1
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '11172'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 02 Oct 2025 20:21:54 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - "<OPENAI_ORGANIZATION>"
      Openai-Processing-Ms:
      - '1621'
      Openai-Project:
      - proj_n52OL5vlzVaXGnYDaGWmVX5F
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '1837'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9997'
      X-Ratelimit-Remaining-Tokens:
      - '197511'
      X-Ratelimit-Reset-Requests:
      - 20.835s
      X-Ratelimit-Reset-Tokens:
      - 746ms
      X-Request-Id:
      - "<REQUEST_ID>"
      X-Openai-Proxy-Wasm:
      - v0.1
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=<REDACTED>
      - _cfuvid=<REDACTED>
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 9886e89678ef0edf-EWR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-CMK6CHDgpQNZ8owjBYMnZlQ0Bfx3h",
          "object": "chat.completion",
          "created": 1759436512,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"thought\": \"The user's birthday is now stored. I need to confirm the stored value or explore any further actions that could be relevant, like retrieving the stored birthday information.\",\n  \"action\": \"memory_retrieve\",\n  \"action_input\": \"{\\\"key\\\":\\\"birthday\\\"}\"\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 2157,
            "completion_tokens": 66,
            "total_tokens": 2223,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_560af6e559"
        }
  recorded_at: Thu, 02 Oct 2025 20:21:54 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"input_context\": {\n      \"type\":
        \"string\",\n      \"description\": \"Serialized representation of all input
        fields\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"_type\":
        {\n            \"type\": \"string\",\n            \"const\": \"HistoryEntry\"\n          },\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action_input\":
        {\n            \"oneOf\": [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              },\n              {\n                \"type\":
        \"null\"\n              }\n            ],\n            \"description\": \"Union
        of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        \"string\"\n          }\n        },\n        \"required\": [\n          \"_type\",\n          \"step\",\n          \"observation\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts and actions, including observations from tools.\"\n    },\n    \"available_tools\":
        {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"_type\": {\n            \"type\": \"string\",\n            \"const\":
        \"AvailableTool\"\n          },\n          \"name\": {\n            \"type\":
        \"string\"\n          },\n          \"description\": {\n            \"type\":
        \"string\"\n          },\n          \"schema\": {\n            \"type\": \"object\",\n            \"propertyNames\":
        {\n              \"type\": \"string\"\n            },\n            \"additionalProperties\":
        {\n              \"type\": \"string\"\n            },\n            \"description\":
        \"A mapping where keys are strings and values are strings\"\n          }\n        },\n        \"required\":
        [\n          \"_type\",\n          \"name\",\n          \"description\",\n          \"schema\"\n        ],\n        \"description\":
        \"DSPy::ReAct::AvailableTool struct\"\n      },\n      \"description\": \"Array
        of available tools with their JSON schemas.\"\n    }\n  },\n  \"required\":
        [\n    \"input_context\",\n    \"history\",\n    \"available_tools\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"thought\": {\n      \"type\": \"string\",\n      \"description\":
        \"Reasoning about what to do next, considering the history and observations.\"\n    },\n    \"action\":
        {\n      \"type\": \"string\",\n      \"enum\": [\n        \"memory_store\",\n        \"memory_retrieve\",\n        \"memory_search\",\n        \"memory_list\",\n        \"memory_update\",\n        \"memory_delete\",\n        \"memory_clear\",\n        \"memory_count\",\n        \"memory_get_metadata\",\n        \"finish\"\n      ],\n      \"description\":
        \"The action to take. MUST be one of the tool names listed in `available_tools`
        input, or the literal string \\\"finish\\\" to provide the final answer.\"\n    },\n    \"action_input\":
        {\n      \"type\": \"string\",\n      \"description\": \"Input for the chosen
        action. If action is a tool name, this MUST be a JSON object matching the
        tool''s schema. If action is \\\"finish\\\", this field MUST contain the final
        result based on processing the input data.\"\n    }\n  },\n  \"required\":
        [\n    \"thought\",\n    \"action\",\n    \"action_input\"\n  ]\n}\n```\n\nAll
        interactions will be structured in the following way, with the appropriate
        values filled in.\n## Input values\n```json\n{input_values}\n```\n## Output
        values\nRespond exclusively with the output schema fields in the json block
        below.\n```json\n{output_values}\n```\n\nIn adhering to this structure, your
        objective is: Generate a thought about what to do next to process the given
        inputs."},{"role":"user","content":"## Input Values\n```json\n{\n  \"input_context\":
        \"{\\\"_type\\\":\\\"AnonymousStruct\\\",\\\"question\\\":\\\"When is my birthday?\\\"}\",\n  \"history\":
        [],\n  \"available_tools\": [\n    {\n      \"name\": \"memory_store\",\n      \"description\":
        \"Store a key-value pair in memory with optional tags\",\n      \"schema\":
        {\n        \"name\": \"memory_store\",\n        \"description\": \"Store a
        key-value pair in memory with optional tags\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {\n            \"key\": {\n              \"type\":
        \"string\",\n              \"description\": \"Parameter key\"\n            },\n            \"value\":
        {\n              \"type\": \"string\",\n              \"description\": \"Parameter
        value\"\n            },\n            \"tags\": {\n              \"type\":
        [\n                \"array\",\n                \"null\"\n              ],\n              \"items\":
        {\n                \"type\": \"string\"\n              },\n              \"description\":
        \"Parameter tags (optional)\"\n            }\n          },\n          \"required\":
        [\n            \"key\",\n            \"value\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_retrieve\",\n      \"description\": \"Retrieve a value by key from
        memory\",\n      \"schema\": {\n        \"name\": \"memory_retrieve\",\n        \"description\":
        \"Retrieve a value by key from memory\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {\n            \"key\": {\n              \"type\":
        \"string\",\n              \"description\": \"Parameter key\"\n            }\n          },\n          \"required\":
        [\n            \"key\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_search\",\n      \"description\": \"Search memories by pattern in
        keys and/or values\",\n      \"schema\": {\n        \"name\": \"memory_search\",\n        \"description\":
        \"Search memories by pattern in keys and/or values\",\n        \"parameters\":
        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"pattern\":
        {\n              \"type\": \"string\",\n              \"description\": \"Parameter
        pattern\"\n            },\n            \"in_keys\": {\n              \"type\":
        \"boolean\",\n              \"description\": \"Parameter in_keys (optional)\"\n            },\n            \"in_values\":
        {\n              \"type\": \"boolean\",\n              \"description\": \"Parameter
        in_values (optional)\"\n            }\n          },\n          \"required\":
        [\n            \"pattern\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_list\",\n      \"description\": \"List all stored memory keys\",\n      \"schema\":
        {\n        \"name\": \"memory_list\",\n        \"description\": \"List all
        stored memory keys\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\":
        {},\n          \"required\": []\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_update\",\n      \"description\": \"Update an existing memory value\",\n      \"schema\":
        {\n        \"name\": \"memory_update\",\n        \"description\": \"Update
        an existing memory value\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {\n            \"key\": {\n              \"type\":
        \"string\",\n              \"description\": \"Parameter key\"\n            },\n            \"value\":
        {\n              \"type\": \"string\",\n              \"description\": \"Parameter
        value\"\n            }\n          },\n          \"required\": [\n            \"key\",\n            \"value\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_delete\",\n      \"description\": \"Delete a memory by key\",\n      \"schema\":
        {\n        \"name\": \"memory_delete\",\n        \"description\": \"Delete
        a memory by key\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\":
        {\n            \"key\": {\n              \"type\": \"string\",\n              \"description\":
        \"Parameter key\"\n            }\n          },\n          \"required\": [\n            \"key\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_clear\",\n      \"description\": \"Clear all stored memories\",\n      \"schema\":
        {\n        \"name\": \"memory_clear\",\n        \"description\": \"Clear all
        stored memories\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\":
        {},\n          \"required\": []\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_count\",\n      \"description\": \"Get the count of stored memories\",\n      \"schema\":
        {\n        \"name\": \"memory_count\",\n        \"description\": \"Get the
        count of stored memories\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {},\n          \"required\": []\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_get_metadata\",\n      \"description\": \"Get metadata for a specific
        memory\",\n      \"schema\": {\n        \"name\": \"memory_get_metadata\",\n        \"description\":
        \"Get metadata for a specific memory\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {\n            \"key\": {\n              \"type\":
        \"string\",\n              \"description\": \"Parameter key\"\n            }\n          },\n          \"required\":
        [\n            \"key\"\n          ]\n        }\n      }\n    }\n  ]\n}\n```\n\nRespond
        with the corresponding output schema fields wrapped in a ```json ``` block,\nstarting
        with the heading `## Output values`."}],"temperature":1.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.22.1
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '10700'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 02 Oct 2025 20:21:56 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - "<OPENAI_ORGANIZATION>"
      Openai-Processing-Ms:
      - '1937'
      Openai-Project:
      - proj_n52OL5vlzVaXGnYDaGWmVX5F
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '1956'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9996'
      X-Ratelimit-Remaining-Tokens:
      - '197620'
      X-Ratelimit-Reset-Requests:
      - 27.431s
      X-Ratelimit-Reset-Tokens:
      - 714ms
      X-Request-Id:
      - "<REQUEST_ID>"
      X-Openai-Proxy-Wasm:
      - v0.1
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=<REDACTED>
      - _cfuvid=<REDACTED>
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 9886e8a69ed80edf-EWR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-CMK6E8p6JEmauI8CduhJ1PHqznDgq",
          "object": "chat.completion",
          "created": 1759436514,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"thought\": \"The user has asked about their birthday, which suggests I should store this information for future reference. I can use the 'memory_store' action to save their birthday once I gather the necessary details.\",\n  \"action\": \"memory_store\",\n  \"action_input\": \"{\\\"key\\\":\\\"birthday\\\",\\\"value\\\":\\\"[User's Birthday]\\\"}\"\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 2055,
            "completion_tokens": 81,
            "total_tokens": 2136,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_560af6e559"
        }
  recorded_at: Thu, 02 Oct 2025 20:21:56 GMT
- request:
    method: post
    uri: https://collector.newrelic.com/agent_listener/invoke_raw_method?license_key=<NEW_RELIC_LICENSE_KEY>&marshal_format=json&method=log_event_data&protocol_version=17&run_id=BU15KT787zQsADvrtB0vtKZo3t8kAAEBAAAnIQEAAJG9AgQfPOcaAwAGOS4yMS4wAAlzaW1iYS5sYW4AB0RTUHkucmI
    body:
      encoding: UTF-8
      string: '[{"common":{"attributes":{"entity.name":"DSPy.rb","hostname":"simba.lan","entity.guid":"MzkyNjk2NHxBUE18QVBQTElDQVRJT058NTI0MDg1MDE4"}},"logs":[{"level":"INFO","timestamp":1759436511637.75,"message":"trace_id=\"0faa02b5-93b9-44ef-bf1c-b2df1bc3eca3\"
        otel_span_stack=[] input_tokens=850 output_tokens=39 total_tokens=889 gen_ai.system=\"openai\"
        gen_ai.request.model=\"gpt-4o-mini\" dspy.signature=nil event=\"lm.tokens\"\n"},{"level":"INFO","timestamp":1759436514225.466,"message":"trace_id=\"0faa02b5-93b9-44ef-bf1c-b2df1bc3eca3\"
        otel_span_stack=[] input_tokens=2157 output_tokens=66 total_tokens=2223 gen_ai.system=\"openai\"
        gen_ai.request.model=\"gpt-4o-mini\" dspy.signature=nil event=\"lm.tokens\"\n"},{"level":"INFO","timestamp":1759436516389.291,"message":"trace_id=\"0faa02b5-93b9-44ef-bf1c-b2df1bc3eca3\"
        otel_span_stack=[] input_tokens=2055 output_tokens=81 total_tokens=2136 gen_ai.system=\"openai\"
        gen_ai.request.model=\"gpt-4o-mini\" dspy.signature=nil event=\"lm.tokens\"\n"}]}]'
    headers:
      Content-Encoding:
      - identity
      Host:
      - collector.newrelic.com
      Nr-Utilizationmetadata:
      - AQICFgAJc2ltYmEubGFuFwAJc2ltYmEubGFu
      Nr-Utilizationextra:
      - AQARAAUAAAAIAABgAA
      Nr-Session:
      - BU15KT787zQsADvrtB0vtKZo3t8kAAEBAAAnIQEAAJG9AgQfPOcaAwAGOS4yMS4wAAlzaW1iYS5sYW4AB0RTUHkucmI
      Nr-Agenttags:
      - AX2uHIkGAAlhY2NvdW50SWQABzM5MjY5NjQAEHRydXN0ZWRBY2NvdW50SWQABzM5MjY5NjQAB2FjY291bnQAD0FjY291bnQgMzkyNjk2NA
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - NewRelic-RubyAgent/9.21.0 (ruby 3.3.6 arm64-darwin23) zlib/1.2.12
      Content-Type:
      - application/octet-stream
  response:
    status:
      code: 202
      message: ''
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Type:
      - application/json; charset=UTF-8
      X-Envoy-Upstream-Service-Time:
      - '0'
      Date:
      - Thu, 02 Oct 2025 20:21:56 GMT
      Server:
      - envoy
      Nr-Rate-Limited:
      - allowed
      X-Served-By:
      - cache-iad-kcgs7200156-IAD
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Thu, 02 Oct 2025 20:21:56 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"input_context\": {\n      \"type\":
        \"string\",\n      \"description\": \"Serialized representation of all input
        fields\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"_type\":
        {\n            \"type\": \"string\",\n            \"const\": \"HistoryEntry\"\n          },\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action_input\":
        {\n            \"oneOf\": [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              },\n              {\n                \"type\":
        \"null\"\n              }\n            ],\n            \"description\": \"Union
        of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        \"string\"\n          }\n        },\n        \"required\": [\n          \"_type\",\n          \"step\",\n          \"observation\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts, actions, and observations.\"\n    },\n    \"observation\": {\n      \"type\":
        \"string\",\n      \"description\": \"The result from the last action\"\n    }\n  },\n  \"required\":
        [\n    \"input_context\",\n    \"history\",\n    \"observation\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"interpretation\": {\n      \"type\":
        \"string\",\n      \"description\": \"Interpretation of the observation\"\n    },\n    \"next_step\":
        {\n      \"type\": \"string\",\n      \"enum\": [\n        \"continue\",\n        \"finish\"\n      ],\n      \"description\":
        \"What to do next: ''#<DSPy::NextStep::Continue>'' or ''#<DSPy::NextStep::Finish>''\"\n    }\n  },\n  \"required\":
        [\n    \"interpretation\",\n    \"next_step\"\n  ]\n}\n```\n\nAll interactions
        will be structured in the following way, with the appropriate values filled
        in.\n## Input values\n```json\n{input_values}\n```\n## Output values\nRespond
        exclusively with the output schema fields in the json block below.\n```json\n{output_values}\n```\n\nIn
        adhering to this structure, your objective is: Process the observation from
        a tool and decide what to do next."},{"role":"user","content":"## Input Values\n```json\n{\n  \"input_context\":
        \"{\\\"_type\\\":\\\"AnonymousStruct\\\",\\\"question\\\":\\\"When is my birthday?\\\"}\",\n  \"history\":
        [\n    {\n      \"step\": 1,\n      \"thought\": \"The user has asked about
        their birthday, which suggests I should store this information for future
        reference. I can use the ''memory_store'' action to save their birthday once
        I gather the necessary details.\",\n      \"action\": \"memory_store\",\n      \"action_input\":
        \"{\\\"key\\\":\\\"birthday\\\",\\\"value\\\":\\\"[User''s Birthday]\\\"}\",\n      \"observation\":
        \"Stored memory ''birthday'' successfully\"\n    }\n  ],\n  \"observation\":
        \"Stored memory ''birthday'' successfully\"\n}\n```\n\nRespond with the corresponding
        output schema fields wrapped in a ```json ``` block,\nstarting with the heading
        `## Output values`."}],"temperature":1.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.22.1
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '4252'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 02 Oct 2025 20:21:57 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - "<OPENAI_ORGANIZATION>"
      Openai-Processing-Ms:
      - '983'
      Openai-Project:
      - proj_n52OL5vlzVaXGnYDaGWmVX5F
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '1016'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9996'
      X-Ratelimit-Remaining-Tokens:
      - '199063'
      X-Ratelimit-Reset-Requests:
      - 33.914s
      X-Ratelimit-Reset-Tokens:
      - 281ms
      X-Request-Id:
      - "<REQUEST_ID>"
      X-Openai-Proxy-Wasm:
      - v0.1
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=<REDACTED>
      - _cfuvid=<REDACTED>
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 9886e8b41bd70edf-EWR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-CMK6GoDiViJ40mZGIoOWZjcTKmP0u",
          "object": "chat.completion",
          "created": 1759436516,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"interpretation\": \"The observation confirms that the birthday information was successfully stored in memory. This indicates that the action performed was successful.\",\n  \"next_step\": \"finish\"\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 845,
            "completion_tokens": 46,
            "total_tokens": 891,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_560af6e559"
        }
  recorded_at: Thu, 02 Oct 2025 20:21:57 GMT
- request:
    method: post
    uri: https://collector.newrelic.com/agent_listener/invoke_raw_method?license_key=<NEW_RELIC_LICENSE_KEY>&marshal_format=json&method=log_event_data&protocol_version=17&run_id=BU15KT787zQsADvrtB0vtKZo3t8kAAEBAAAnIQEAAJG9AgQfPOcaAwAGOS4yMS4wAAlzaW1iYS5sYW4AB0RTUHkucmI
    body:
      encoding: UTF-8
      string: '[{"common":{"attributes":{"entity.name":"DSPy.rb","hostname":"simba.lan","entity.guid":"MzkyNjk2NHxBUE18QVBQTElDQVRJT058NTI0MDg1MDE4"}},"logs":[{"level":"INFO","timestamp":1759436517518.906,"message":"trace_id=\"0faa02b5-93b9-44ef-bf1c-b2df1bc3eca3\"
        otel_span_stack=[] input_tokens=845 output_tokens=46 total_tokens=891 gen_ai.system=\"openai\"
        gen_ai.request.model=\"gpt-4o-mini\" dspy.signature=nil event=\"lm.tokens\"\n"}]}]'
    headers:
      Content-Encoding:
      - identity
      Host:
      - collector.newrelic.com
      Nr-Utilizationmetadata:
      - AQICFgAJc2ltYmEubGFuFwAJc2ltYmEubGFu
      Nr-Utilizationextra:
      - AQARAAUAAAAIAABgAA
      Nr-Session:
      - BU15KT787zQsADvrtB0vtKZo3t8kAAEBAAAnIQEAAJG9AgQfPOcaAwAGOS4yMS4wAAlzaW1iYS5sYW4AB0RTUHkucmI
      Nr-Agenttags:
      - AX2uHIkGAAlhY2NvdW50SWQABzM5MjY5NjQAEHRydXN0ZWRBY2NvdW50SWQABzM5MjY5NjQAB2FjY291bnQAD0FjY291bnQgMzkyNjk2NA
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - NewRelic-RubyAgent/9.21.0 (ruby 3.3.6 arm64-darwin23) zlib/1.2.12
      Content-Type:
      - application/octet-stream
  response:
    status:
      code: 202
      message: ''
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Type:
      - application/json; charset=UTF-8
      X-Envoy-Upstream-Service-Time:
      - '1'
      Date:
      - Thu, 02 Oct 2025 20:22:01 GMT
      Server:
      - envoy
      Nr-Rate-Limited:
      - allowed
      X-Served-By:
      - cache-iad-kcgs7200156-IAD
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Thu, 02 Oct 2025 20:22:01 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"input_context\": {\n      \"type\":
        \"string\",\n      \"description\": \"Serialized representation of all input
        fields\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"_type\":
        {\n            \"type\": \"string\",\n            \"const\": \"HistoryEntry\"\n          },\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action_input\":
        {\n            \"oneOf\": [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              },\n              {\n                \"type\":
        \"null\"\n              }\n            ],\n            \"description\": \"Union
        of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        \"string\"\n          }\n        },\n        \"required\": [\n          \"_type\",\n          \"step\",\n          \"observation\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts and actions, including observations from tools.\"\n    },\n    \"available_tools\":
        {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"_type\": {\n            \"type\": \"string\",\n            \"const\":
        \"AvailableTool\"\n          },\n          \"name\": {\n            \"type\":
        \"string\"\n          },\n          \"description\": {\n            \"type\":
        \"string\"\n          },\n          \"schema\": {\n            \"type\": \"object\",\n            \"propertyNames\":
        {\n              \"type\": \"string\"\n            },\n            \"additionalProperties\":
        {\n              \"type\": \"string\"\n            },\n            \"description\":
        \"A mapping where keys are strings and values are strings\"\n          }\n        },\n        \"required\":
        [\n          \"_type\",\n          \"name\",\n          \"description\",\n          \"schema\"\n        ],\n        \"description\":
        \"DSPy::ReAct::AvailableTool struct\"\n      },\n      \"description\": \"Array
        of available tools with their JSON schemas.\"\n    }\n  },\n  \"required\":
        [\n    \"input_context\",\n    \"history\",\n    \"available_tools\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"thought\": {\n      \"type\": \"string\",\n      \"description\":
        \"Reasoning about what to do next, considering the history and observations.\"\n    },\n    \"action\":
        {\n      \"type\": \"string\",\n      \"enum\": [\n        \"memory_store\",\n        \"memory_retrieve\",\n        \"memory_search\",\n        \"memory_list\",\n        \"memory_update\",\n        \"memory_delete\",\n        \"memory_clear\",\n        \"memory_count\",\n        \"memory_get_metadata\",\n        \"finish\"\n      ],\n      \"description\":
        \"The action to take. MUST be one of the tool names listed in `available_tools`
        input, or the literal string \\\"finish\\\" to provide the final answer.\"\n    },\n    \"action_input\":
        {\n      \"type\": \"string\",\n      \"description\": \"Input for the chosen
        action. If action is a tool name, this MUST be a JSON object matching the
        tool''s schema. If action is \\\"finish\\\", this field MUST contain the final
        result based on processing the input data.\"\n    }\n  },\n  \"required\":
        [\n    \"thought\",\n    \"action\",\n    \"action_input\"\n  ]\n}\n```\n\nAll
        interactions will be structured in the following way, with the appropriate
        values filled in.\n## Input values\n```json\n{input_values}\n```\n## Output
        values\nRespond exclusively with the output schema fields in the json block
        below.\n```json\n{output_values}\n```\n\nIn adhering to this structure, your
        objective is: Generate a thought about what to do next to process the given
        inputs."},{"role":"user","content":"## Input Values\n```json\n{\n  \"input_context\":
        \"{\\\"_type\\\":\\\"AnonymousStruct\\\",\\\"question\\\":\\\"When is my birthday?\\\"}\",\n  \"history\":
        [\n    {\n      \"step\": 1,\n      \"thought\": \"The user has asked about
        their birthday, which suggests I should store this information for future
        reference. I can use the ''memory_store'' action to save their birthday once
        I gather the necessary details.\",\n      \"action\": \"memory_store\",\n      \"action_input\":
        \"{\\\"key\\\":\\\"birthday\\\",\\\"value\\\":\\\"[User''s Birthday]\\\"}\",\n      \"observation\":
        \"Stored memory ''birthday'' successfully\"\n    }\n  ],\n  \"available_tools\":
        [\n    {\n      \"name\": \"memory_store\",\n      \"description\": \"Store
        a key-value pair in memory with optional tags\",\n      \"schema\": {\n        \"name\":
        \"memory_store\",\n        \"description\": \"Store a key-value pair in memory
        with optional tags\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\":
        {\n            \"key\": {\n              \"type\": \"string\",\n              \"description\":
        \"Parameter key\"\n            },\n            \"value\": {\n              \"type\":
        \"string\",\n              \"description\": \"Parameter value\"\n            },\n            \"tags\":
        {\n              \"type\": [\n                \"array\",\n                \"null\"\n              ],\n              \"items\":
        {\n                \"type\": \"string\"\n              },\n              \"description\":
        \"Parameter tags (optional)\"\n            }\n          },\n          \"required\":
        [\n            \"key\",\n            \"value\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_retrieve\",\n      \"description\": \"Retrieve a value by key from
        memory\",\n      \"schema\": {\n        \"name\": \"memory_retrieve\",\n        \"description\":
        \"Retrieve a value by key from memory\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {\n            \"key\": {\n              \"type\":
        \"string\",\n              \"description\": \"Parameter key\"\n            }\n          },\n          \"required\":
        [\n            \"key\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_search\",\n      \"description\": \"Search memories by pattern in
        keys and/or values\",\n      \"schema\": {\n        \"name\": \"memory_search\",\n        \"description\":
        \"Search memories by pattern in keys and/or values\",\n        \"parameters\":
        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"pattern\":
        {\n              \"type\": \"string\",\n              \"description\": \"Parameter
        pattern\"\n            },\n            \"in_keys\": {\n              \"type\":
        \"boolean\",\n              \"description\": \"Parameter in_keys (optional)\"\n            },\n            \"in_values\":
        {\n              \"type\": \"boolean\",\n              \"description\": \"Parameter
        in_values (optional)\"\n            }\n          },\n          \"required\":
        [\n            \"pattern\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_list\",\n      \"description\": \"List all stored memory keys\",\n      \"schema\":
        {\n        \"name\": \"memory_list\",\n        \"description\": \"List all
        stored memory keys\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\":
        {},\n          \"required\": []\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_update\",\n      \"description\": \"Update an existing memory value\",\n      \"schema\":
        {\n        \"name\": \"memory_update\",\n        \"description\": \"Update
        an existing memory value\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {\n            \"key\": {\n              \"type\":
        \"string\",\n              \"description\": \"Parameter key\"\n            },\n            \"value\":
        {\n              \"type\": \"string\",\n              \"description\": \"Parameter
        value\"\n            }\n          },\n          \"required\": [\n            \"key\",\n            \"value\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_delete\",\n      \"description\": \"Delete a memory by key\",\n      \"schema\":
        {\n        \"name\": \"memory_delete\",\n        \"description\": \"Delete
        a memory by key\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\":
        {\n            \"key\": {\n              \"type\": \"string\",\n              \"description\":
        \"Parameter key\"\n            }\n          },\n          \"required\": [\n            \"key\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_clear\",\n      \"description\": \"Clear all stored memories\",\n      \"schema\":
        {\n        \"name\": \"memory_clear\",\n        \"description\": \"Clear all
        stored memories\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\":
        {},\n          \"required\": []\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_count\",\n      \"description\": \"Get the count of stored memories\",\n      \"schema\":
        {\n        \"name\": \"memory_count\",\n        \"description\": \"Get the
        count of stored memories\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {},\n          \"required\": []\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_get_metadata\",\n      \"description\": \"Get metadata for a specific
        memory\",\n      \"schema\": {\n        \"name\": \"memory_get_metadata\",\n        \"description\":
        \"Get metadata for a specific memory\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {\n            \"key\": {\n              \"type\":
        \"string\",\n              \"description\": \"Parameter key\"\n            }\n          },\n          \"required\":
        [\n            \"key\"\n          ]\n        }\n      }\n    }\n  ]\n}\n```\n\nRespond
        with the corresponding output schema fields wrapped in a ```json ``` block,\nstarting
        with the heading `## Output values`."}],"temperature":1.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.22.1
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '11173'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 02 Oct 2025 20:22:02 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - "<OPENAI_ORGANIZATION>"
      Openai-Processing-Ms:
      - '2125'
      Openai-Project:
      - proj_n52OL5vlzVaXGnYDaGWmVX5F
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '4590'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9996'
      X-Ratelimit-Remaining-Tokens:
      - '197512'
      X-Ratelimit-Reset-Requests:
      - 32.645s
      X-Ratelimit-Reset-Tokens:
      - 746ms
      X-Request-Id:
      - "<REQUEST_ID>"
      X-Openai-Proxy-Wasm:
      - v0.1
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=<REDACTED>
      - _cfuvid=<REDACTED>
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 9886e8bb28220edf-EWR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-CMK6KBhHZEGseKTPpSb97zYD6QyCv",
          "object": "chat.completion",
          "created": 1759436520,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"thought\": \"The user's inquiry about their birthday indicates that I should confirm or retrieve the stored birthday value next. Given that I just stored the birthday, the next action could involve retrieving this value for verification or use.\",\n  \"action\": \"memory_retrieve\",\n  \"action_input\": \"{\\\"key\\\":\\\"birthday\\\"}\"\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 2152,
            "completion_tokens": 75,
            "total_tokens": 2227,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_560af6e559"
        }
  recorded_at: Thu, 02 Oct 2025 20:22:02 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"input_context\": {\n      \"type\":
        \"string\",\n      \"description\": \"Serialized representation of all input
        fields\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"_type\":
        {\n            \"type\": \"string\",\n            \"const\": \"HistoryEntry\"\n          },\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action_input\":
        {\n            \"oneOf\": [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              },\n              {\n                \"type\":
        \"null\"\n              }\n            ],\n            \"description\": \"Union
        of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        \"string\"\n          }\n        },\n        \"required\": [\n          \"_type\",\n          \"step\",\n          \"observation\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts and actions, including observations from tools.\"\n    },\n    \"available_tools\":
        {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"_type\": {\n            \"type\": \"string\",\n            \"const\":
        \"AvailableTool\"\n          },\n          \"name\": {\n            \"type\":
        \"string\"\n          },\n          \"description\": {\n            \"type\":
        \"string\"\n          },\n          \"schema\": {\n            \"type\": \"object\",\n            \"propertyNames\":
        {\n              \"type\": \"string\"\n            },\n            \"additionalProperties\":
        {\n              \"type\": \"string\"\n            },\n            \"description\":
        \"A mapping where keys are strings and values are strings\"\n          }\n        },\n        \"required\":
        [\n          \"_type\",\n          \"name\",\n          \"description\",\n          \"schema\"\n        ],\n        \"description\":
        \"DSPy::ReAct::AvailableTool struct\"\n      },\n      \"description\": \"Array
        of available tools with their JSON schemas.\"\n    }\n  },\n  \"required\":
        [\n    \"input_context\",\n    \"history\",\n    \"available_tools\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"thought\": {\n      \"type\": \"string\",\n      \"description\":
        \"Reasoning about what to do next, considering the history and observations.\"\n    },\n    \"action\":
        {\n      \"type\": \"string\",\n      \"enum\": [\n        \"memory_store\",\n        \"memory_retrieve\",\n        \"memory_search\",\n        \"memory_list\",\n        \"memory_update\",\n        \"memory_delete\",\n        \"memory_clear\",\n        \"memory_count\",\n        \"memory_get_metadata\",\n        \"finish\"\n      ],\n      \"description\":
        \"The action to take. MUST be one of the tool names listed in `available_tools`
        input, or the literal string \\\"finish\\\" to provide the final answer.\"\n    },\n    \"action_input\":
        {\n      \"type\": \"string\",\n      \"description\": \"Input for the chosen
        action. If action is a tool name, this MUST be a JSON object matching the
        tool''s schema. If action is \\\"finish\\\", this field MUST contain the final
        result based on processing the input data.\"\n    }\n  },\n  \"required\":
        [\n    \"thought\",\n    \"action\",\n    \"action_input\"\n  ]\n}\n```\n\nAll
        interactions will be structured in the following way, with the appropriate
        values filled in.\n## Input values\n```json\n{input_values}\n```\n## Output
        values\nRespond exclusively with the output schema fields in the json block
        below.\n```json\n{output_values}\n```\n\nIn adhering to this structure, your
        objective is: Generate a thought about what to do next to process the given
        inputs."},{"role":"user","content":"## Input Values\n```json\n{\n  \"input_context\":
        \"{\\\"_type\\\":\\\"AnonymousStruct\\\",\\\"question\\\":\\\"What month is
        my birthday in?\\\"}\",\n  \"history\": [],\n  \"available_tools\": [\n    {\n      \"name\":
        \"memory_store\",\n      \"description\": \"Store a key-value pair in memory
        with optional tags\",\n      \"schema\": {\n        \"name\": \"memory_store\",\n        \"description\":
        \"Store a key-value pair in memory with optional tags\",\n        \"parameters\":
        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"key\":
        {\n              \"type\": \"string\",\n              \"description\": \"Parameter
        key\"\n            },\n            \"value\": {\n              \"type\": \"string\",\n              \"description\":
        \"Parameter value\"\n            },\n            \"tags\": {\n              \"type\":
        [\n                \"array\",\n                \"null\"\n              ],\n              \"items\":
        {\n                \"type\": \"string\"\n              },\n              \"description\":
        \"Parameter tags (optional)\"\n            }\n          },\n          \"required\":
        [\n            \"key\",\n            \"value\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_retrieve\",\n      \"description\": \"Retrieve a value by key from
        memory\",\n      \"schema\": {\n        \"name\": \"memory_retrieve\",\n        \"description\":
        \"Retrieve a value by key from memory\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {\n            \"key\": {\n              \"type\":
        \"string\",\n              \"description\": \"Parameter key\"\n            }\n          },\n          \"required\":
        [\n            \"key\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_search\",\n      \"description\": \"Search memories by pattern in
        keys and/or values\",\n      \"schema\": {\n        \"name\": \"memory_search\",\n        \"description\":
        \"Search memories by pattern in keys and/or values\",\n        \"parameters\":
        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"pattern\":
        {\n              \"type\": \"string\",\n              \"description\": \"Parameter
        pattern\"\n            },\n            \"in_keys\": {\n              \"type\":
        \"boolean\",\n              \"description\": \"Parameter in_keys (optional)\"\n            },\n            \"in_values\":
        {\n              \"type\": \"boolean\",\n              \"description\": \"Parameter
        in_values (optional)\"\n            }\n          },\n          \"required\":
        [\n            \"pattern\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_list\",\n      \"description\": \"List all stored memory keys\",\n      \"schema\":
        {\n        \"name\": \"memory_list\",\n        \"description\": \"List all
        stored memory keys\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\":
        {},\n          \"required\": []\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_update\",\n      \"description\": \"Update an existing memory value\",\n      \"schema\":
        {\n        \"name\": \"memory_update\",\n        \"description\": \"Update
        an existing memory value\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {\n            \"key\": {\n              \"type\":
        \"string\",\n              \"description\": \"Parameter key\"\n            },\n            \"value\":
        {\n              \"type\": \"string\",\n              \"description\": \"Parameter
        value\"\n            }\n          },\n          \"required\": [\n            \"key\",\n            \"value\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_delete\",\n      \"description\": \"Delete a memory by key\",\n      \"schema\":
        {\n        \"name\": \"memory_delete\",\n        \"description\": \"Delete
        a memory by key\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\":
        {\n            \"key\": {\n              \"type\": \"string\",\n              \"description\":
        \"Parameter key\"\n            }\n          },\n          \"required\": [\n            \"key\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_clear\",\n      \"description\": \"Clear all stored memories\",\n      \"schema\":
        {\n        \"name\": \"memory_clear\",\n        \"description\": \"Clear all
        stored memories\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\":
        {},\n          \"required\": []\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_count\",\n      \"description\": \"Get the count of stored memories\",\n      \"schema\":
        {\n        \"name\": \"memory_count\",\n        \"description\": \"Get the
        count of stored memories\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {},\n          \"required\": []\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_get_metadata\",\n      \"description\": \"Get metadata for a specific
        memory\",\n      \"schema\": {\n        \"name\": \"memory_get_metadata\",\n        \"description\":
        \"Get metadata for a specific memory\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {\n            \"key\": {\n              \"type\":
        \"string\",\n              \"description\": \"Parameter key\"\n            }\n          },\n          \"required\":
        [\n            \"key\"\n          ]\n        }\n      }\n    }\n  ]\n}\n```\n\nRespond
        with the corresponding output schema fields wrapped in a ```json ``` block,\nstarting
        with the heading `## Output values`."}],"temperature":1.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.22.1
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '10709'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 02 Oct 2025 20:22:04 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - "<OPENAI_ORGANIZATION>"
      Openai-Processing-Ms:
      - '1761'
      Openai-Project:
      - proj_n52OL5vlzVaXGnYDaGWmVX5F
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '1780'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9994'
      X-Ratelimit-Remaining-Tokens:
      - '197618'
      X-Ratelimit-Reset-Requests:
      - 45.373s
      X-Ratelimit-Reset-Tokens:
      - 714ms
      X-Request-Id:
      - "<REQUEST_ID>"
      X-Openai-Proxy-Wasm:
      - v0.1
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=<REDACTED>
      - _cfuvid=<REDACTED>
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 9886e8d89a7f0edf-EWR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-CMK6MW4acB55sKNbTgTJlcJzzp9mP",
          "object": "chat.completion",
          "created": 1759436522,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"thought\": \"I need to determine the user's birthday month. Since there is no history yet, I should store the question they asked about their birthday month in memory for future reference or retrieval.\",\n  \"action\": \"memory_store\",\n  \"action_input\": {\n    \"key\": \"birthday_question\",\n    \"value\": \"What month is my birthday in?\"\n  }\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 2057,
            "completion_tokens": 86,
            "total_tokens": 2143,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_560af6e559"
        }
  recorded_at: Thu, 02 Oct 2025 20:22:04 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"input_context\": {\n      \"type\":
        \"string\",\n      \"description\": \"Serialized representation of all input
        fields\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"_type\":
        {\n            \"type\": \"string\",\n            \"const\": \"HistoryEntry\"\n          },\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action_input\":
        {\n            \"oneOf\": [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              },\n              {\n                \"type\":
        \"null\"\n              }\n            ],\n            \"description\": \"Union
        of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        \"string\"\n          }\n        },\n        \"required\": [\n          \"_type\",\n          \"step\",\n          \"observation\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts, actions, and observations.\"\n    },\n    \"observation\": {\n      \"type\":
        \"string\",\n      \"description\": \"The result from the last action\"\n    }\n  },\n  \"required\":
        [\n    \"input_context\",\n    \"history\",\n    \"observation\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"interpretation\": {\n      \"type\":
        \"string\",\n      \"description\": \"Interpretation of the observation\"\n    },\n    \"next_step\":
        {\n      \"type\": \"string\",\n      \"enum\": [\n        \"continue\",\n        \"finish\"\n      ],\n      \"description\":
        \"What to do next: ''#<DSPy::NextStep::Continue>'' or ''#<DSPy::NextStep::Finish>''\"\n    }\n  },\n  \"required\":
        [\n    \"interpretation\",\n    \"next_step\"\n  ]\n}\n```\n\nAll interactions
        will be structured in the following way, with the appropriate values filled
        in.\n## Input values\n```json\n{input_values}\n```\n## Output values\nRespond
        exclusively with the output schema fields in the json block below.\n```json\n{output_values}\n```\n\nIn
        adhering to this structure, your objective is: Process the observation from
        a tool and decide what to do next."},{"role":"user","content":"## Input Values\n```json\n{\n  \"input_context\":
        \"{\\\"_type\\\":\\\"AnonymousStruct\\\",\\\"question\\\":\\\"What month is
        my birthday in?\\\"}\",\n  \"history\": [\n    {\n      \"step\": 1,\n      \"thought\":
        \"I need to determine the user''s birthday month. Since there is no history
        yet, I should store the question they asked about their birthday month in
        memory for future reference or retrieval.\",\n      \"action\": \"memory_store\",\n      \"action_input\":
        {\n        \"key\": \"birthday_question\",\n        \"value\": \"What month
        is my birthday in?\"\n      },\n      \"observation\": \"Stored memory ''birthday_question''
        successfully\"\n    }\n  ],\n  \"observation\": \"Stored memory ''birthday_question''
        successfully\"\n}\n```\n\nRespond with the corresponding output schema fields
        wrapped in a ```json ``` block,\nstarting with the heading `## Output values`."}],"temperature":1.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.22.1
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '4293'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 02 Oct 2025 20:22:05 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - "<OPENAI_ORGANIZATION>"
      Openai-Processing-Ms:
      - '894'
      Openai-Project:
      - proj_n52OL5vlzVaXGnYDaGWmVX5F
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '909'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9993'
      X-Ratelimit-Remaining-Tokens:
      - '199051'
      X-Ratelimit-Reset-Requests:
      - 52.078s
      X-Ratelimit-Reset-Tokens:
      - 284ms
      X-Request-Id:
      - "<REQUEST_ID>"
      X-Openai-Proxy-Wasm:
      - v0.1
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=<REDACTED>
      - _cfuvid=<REDACTED>
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 9886e8e4a9840edf-EWR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-CMK6OFRxt49OiL8f9vGJRDg76M1nY",
          "object": "chat.completion",
          "created": 1759436524,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"interpretation\": \"The user's question about their birthday month has been successfully stored in memory.\",\n  \"next_step\": \"continue\"\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 854,
            "completion_tokens": 38,
            "total_tokens": 892,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_560af6e559"
        }
  recorded_at: Thu, 02 Oct 2025 20:22:05 GMT
- request:
    method: post
    uri: https://collector.newrelic.com/agent_listener/invoke_raw_method?license_key=<NEW_RELIC_LICENSE_KEY>&marshal_format=json&method=log_event_data&protocol_version=17&run_id=BU15KT787zQsADvrtB0vtKZo3t8kAAEBAAAnIQEAAJG9AgQfPOcaAwAGOS4yMS4wAAlzaW1iYS5sYW4AB0RTUHkucmI
    body:
      encoding: UTF-8
      string: '[{"common":{"attributes":{"entity.name":"DSPy.rb","hostname":"simba.lan","entity.guid":"MzkyNjk2NHxBUE18QVBQTElDQVRJT058NTI0MDg1MDE4"}},"logs":[{"level":"INFO","timestamp":1759436522218.643,"message":"trace_id=\"0faa02b5-93b9-44ef-bf1c-b2df1bc3eca3\"
        otel_span_stack=[] input_tokens=2152 output_tokens=75 total_tokens=2227 gen_ai.system=\"openai\"
        gen_ai.request.model=\"gpt-4o-mini\" dspy.signature=nil event=\"lm.tokens\"\n"},{"level":"INFO","timestamp":1759436524156.457,"message":"trace_id=\"0faa02b5-93b9-44ef-bf1c-b2df1bc3eca3\"
        otel_span_stack=[] input_tokens=2057 output_tokens=86 total_tokens=2143 gen_ai.system=\"openai\"
        gen_ai.request.model=\"gpt-4o-mini\" dspy.signature=nil event=\"lm.tokens\"\n"},{"level":"INFO","timestamp":1759436525204.067,"message":"trace_id=\"0faa02b5-93b9-44ef-bf1c-b2df1bc3eca3\"
        otel_span_stack=[] input_tokens=854 output_tokens=38 total_tokens=892 gen_ai.system=\"openai\"
        gen_ai.request.model=\"gpt-4o-mini\" dspy.signature=nil event=\"lm.tokens\"\n"},{"level":"INFO","timestamp":1759436525204.561,"message":"trace_id=\"0faa02b5-93b9-44ef-bf1c-b2df1bc3eca3\"
        otel_span_stack=[] react.iteration=1 react.thought=\"I need to determine the
        user''s birthday month. Since there is no history yet, I should store the
        question they asked about their birthday month in memory for future reference
        or retrieval.\" react.action=\"memory_store\" react.action_input={\"key\"=>\"birthday_question\",
        \"value\"=>\"What month is my birthday in?\"} react.observation=\"Stored memory
        ''birthday_question'' successfully\" react.tools_used=[\"memory_store\"] event=\"react.iteration_complete\"\n"}]}]'
    headers:
      Content-Encoding:
      - identity
      Host:
      - collector.newrelic.com
      Nr-Utilizationmetadata:
      - AQICFgAJc2ltYmEubGFuFwAJc2ltYmEubGFu
      Nr-Utilizationextra:
      - AQARAAUAAAAIAABgAA
      Nr-Session:
      - BU15KT787zQsADvrtB0vtKZo3t8kAAEBAAAnIQEAAJG9AgQfPOcaAwAGOS4yMS4wAAlzaW1iYS5sYW4AB0RTUHkucmI
      Nr-Agenttags:
      - AX2uHIkGAAlhY2NvdW50SWQABzM5MjY5NjQAEHRydXN0ZWRBY2NvdW50SWQABzM5MjY5NjQAB2FjY291bnQAD0FjY291bnQgMzkyNjk2NA
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - NewRelic-RubyAgent/9.21.0 (ruby 3.3.6 arm64-darwin23) zlib/1.2.12
      Content-Type:
      - application/octet-stream
  response:
    status:
      code: 202
      message: ''
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Type:
      - application/json; charset=UTF-8
      X-Envoy-Upstream-Service-Time:
      - '0'
      Date:
      - Thu, 02 Oct 2025 20:22:06 GMT
      Server:
      - envoy
      Nr-Rate-Limited:
      - allowed
      X-Served-By:
      - cache-iad-kcgs7200146-IAD
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Thu, 02 Oct 2025 20:22:06 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"input_context\": {\n      \"type\":
        \"string\",\n      \"description\": \"Serialized representation of all input
        fields\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"_type\":
        {\n            \"type\": \"string\",\n            \"const\": \"HistoryEntry\"\n          },\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action_input\":
        {\n            \"oneOf\": [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              },\n              {\n                \"type\":
        \"null\"\n              }\n            ],\n            \"description\": \"Union
        of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        \"string\"\n          }\n        },\n        \"required\": [\n          \"_type\",\n          \"step\",\n          \"observation\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts and actions, including observations from tools.\"\n    },\n    \"available_tools\":
        {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"_type\": {\n            \"type\": \"string\",\n            \"const\":
        \"AvailableTool\"\n          },\n          \"name\": {\n            \"type\":
        \"string\"\n          },\n          \"description\": {\n            \"type\":
        \"string\"\n          },\n          \"schema\": {\n            \"type\": \"object\",\n            \"propertyNames\":
        {\n              \"type\": \"string\"\n            },\n            \"additionalProperties\":
        {\n              \"type\": \"string\"\n            },\n            \"description\":
        \"A mapping where keys are strings and values are strings\"\n          }\n        },\n        \"required\":
        [\n          \"_type\",\n          \"name\",\n          \"description\",\n          \"schema\"\n        ],\n        \"description\":
        \"DSPy::ReAct::AvailableTool struct\"\n      },\n      \"description\": \"Array
        of available tools with their JSON schemas.\"\n    }\n  },\n  \"required\":
        [\n    \"input_context\",\n    \"history\",\n    \"available_tools\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"thought\": {\n      \"type\": \"string\",\n      \"description\":
        \"Reasoning about what to do next, considering the history and observations.\"\n    },\n    \"action\":
        {\n      \"type\": \"string\",\n      \"enum\": [\n        \"memory_store\",\n        \"memory_retrieve\",\n        \"memory_search\",\n        \"memory_list\",\n        \"memory_update\",\n        \"memory_delete\",\n        \"memory_clear\",\n        \"memory_count\",\n        \"memory_get_metadata\",\n        \"finish\"\n      ],\n      \"description\":
        \"The action to take. MUST be one of the tool names listed in `available_tools`
        input, or the literal string \\\"finish\\\" to provide the final answer.\"\n    },\n    \"action_input\":
        {\n      \"type\": \"string\",\n      \"description\": \"Input for the chosen
        action. If action is a tool name, this MUST be a JSON object matching the
        tool''s schema. If action is \\\"finish\\\", this field MUST contain the final
        result based on processing the input data.\"\n    }\n  },\n  \"required\":
        [\n    \"thought\",\n    \"action\",\n    \"action_input\"\n  ]\n}\n```\n\nAll
        interactions will be structured in the following way, with the appropriate
        values filled in.\n## Input values\n```json\n{input_values}\n```\n## Output
        values\nRespond exclusively with the output schema fields in the json block
        below.\n```json\n{output_values}\n```\n\nIn adhering to this structure, your
        objective is: Generate a thought about what to do next to process the given
        inputs."},{"role":"user","content":"## Input Values\n```json\n{\n  \"input_context\":
        \"{\\\"_type\\\":\\\"AnonymousStruct\\\",\\\"question\\\":\\\"What month is
        my birthday in?\\\"}\",\n  \"history\": [\n    {\n      \"step\": 1,\n      \"thought\":
        \"I need to determine the user''s birthday month. Since there is no history
        yet, I should store the question they asked about their birthday month in
        memory for future reference or retrieval.\",\n      \"action\": \"memory_store\",\n      \"action_input\":
        {\n        \"key\": \"birthday_question\",\n        \"value\": \"What month
        is my birthday in?\"\n      },\n      \"observation\": \"Stored memory ''birthday_question''
        successfully\"\n    }\n  ],\n  \"available_tools\": [\n    {\n      \"name\":
        \"memory_store\",\n      \"description\": \"Store a key-value pair in memory
        with optional tags\",\n      \"schema\": {\n        \"name\": \"memory_store\",\n        \"description\":
        \"Store a key-value pair in memory with optional tags\",\n        \"parameters\":
        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"key\":
        {\n              \"type\": \"string\",\n              \"description\": \"Parameter
        key\"\n            },\n            \"value\": {\n              \"type\": \"string\",\n              \"description\":
        \"Parameter value\"\n            },\n            \"tags\": {\n              \"type\":
        [\n                \"array\",\n                \"null\"\n              ],\n              \"items\":
        {\n                \"type\": \"string\"\n              },\n              \"description\":
        \"Parameter tags (optional)\"\n            }\n          },\n          \"required\":
        [\n            \"key\",\n            \"value\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_retrieve\",\n      \"description\": \"Retrieve a value by key from
        memory\",\n      \"schema\": {\n        \"name\": \"memory_retrieve\",\n        \"description\":
        \"Retrieve a value by key from memory\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {\n            \"key\": {\n              \"type\":
        \"string\",\n              \"description\": \"Parameter key\"\n            }\n          },\n          \"required\":
        [\n            \"key\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_search\",\n      \"description\": \"Search memories by pattern in
        keys and/or values\",\n      \"schema\": {\n        \"name\": \"memory_search\",\n        \"description\":
        \"Search memories by pattern in keys and/or values\",\n        \"parameters\":
        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"pattern\":
        {\n              \"type\": \"string\",\n              \"description\": \"Parameter
        pattern\"\n            },\n            \"in_keys\": {\n              \"type\":
        \"boolean\",\n              \"description\": \"Parameter in_keys (optional)\"\n            },\n            \"in_values\":
        {\n              \"type\": \"boolean\",\n              \"description\": \"Parameter
        in_values (optional)\"\n            }\n          },\n          \"required\":
        [\n            \"pattern\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_list\",\n      \"description\": \"List all stored memory keys\",\n      \"schema\":
        {\n        \"name\": \"memory_list\",\n        \"description\": \"List all
        stored memory keys\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\":
        {},\n          \"required\": []\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_update\",\n      \"description\": \"Update an existing memory value\",\n      \"schema\":
        {\n        \"name\": \"memory_update\",\n        \"description\": \"Update
        an existing memory value\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {\n            \"key\": {\n              \"type\":
        \"string\",\n              \"description\": \"Parameter key\"\n            },\n            \"value\":
        {\n              \"type\": \"string\",\n              \"description\": \"Parameter
        value\"\n            }\n          },\n          \"required\": [\n            \"key\",\n            \"value\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_delete\",\n      \"description\": \"Delete a memory by key\",\n      \"schema\":
        {\n        \"name\": \"memory_delete\",\n        \"description\": \"Delete
        a memory by key\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\":
        {\n            \"key\": {\n              \"type\": \"string\",\n              \"description\":
        \"Parameter key\"\n            }\n          },\n          \"required\": [\n            \"key\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_clear\",\n      \"description\": \"Clear all stored memories\",\n      \"schema\":
        {\n        \"name\": \"memory_clear\",\n        \"description\": \"Clear all
        stored memories\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\":
        {},\n          \"required\": []\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_count\",\n      \"description\": \"Get the count of stored memories\",\n      \"schema\":
        {\n        \"name\": \"memory_count\",\n        \"description\": \"Get the
        count of stored memories\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {},\n          \"required\": []\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_get_metadata\",\n      \"description\": \"Get metadata for a specific
        memory\",\n      \"schema\": {\n        \"name\": \"memory_get_metadata\",\n        \"description\":
        \"Get metadata for a specific memory\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {\n            \"key\": {\n              \"type\":
        \"string\",\n              \"description\": \"Parameter key\"\n            }\n          },\n          \"required\":
        [\n            \"key\"\n          ]\n        }\n      }\n    }\n  ]\n}\n```\n\nRespond
        with the corresponding output schema fields wrapped in a ```json ``` block,\nstarting
        with the heading `## Output values`."}],"temperature":1.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.22.1
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '11205'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 02 Oct 2025 20:22:07 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - "<OPENAI_ORGANIZATION>"
      Openai-Processing-Ms:
      - '1809'
      Openai-Project:
      - proj_n52OL5vlzVaXGnYDaGWmVX5F
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '1824'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9994'
      X-Ratelimit-Remaining-Tokens:
      - '197501'
      X-Ratelimit-Reset-Requests:
      - 51.031s
      X-Ratelimit-Reset-Tokens:
      - 749ms
      X-Request-Id:
      - "<REQUEST_ID>"
      X-Openai-Proxy-Wasm:
      - v0.1
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=<REDACTED>
      - _cfuvid=<REDACTED>
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 9886e8eb3ca90edf-EWR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-CMK6PKdCBPtvLzBvQwpcrmIJslKve",
          "object": "chat.completion",
          "created": 1759436525,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"thought\": \"I have successfully stored the user's question about their birthday month. The next step is to retrieve this information from memory when needed, as it will be relevant for providing an accurate answer.\",\n  \"action\": \"memory_retrieve\",\n  \"action_input\": \"{\\\"key\\\":\\\"birthday_question\\\"}\"\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 2160,
            "completion_tokens": 72,
            "total_tokens": 2232,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_560af6e559"
        }
  recorded_at: Thu, 02 Oct 2025 20:22:07 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"input_context\": {\n      \"type\":
        \"string\",\n      \"description\": \"Serialized representation of all input
        fields\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"_type\":
        {\n            \"type\": \"string\",\n            \"const\": \"HistoryEntry\"\n          },\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action_input\":
        {\n            \"oneOf\": [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              },\n              {\n                \"type\":
        \"null\"\n              }\n            ],\n            \"description\": \"Union
        of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        \"string\"\n          }\n        },\n        \"required\": [\n          \"_type\",\n          \"step\",\n          \"observation\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts, actions, and observations.\"\n    },\n    \"observation\": {\n      \"type\":
        \"string\",\n      \"description\": \"The result from the last action\"\n    }\n  },\n  \"required\":
        [\n    \"input_context\",\n    \"history\",\n    \"observation\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"interpretation\": {\n      \"type\":
        \"string\",\n      \"description\": \"Interpretation of the observation\"\n    },\n    \"next_step\":
        {\n      \"type\": \"string\",\n      \"enum\": [\n        \"continue\",\n        \"finish\"\n      ],\n      \"description\":
        \"What to do next: ''#<DSPy::NextStep::Continue>'' or ''#<DSPy::NextStep::Finish>''\"\n    }\n  },\n  \"required\":
        [\n    \"interpretation\",\n    \"next_step\"\n  ]\n}\n```\n\nAll interactions
        will be structured in the following way, with the appropriate values filled
        in.\n## Input values\n```json\n{input_values}\n```\n## Output values\nRespond
        exclusively with the output schema fields in the json block below.\n```json\n{output_values}\n```\n\nIn
        adhering to this structure, your objective is: Process the observation from
        a tool and decide what to do next."},{"role":"user","content":"## Input Values\n```json\n{\n  \"input_context\":
        \"{\\\"_type\\\":\\\"AnonymousStruct\\\",\\\"question\\\":\\\"What month is
        my birthday in?\\\"}\",\n  \"history\": [\n    {\n      \"step\": 1,\n      \"thought\":
        \"I need to determine the user''s birthday month. Since there is no history
        yet, I should store the question they asked about their birthday month in
        memory for future reference or retrieval.\",\n      \"action\": \"memory_store\",\n      \"action_input\":
        {\n        \"key\": \"birthday_question\",\n        \"value\": \"What month
        is my birthday in?\"\n      },\n      \"observation\": \"Stored memory ''birthday_question''
        successfully\"\n    },\n    {\n      \"step\": 2,\n      \"thought\": \"I
        have successfully stored the user''s question about their birthday month.
        The next step is to retrieve this information from memory when needed, as
        it will be relevant for providing an accurate answer.\",\n      \"action\":
        \"memory_retrieve\",\n      \"action_input\": \"{\\\"key\\\":\\\"birthday_question\\\"}\",\n      \"observation\":
        \"What month is my birthday in?\"\n    }\n  ],\n  \"observation\": \"What
        month is my birthday in?\"\n}\n```\n\nRespond with the corresponding output
        schema fields wrapped in a ```json ``` block,\nstarting with the heading `##
        Output values`."}],"temperature":1.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.22.1
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '4707'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 02 Oct 2025 20:22:08 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - "<OPENAI_ORGANIZATION>"
      Openai-Processing-Ms:
      - '1182'
      Openai-Project:
      - proj_n52OL5vlzVaXGnYDaGWmVX5F
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '1204'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9992'
      X-Ratelimit-Remaining-Tokens:
      - '198955'
      X-Ratelimit-Reset-Requests:
      - 1m6.397s
      X-Ratelimit-Reset-Tokens:
      - 313ms
      X-Request-Id:
      - "<REQUEST_ID>"
      X-Openai-Proxy-Wasm:
      - v0.1
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=<REDACTED>
      - _cfuvid=<REDACTED>
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 9886e8f7085e0edf-EWR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-CMK6RNk310KQ1HvlQWQFiTCyKnK5f",
          "object": "chat.completion",
          "created": 1759436527,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"interpretation\": \"The user is inquiring about the month of their birthday. This suggests they might be looking for information related to birthdays or seasonal events.\",\n  \"next_step\": \"finish\"\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 939,
            "completion_tokens": 51,
            "total_tokens": 990,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_560af6e559"
        }
  recorded_at: Thu, 02 Oct 2025 20:22:08 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"input_context\": {\n      \"type\":
        \"string\",\n      \"description\": \"Serialized representation of all input
        fields\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"_type\":
        {\n            \"type\": \"string\",\n            \"const\": \"HistoryEntry\"\n          },\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action_input\":
        {\n            \"oneOf\": [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              },\n              {\n                \"type\":
        \"null\"\n              }\n            ],\n            \"description\": \"Union
        of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        \"string\"\n          }\n        },\n        \"required\": [\n          \"_type\",\n          \"step\",\n          \"observation\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts and actions, including observations from tools.\"\n    },\n    \"available_tools\":
        {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"_type\": {\n            \"type\": \"string\",\n            \"const\":
        \"AvailableTool\"\n          },\n          \"name\": {\n            \"type\":
        \"string\"\n          },\n          \"description\": {\n            \"type\":
        \"string\"\n          },\n          \"schema\": {\n            \"type\": \"object\",\n            \"propertyNames\":
        {\n              \"type\": \"string\"\n            },\n            \"additionalProperties\":
        {\n              \"type\": \"string\"\n            },\n            \"description\":
        \"A mapping where keys are strings and values are strings\"\n          }\n        },\n        \"required\":
        [\n          \"_type\",\n          \"name\",\n          \"description\",\n          \"schema\"\n        ],\n        \"description\":
        \"DSPy::ReAct::AvailableTool struct\"\n      },\n      \"description\": \"Array
        of available tools with their JSON schemas.\"\n    }\n  },\n  \"required\":
        [\n    \"input_context\",\n    \"history\",\n    \"available_tools\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"thought\": {\n      \"type\": \"string\",\n      \"description\":
        \"Reasoning about what to do next, considering the history and observations.\"\n    },\n    \"action\":
        {\n      \"type\": \"string\",\n      \"enum\": [\n        \"memory_store\",\n        \"memory_retrieve\",\n        \"memory_search\",\n        \"memory_list\",\n        \"memory_update\",\n        \"memory_delete\",\n        \"memory_clear\",\n        \"memory_count\",\n        \"memory_get_metadata\",\n        \"finish\"\n      ],\n      \"description\":
        \"The action to take. MUST be one of the tool names listed in `available_tools`
        input, or the literal string \\\"finish\\\" to provide the final answer.\"\n    },\n    \"action_input\":
        {\n      \"type\": \"string\",\n      \"description\": \"Input for the chosen
        action. If action is a tool name, this MUST be a JSON object matching the
        tool''s schema. If action is \\\"finish\\\", this field MUST contain the final
        result based on processing the input data.\"\n    }\n  },\n  \"required\":
        [\n    \"thought\",\n    \"action\",\n    \"action_input\"\n  ]\n}\n```\n\nAll
        interactions will be structured in the following way, with the appropriate
        values filled in.\n## Input values\n```json\n{input_values}\n```\n## Output
        values\nRespond exclusively with the output schema fields in the json block
        below.\n```json\n{output_values}\n```\n\nIn adhering to this structure, your
        objective is: Generate a thought about what to do next to process the given
        inputs."},{"role":"user","content":"## Input Values\n```json\n{\n  \"input_context\":
        \"{\\\"_type\\\":\\\"AnonymousStruct\\\",\\\"question\\\":\\\"What month is
        my birthday in?\\\"}\",\n  \"history\": [\n    {\n      \"step\": 1,\n      \"thought\":
        \"I need to determine the user''s birthday month. Since there is no history
        yet, I should store the question they asked about their birthday month in
        memory for future reference or retrieval.\",\n      \"action\": \"memory_store\",\n      \"action_input\":
        {\n        \"key\": \"birthday_question\",\n        \"value\": \"What month
        is my birthday in?\"\n      },\n      \"observation\": \"Stored memory ''birthday_question''
        successfully\"\n    },\n    {\n      \"step\": 2,\n      \"thought\": \"I
        have successfully stored the user''s question about their birthday month.
        The next step is to retrieve this information from memory when needed, as
        it will be relevant for providing an accurate answer.\",\n      \"action\":
        \"memory_retrieve\",\n      \"action_input\": \"{\\\"key\\\":\\\"birthday_question\\\"}\",\n      \"observation\":
        \"What month is my birthday in?\"\n    }\n  ],\n  \"available_tools\": [\n    {\n      \"name\":
        \"memory_store\",\n      \"description\": \"Store a key-value pair in memory
        with optional tags\",\n      \"schema\": {\n        \"name\": \"memory_store\",\n        \"description\":
        \"Store a key-value pair in memory with optional tags\",\n        \"parameters\":
        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"key\":
        {\n              \"type\": \"string\",\n              \"description\": \"Parameter
        key\"\n            },\n            \"value\": {\n              \"type\": \"string\",\n              \"description\":
        \"Parameter value\"\n            },\n            \"tags\": {\n              \"type\":
        [\n                \"array\",\n                \"null\"\n              ],\n              \"items\":
        {\n                \"type\": \"string\"\n              },\n              \"description\":
        \"Parameter tags (optional)\"\n            }\n          },\n          \"required\":
        [\n            \"key\",\n            \"value\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_retrieve\",\n      \"description\": \"Retrieve a value by key from
        memory\",\n      \"schema\": {\n        \"name\": \"memory_retrieve\",\n        \"description\":
        \"Retrieve a value by key from memory\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {\n            \"key\": {\n              \"type\":
        \"string\",\n              \"description\": \"Parameter key\"\n            }\n          },\n          \"required\":
        [\n            \"key\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_search\",\n      \"description\": \"Search memories by pattern in
        keys and/or values\",\n      \"schema\": {\n        \"name\": \"memory_search\",\n        \"description\":
        \"Search memories by pattern in keys and/or values\",\n        \"parameters\":
        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"pattern\":
        {\n              \"type\": \"string\",\n              \"description\": \"Parameter
        pattern\"\n            },\n            \"in_keys\": {\n              \"type\":
        \"boolean\",\n              \"description\": \"Parameter in_keys (optional)\"\n            },\n            \"in_values\":
        {\n              \"type\": \"boolean\",\n              \"description\": \"Parameter
        in_values (optional)\"\n            }\n          },\n          \"required\":
        [\n            \"pattern\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_list\",\n      \"description\": \"List all stored memory keys\",\n      \"schema\":
        {\n        \"name\": \"memory_list\",\n        \"description\": \"List all
        stored memory keys\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\":
        {},\n          \"required\": []\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_update\",\n      \"description\": \"Update an existing memory value\",\n      \"schema\":
        {\n        \"name\": \"memory_update\",\n        \"description\": \"Update
        an existing memory value\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {\n            \"key\": {\n              \"type\":
        \"string\",\n              \"description\": \"Parameter key\"\n            },\n            \"value\":
        {\n              \"type\": \"string\",\n              \"description\": \"Parameter
        value\"\n            }\n          },\n          \"required\": [\n            \"key\",\n            \"value\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_delete\",\n      \"description\": \"Delete a memory by key\",\n      \"schema\":
        {\n        \"name\": \"memory_delete\",\n        \"description\": \"Delete
        a memory by key\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\":
        {\n            \"key\": {\n              \"type\": \"string\",\n              \"description\":
        \"Parameter key\"\n            }\n          },\n          \"required\": [\n            \"key\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_clear\",\n      \"description\": \"Clear all stored memories\",\n      \"schema\":
        {\n        \"name\": \"memory_clear\",\n        \"description\": \"Clear all
        stored memories\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\":
        {},\n          \"required\": []\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_count\",\n      \"description\": \"Get the count of stored memories\",\n      \"schema\":
        {\n        \"name\": \"memory_count\",\n        \"description\": \"Get the
        count of stored memories\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {},\n          \"required\": []\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_get_metadata\",\n      \"description\": \"Get metadata for a specific
        memory\",\n      \"schema\": {\n        \"name\": \"memory_get_metadata\",\n        \"description\":
        \"Get metadata for a specific memory\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {\n            \"key\": {\n              \"type\":
        \"string\",\n              \"description\": \"Parameter key\"\n            }\n          },\n          \"required\":
        [\n            \"key\"\n          ]\n        }\n      }\n    }\n  ]\n}\n```\n\nRespond
        with the corresponding output schema fields wrapped in a ```json ``` block,\nstarting
        with the heading `## Output values`."}],"temperature":1.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.22.1
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '11636'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 02 Oct 2025 20:22:11 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - "<OPENAI_ORGANIZATION>"
      Openai-Processing-Ms:
      - '2357'
      Openai-Project:
      - proj_n52OL5vlzVaXGnYDaGWmVX5F
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '2572'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9991'
      X-Ratelimit-Remaining-Tokens:
      - '197403'
      X-Ratelimit-Reset-Requests:
      - 1m13.253s
      X-Ratelimit-Reset-Tokens:
      - 779ms
      X-Request-Id:
      - "<REQUEST_ID>"
      X-Openai-Proxy-Wasm:
      - v0.1
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=<REDACTED>
      - _cfuvid=<REDACTED>
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 9886e8ff2a7f0edf-EWR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-CMK6ThLa0iDYVamKQbg4ofiygtBET",
          "object": "chat.completion",
          "created": 1759436529,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"thought\": \"I have retrieved the user's question about their birthday month. Now, I should clarify when their birthday is by asking them directly, since I need the specific month to provide a precise answer.\",\n  \"action\": \"memory_store\",\n  \"action_input\": {\n    \"key\": \"birthday_month\",\n    \"value\": \"Please tell me what month your birthday is in.\"\n  }\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 2246,
            "completion_tokens": 91,
            "total_tokens": 2337,
            "prompt_tokens_details": {
              "cached_tokens": 1024,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_560af6e559"
        }
  recorded_at: Thu, 02 Oct 2025 20:22:11 GMT
- request:
    method: post
    uri: https://collector.newrelic.com/agent_listener/invoke_raw_method?license_key=<NEW_RELIC_LICENSE_KEY>&marshal_format=json&method=log_event_data&protocol_version=17&run_id=BU15KT787zQsADvrtB0vtKZo3t8kAAEBAAAnIQEAAJG9AgQfPOcaAwAGOS4yMS4wAAlzaW1iYS5sYW4AB0RTUHkucmI
    body:
      encoding: UTF-8
      string: '[{"common":{"attributes":{"entity.name":"DSPy.rb","hostname":"simba.lan","entity.guid":"MzkyNjk2NHxBUE18QVBQTElDQVRJT058NTI0MDg1MDE4"}},"logs":[{"level":"INFO","timestamp":1759436527098.26,"message":"trace_id=\"0faa02b5-93b9-44ef-bf1c-b2df1bc3eca3\"
        otel_span_stack=[] input_tokens=2160 output_tokens=72 total_tokens=2232 gen_ai.system=\"openai\"
        gen_ai.request.model=\"gpt-4o-mini\" dspy.signature=nil event=\"lm.tokens\"\n"},{"level":"INFO","timestamp":1759436528391.177,"message":"trace_id=\"0faa02b5-93b9-44ef-bf1c-b2df1bc3eca3\"
        otel_span_stack=[] input_tokens=939 output_tokens=51 total_tokens=990 gen_ai.system=\"openai\"
        gen_ai.request.model=\"gpt-4o-mini\" dspy.signature=nil event=\"lm.tokens\"\n"},{"level":"INFO","timestamp":1759436531495.6548,"message":"trace_id=\"0faa02b5-93b9-44ef-bf1c-b2df1bc3eca3\"
        otel_span_stack=[] input_tokens=2246 output_tokens=91 total_tokens=2337 gen_ai.system=\"openai\"
        gen_ai.request.model=\"gpt-4o-mini\" dspy.signature=nil event=\"lm.tokens\"\n"}]}]'
    headers:
      Content-Encoding:
      - identity
      Host:
      - collector.newrelic.com
      Nr-Utilizationmetadata:
      - AQICFgAJc2ltYmEubGFuFwAJc2ltYmEubGFu
      Nr-Utilizationextra:
      - AQARAAUAAAAIAABgAA
      Nr-Session:
      - BU15KT787zQsADvrtB0vtKZo3t8kAAEBAAAnIQEAAJG9AgQfPOcaAwAGOS4yMS4wAAlzaW1iYS5sYW4AB0RTUHkucmI
      Nr-Agenttags:
      - AX2uHIkGAAlhY2NvdW50SWQABzM5MjY5NjQAEHRydXN0ZWRBY2NvdW50SWQABzM5MjY5NjQAB2FjY291bnQAD0FjY291bnQgMzkyNjk2NA
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - NewRelic-RubyAgent/9.21.0 (ruby 3.3.6 arm64-darwin23) zlib/1.2.12
      Content-Type:
      - application/octet-stream
  response:
    status:
      code: 202
      message: ''
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Type:
      - application/json; charset=UTF-8
      X-Envoy-Upstream-Service-Time:
      - '1'
      Date:
      - Thu, 02 Oct 2025 20:22:11 GMT
      Server:
      - envoy
      Nr-Rate-Limited:
      - allowed
      X-Served-By:
      - cache-iad-kcgs7200156-IAD
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Thu, 02 Oct 2025 20:22:11 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"input_context\": {\n      \"type\":
        \"string\",\n      \"description\": \"Serialized representation of all input
        fields\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"_type\":
        {\n            \"type\": \"string\",\n            \"const\": \"HistoryEntry\"\n          },\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action_input\":
        {\n            \"oneOf\": [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              },\n              {\n                \"type\":
        \"null\"\n              }\n            ],\n            \"description\": \"Union
        of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        \"string\"\n          }\n        },\n        \"required\": [\n          \"_type\",\n          \"step\",\n          \"observation\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts and actions, including observations from tools.\"\n    },\n    \"available_tools\":
        {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"_type\": {\n            \"type\": \"string\",\n            \"const\":
        \"AvailableTool\"\n          },\n          \"name\": {\n            \"type\":
        \"string\"\n          },\n          \"description\": {\n            \"type\":
        \"string\"\n          },\n          \"schema\": {\n            \"type\": \"object\",\n            \"propertyNames\":
        {\n              \"type\": \"string\"\n            },\n            \"additionalProperties\":
        {\n              \"type\": \"string\"\n            },\n            \"description\":
        \"A mapping where keys are strings and values are strings\"\n          }\n        },\n        \"required\":
        [\n          \"_type\",\n          \"name\",\n          \"description\",\n          \"schema\"\n        ],\n        \"description\":
        \"DSPy::ReAct::AvailableTool struct\"\n      },\n      \"description\": \"Array
        of available tools with their JSON schemas.\"\n    }\n  },\n  \"required\":
        [\n    \"input_context\",\n    \"history\",\n    \"available_tools\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"thought\": {\n      \"type\": \"string\",\n      \"description\":
        \"Reasoning about what to do next, considering the history and observations.\"\n    },\n    \"action\":
        {\n      \"type\": \"string\",\n      \"enum\": [\n        \"memory_store\",\n        \"memory_retrieve\",\n        \"memory_search\",\n        \"memory_list\",\n        \"memory_update\",\n        \"memory_delete\",\n        \"memory_clear\",\n        \"memory_count\",\n        \"memory_get_metadata\",\n        \"finish\"\n      ],\n      \"description\":
        \"The action to take. MUST be one of the tool names listed in `available_tools`
        input, or the literal string \\\"finish\\\" to provide the final answer.\"\n    },\n    \"action_input\":
        {\n      \"type\": \"string\",\n      \"description\": \"Input for the chosen
        action. If action is a tool name, this MUST be a JSON object matching the
        tool''s schema. If action is \\\"finish\\\", this field MUST contain the final
        result based on processing the input data.\"\n    }\n  },\n  \"required\":
        [\n    \"thought\",\n    \"action\",\n    \"action_input\"\n  ]\n}\n```\n\nAll
        interactions will be structured in the following way, with the appropriate
        values filled in.\n## Input values\n```json\n{input_values}\n```\n## Output
        values\nRespond exclusively with the output schema fields in the json block
        below.\n```json\n{output_values}\n```\n\nIn adhering to this structure, your
        objective is: Generate a thought about what to do next to process the given
        inputs."},{"role":"user","content":"## Input Values\n```json\n{\n  \"input_context\":
        \"{\\\"_type\\\":\\\"AnonymousStruct\\\",\\\"question\\\":\\\"Can you tell
        me about the metadata for my birthday information?\\\"}\",\n  \"history\":
        [],\n  \"available_tools\": [\n    {\n      \"name\": \"memory_store\",\n      \"description\":
        \"Store a key-value pair in memory with optional tags\",\n      \"schema\":
        {\n        \"name\": \"memory_store\",\n        \"description\": \"Store a
        key-value pair in memory with optional tags\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {\n            \"key\": {\n              \"type\":
        \"string\",\n              \"description\": \"Parameter key\"\n            },\n            \"value\":
        {\n              \"type\": \"string\",\n              \"description\": \"Parameter
        value\"\n            },\n            \"tags\": {\n              \"type\":
        [\n                \"array\",\n                \"null\"\n              ],\n              \"items\":
        {\n                \"type\": \"string\"\n              },\n              \"description\":
        \"Parameter tags (optional)\"\n            }\n          },\n          \"required\":
        [\n            \"key\",\n            \"value\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_retrieve\",\n      \"description\": \"Retrieve a value by key from
        memory\",\n      \"schema\": {\n        \"name\": \"memory_retrieve\",\n        \"description\":
        \"Retrieve a value by key from memory\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {\n            \"key\": {\n              \"type\":
        \"string\",\n              \"description\": \"Parameter key\"\n            }\n          },\n          \"required\":
        [\n            \"key\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_search\",\n      \"description\": \"Search memories by pattern in
        keys and/or values\",\n      \"schema\": {\n        \"name\": \"memory_search\",\n        \"description\":
        \"Search memories by pattern in keys and/or values\",\n        \"parameters\":
        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"pattern\":
        {\n              \"type\": \"string\",\n              \"description\": \"Parameter
        pattern\"\n            },\n            \"in_keys\": {\n              \"type\":
        \"boolean\",\n              \"description\": \"Parameter in_keys (optional)\"\n            },\n            \"in_values\":
        {\n              \"type\": \"boolean\",\n              \"description\": \"Parameter
        in_values (optional)\"\n            }\n          },\n          \"required\":
        [\n            \"pattern\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_list\",\n      \"description\": \"List all stored memory keys\",\n      \"schema\":
        {\n        \"name\": \"memory_list\",\n        \"description\": \"List all
        stored memory keys\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\":
        {},\n          \"required\": []\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_update\",\n      \"description\": \"Update an existing memory value\",\n      \"schema\":
        {\n        \"name\": \"memory_update\",\n        \"description\": \"Update
        an existing memory value\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {\n            \"key\": {\n              \"type\":
        \"string\",\n              \"description\": \"Parameter key\"\n            },\n            \"value\":
        {\n              \"type\": \"string\",\n              \"description\": \"Parameter
        value\"\n            }\n          },\n          \"required\": [\n            \"key\",\n            \"value\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_delete\",\n      \"description\": \"Delete a memory by key\",\n      \"schema\":
        {\n        \"name\": \"memory_delete\",\n        \"description\": \"Delete
        a memory by key\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\":
        {\n            \"key\": {\n              \"type\": \"string\",\n              \"description\":
        \"Parameter key\"\n            }\n          },\n          \"required\": [\n            \"key\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_clear\",\n      \"description\": \"Clear all stored memories\",\n      \"schema\":
        {\n        \"name\": \"memory_clear\",\n        \"description\": \"Clear all
        stored memories\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\":
        {},\n          \"required\": []\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_count\",\n      \"description\": \"Get the count of stored memories\",\n      \"schema\":
        {\n        \"name\": \"memory_count\",\n        \"description\": \"Get the
        count of stored memories\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {},\n          \"required\": []\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_get_metadata\",\n      \"description\": \"Get metadata for a specific
        memory\",\n      \"schema\": {\n        \"name\": \"memory_get_metadata\",\n        \"description\":
        \"Get metadata for a specific memory\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {\n            \"key\": {\n              \"type\":
        \"string\",\n              \"description\": \"Parameter key\"\n            }\n          },\n          \"required\":
        [\n            \"key\"\n          ]\n        }\n      }\n    }\n  ]\n}\n```\n\nRespond
        with the corresponding output schema fields wrapped in a ```json ``` block,\nstarting
        with the heading `## Output values`."}],"temperature":1.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.22.1
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '10743'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 02 Oct 2025 20:22:14 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - "<OPENAI_ORGANIZATION>"
      Openai-Processing-Ms:
      - '2952'
      Openai-Project:
      - proj_n52OL5vlzVaXGnYDaGWmVX5F
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '3114'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9999'
      X-Ratelimit-Remaining-Tokens:
      - '197609'
      X-Ratelimit-Reset-Requests:
      - 24h0m0s
      X-Ratelimit-Reset-Tokens:
      - 1m0s
      X-Request-Id:
      - "<REQUEST_ID>"
      X-Openai-Proxy-Wasm:
      - v0.1
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=<REDACTED>
      - _cfuvid=<REDACTED>
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 9886e9128dc60edf-EWR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-CMK6WLUhpZMaiQ3Moro9ICfl12F83",
          "object": "chat.completion",
          "created": 1759436532,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"thought\": \"The user is asking for metadata related to their birthday information. Since no history exists yet, I need to retrieve the relevant memory that likely holds this information. I will use the 'memory_get_metadata' action to fetch the metadata for the birthday key, assuming it exists.\",\n  \"action\": \"memory_get_metadata\",\n  \"action_input\": \"{\\\"key\\\":\\\"birthday\\\"}\"\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 2062,
            "completion_tokens": 89,
            "total_tokens": 2151,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_560af6e559"
        }
  recorded_at: Thu, 02 Oct 2025 20:22:14 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"input_context\": {\n      \"type\":
        \"string\",\n      \"description\": \"Serialized representation of all input
        fields\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"_type\":
        {\n            \"type\": \"string\",\n            \"const\": \"HistoryEntry\"\n          },\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action_input\":
        {\n            \"oneOf\": [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              },\n              {\n                \"type\":
        \"null\"\n              }\n            ],\n            \"description\": \"Union
        of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        \"string\"\n          }\n        },\n        \"required\": [\n          \"_type\",\n          \"step\",\n          \"observation\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts, actions, and observations.\"\n    },\n    \"observation\": {\n      \"type\":
        \"string\",\n      \"description\": \"The result from the last action\"\n    }\n  },\n  \"required\":
        [\n    \"input_context\",\n    \"history\",\n    \"observation\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"interpretation\": {\n      \"type\":
        \"string\",\n      \"description\": \"Interpretation of the observation\"\n    },\n    \"next_step\":
        {\n      \"type\": \"string\",\n      \"enum\": [\n        \"continue\",\n        \"finish\"\n      ],\n      \"description\":
        \"What to do next: ''#<DSPy::NextStep::Continue>'' or ''#<DSPy::NextStep::Finish>''\"\n    }\n  },\n  \"required\":
        [\n    \"interpretation\",\n    \"next_step\"\n  ]\n}\n```\n\nAll interactions
        will be structured in the following way, with the appropriate values filled
        in.\n## Input values\n```json\n{input_values}\n```\n## Output values\nRespond
        exclusively with the output schema fields in the json block below.\n```json\n{output_values}\n```\n\nIn
        adhering to this structure, your objective is: Process the observation from
        a tool and decide what to do next."},{"role":"user","content":"## Input Values\n```json\n{\n  \"input_context\":
        \"{\\\"_type\\\":\\\"AnonymousStruct\\\",\\\"question\\\":\\\"Can you tell
        me about the metadata for my birthday information?\\\"}\",\n  \"history\":
        [\n    {\n      \"step\": 1,\n      \"thought\": \"The user is asking for
        metadata related to their birthday information. Since no history exists yet,
        I need to retrieve the relevant memory that likely holds this information.
        I will use the ''memory_get_metadata'' action to fetch the metadata for the
        birthday key, assuming it exists.\",\n      \"action\": \"memory_get_metadata\",\n      \"action_input\":
        \"{\\\"key\\\":\\\"birthday\\\"}\",\n      \"observation\": {\n        \"created_at\":
        \"2025-10-02 16:21:56 -0400\",\n        \"updated_at\": \"2025-10-02 16:21:56
        -0400\",\n        \"access_count\": 0,\n        \"last_accessed_at\": null,\n        \"tags\":
        [],\n        \"value_length\": 17\n      }\n    }\n  ],\n  \"observation\":
        {\n    \"created_at\": \"2025-10-02 16:21:56 -0400\",\n    \"updated_at\":
        \"2025-10-02 16:21:56 -0400\",\n    \"access_count\": 0,\n    \"last_accessed_at\":
        null,\n    \"tags\": [],\n    \"value_length\": 17\n  }\n}\n```\n\nRespond
        with the corresponding output schema fields wrapped in a ```json ``` block,\nstarting
        with the heading `## Output values`."}],"temperature":1.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.22.1
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '4713'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 02 Oct 2025 20:22:16 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - "<OPENAI_ORGANIZATION>"
      Openai-Processing-Ms:
      - '1120'
      Openai-Project:
      - proj_n52OL5vlzVaXGnYDaGWmVX5F
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '1138'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9990'
      X-Ratelimit-Remaining-Tokens:
      - '198956'
      X-Ratelimit-Reset-Requests:
      - 1m24.702s
      X-Ratelimit-Reset-Tokens:
      - 313ms
      X-Request-Id:
      - "<REQUEST_ID>"
      X-Openai-Proxy-Wasm:
      - v0.1
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=<REDACTED>
      - _cfuvid=<REDACTED>
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 9886e926af190edf-EWR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-CMK6YGWzjMmjGKPpxhCVJJWl7xcRB",
          "object": "chat.completion",
          "created": 1759436534,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"interpretation\": \"The metadata for the birthday information has been successfully retrieved. It includes details such as the creation timestamp, last updated timestamp, access count, and value length.\",\n  \"next_step\": \"finish\"\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 998,
            "completion_tokens": 55,
            "total_tokens": 1053,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_560af6e559"
        }
  recorded_at: Thu, 02 Oct 2025 20:22:16 GMT
- request:
    method: post
    uri: https://collector.newrelic.com/agent_listener/invoke_raw_method?license_key=<NEW_RELIC_LICENSE_KEY>&marshal_format=json&method=log_event_data&protocol_version=17&run_id=BU15KT787zQsADvrtB0vtKZo3t8kAAEBAAAnIQEAAJG9AgQfPOcaAwAGOS4yMS4wAAlzaW1iYS5sYW4AB0RTUHkucmI
    body:
      encoding: UTF-8
      string: '[{"common":{"attributes":{"entity.name":"DSPy.rb","hostname":"simba.lan","entity.guid":"MzkyNjk2NHxBUE18QVBQTElDQVRJT058NTI0MDg1MDE4"}},"logs":[{"level":"INFO","timestamp":1759436534721.9907,"message":"trace_id=\"0faa02b5-93b9-44ef-bf1c-b2df1bc3eca3\"
        otel_span_stack=[] input_tokens=2062 output_tokens=89 total_tokens=2151 gen_ai.system=\"openai\"
        gen_ai.request.model=\"gpt-4o-mini\" dspy.signature=nil event=\"lm.tokens\"\n"},{"level":"INFO","timestamp":1759436536214.601,"message":"trace_id=\"0faa02b5-93b9-44ef-bf1c-b2df1bc3eca3\"
        otel_span_stack=[] input_tokens=998 output_tokens=55 total_tokens=1053 gen_ai.system=\"openai\"
        gen_ai.request.model=\"gpt-4o-mini\" dspy.signature=nil event=\"lm.tokens\"\n"}]}]'
    headers:
      Content-Encoding:
      - identity
      Host:
      - collector.newrelic.com
      Nr-Utilizationmetadata:
      - AQICFgAJc2ltYmEubGFuFwAJc2ltYmEubGFu
      Nr-Utilizationextra:
      - AQARAAUAAAAIAABgAA
      Nr-Session:
      - BU15KT787zQsADvrtB0vtKZo3t8kAAEBAAAnIQEAAJG9AgQfPOcaAwAGOS4yMS4wAAlzaW1iYS5sYW4AB0RTUHkucmI
      Nr-Agenttags:
      - AX2uHIkGAAlhY2NvdW50SWQABzM5MjY5NjQAEHRydXN0ZWRBY2NvdW50SWQABzM5MjY5NjQAB2FjY291bnQAD0FjY291bnQgMzkyNjk2NA
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - NewRelic-RubyAgent/9.21.0 (ruby 3.3.6 arm64-darwin23) zlib/1.2.12
      Content-Type:
      - application/octet-stream
  response:
    status:
      code: 202
      message: ''
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Type:
      - application/json; charset=UTF-8
      X-Envoy-Upstream-Service-Time:
      - '0'
      Date:
      - Thu, 02 Oct 2025 20:22:16 GMT
      Server:
      - envoy
      Nr-Rate-Limited:
      - allowed
      X-Served-By:
      - cache-iad-kcgs7200156-IAD
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Thu, 02 Oct 2025 20:22:16 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"input_context\": {\n      \"type\":
        \"string\",\n      \"description\": \"Serialized representation of all input
        fields\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"_type\":
        {\n            \"type\": \"string\",\n            \"const\": \"HistoryEntry\"\n          },\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action_input\":
        {\n            \"oneOf\": [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              },\n              {\n                \"type\":
        \"null\"\n              }\n            ],\n            \"description\": \"Union
        of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        \"string\"\n          }\n        },\n        \"required\": [\n          \"_type\",\n          \"step\",\n          \"observation\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts and actions, including observations from tools.\"\n    },\n    \"available_tools\":
        {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"_type\": {\n            \"type\": \"string\",\n            \"const\":
        \"AvailableTool\"\n          },\n          \"name\": {\n            \"type\":
        \"string\"\n          },\n          \"description\": {\n            \"type\":
        \"string\"\n          },\n          \"schema\": {\n            \"type\": \"object\",\n            \"propertyNames\":
        {\n              \"type\": \"string\"\n            },\n            \"additionalProperties\":
        {\n              \"type\": \"string\"\n            },\n            \"description\":
        \"A mapping where keys are strings and values are strings\"\n          }\n        },\n        \"required\":
        [\n          \"_type\",\n          \"name\",\n          \"description\",\n          \"schema\"\n        ],\n        \"description\":
        \"DSPy::ReAct::AvailableTool struct\"\n      },\n      \"description\": \"Array
        of available tools with their JSON schemas.\"\n    }\n  },\n  \"required\":
        [\n    \"input_context\",\n    \"history\",\n    \"available_tools\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"thought\": {\n      \"type\": \"string\",\n      \"description\":
        \"Reasoning about what to do next, considering the history and observations.\"\n    },\n    \"action\":
        {\n      \"type\": \"string\",\n      \"enum\": [\n        \"memory_store\",\n        \"memory_retrieve\",\n        \"memory_search\",\n        \"memory_list\",\n        \"memory_update\",\n        \"memory_delete\",\n        \"memory_clear\",\n        \"memory_count\",\n        \"memory_get_metadata\",\n        \"finish\"\n      ],\n      \"description\":
        \"The action to take. MUST be one of the tool names listed in `available_tools`
        input, or the literal string \\\"finish\\\" to provide the final answer.\"\n    },\n    \"action_input\":
        {\n      \"type\": \"string\",\n      \"description\": \"Input for the chosen
        action. If action is a tool name, this MUST be a JSON object matching the
        tool''s schema. If action is \\\"finish\\\", this field MUST contain the final
        result based on processing the input data.\"\n    }\n  },\n  \"required\":
        [\n    \"thought\",\n    \"action\",\n    \"action_input\"\n  ]\n}\n```\n\nAll
        interactions will be structured in the following way, with the appropriate
        values filled in.\n## Input values\n```json\n{input_values}\n```\n## Output
        values\nRespond exclusively with the output schema fields in the json block
        below.\n```json\n{output_values}\n```\n\nIn adhering to this structure, your
        objective is: Generate a thought about what to do next to process the given
        inputs."},{"role":"user","content":"## Input Values\n```json\n{\n  \"input_context\":
        \"{\\\"_type\\\":\\\"AnonymousStruct\\\",\\\"question\\\":\\\"Can you tell
        me about the metadata for my birthday information?\\\"}\",\n  \"history\":
        [\n    {\n      \"step\": 1,\n      \"thought\": \"The user is asking for
        metadata related to their birthday information. Since no history exists yet,
        I need to retrieve the relevant memory that likely holds this information.
        I will use the ''memory_get_metadata'' action to fetch the metadata for the
        birthday key, assuming it exists.\",\n      \"action\": \"memory_get_metadata\",\n      \"action_input\":
        \"{\\\"key\\\":\\\"birthday\\\"}\",\n      \"observation\": {\n        \"created_at\":
        \"2025-10-02 16:21:56 -0400\",\n        \"updated_at\": \"2025-10-02 16:21:56
        -0400\",\n        \"access_count\": 0,\n        \"last_accessed_at\": null,\n        \"tags\":
        [],\n        \"value_length\": 17\n      }\n    }\n  ],\n  \"available_tools\":
        [\n    {\n      \"name\": \"memory_store\",\n      \"description\": \"Store
        a key-value pair in memory with optional tags\",\n      \"schema\": {\n        \"name\":
        \"memory_store\",\n        \"description\": \"Store a key-value pair in memory
        with optional tags\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\":
        {\n            \"key\": {\n              \"type\": \"string\",\n              \"description\":
        \"Parameter key\"\n            },\n            \"value\": {\n              \"type\":
        \"string\",\n              \"description\": \"Parameter value\"\n            },\n            \"tags\":
        {\n              \"type\": [\n                \"array\",\n                \"null\"\n              ],\n              \"items\":
        {\n                \"type\": \"string\"\n              },\n              \"description\":
        \"Parameter tags (optional)\"\n            }\n          },\n          \"required\":
        [\n            \"key\",\n            \"value\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_retrieve\",\n      \"description\": \"Retrieve a value by key from
        memory\",\n      \"schema\": {\n        \"name\": \"memory_retrieve\",\n        \"description\":
        \"Retrieve a value by key from memory\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {\n            \"key\": {\n              \"type\":
        \"string\",\n              \"description\": \"Parameter key\"\n            }\n          },\n          \"required\":
        [\n            \"key\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_search\",\n      \"description\": \"Search memories by pattern in
        keys and/or values\",\n      \"schema\": {\n        \"name\": \"memory_search\",\n        \"description\":
        \"Search memories by pattern in keys and/or values\",\n        \"parameters\":
        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"pattern\":
        {\n              \"type\": \"string\",\n              \"description\": \"Parameter
        pattern\"\n            },\n            \"in_keys\": {\n              \"type\":
        \"boolean\",\n              \"description\": \"Parameter in_keys (optional)\"\n            },\n            \"in_values\":
        {\n              \"type\": \"boolean\",\n              \"description\": \"Parameter
        in_values (optional)\"\n            }\n          },\n          \"required\":
        [\n            \"pattern\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_list\",\n      \"description\": \"List all stored memory keys\",\n      \"schema\":
        {\n        \"name\": \"memory_list\",\n        \"description\": \"List all
        stored memory keys\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\":
        {},\n          \"required\": []\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_update\",\n      \"description\": \"Update an existing memory value\",\n      \"schema\":
        {\n        \"name\": \"memory_update\",\n        \"description\": \"Update
        an existing memory value\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {\n            \"key\": {\n              \"type\":
        \"string\",\n              \"description\": \"Parameter key\"\n            },\n            \"value\":
        {\n              \"type\": \"string\",\n              \"description\": \"Parameter
        value\"\n            }\n          },\n          \"required\": [\n            \"key\",\n            \"value\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_delete\",\n      \"description\": \"Delete a memory by key\",\n      \"schema\":
        {\n        \"name\": \"memory_delete\",\n        \"description\": \"Delete
        a memory by key\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\":
        {\n            \"key\": {\n              \"type\": \"string\",\n              \"description\":
        \"Parameter key\"\n            }\n          },\n          \"required\": [\n            \"key\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_clear\",\n      \"description\": \"Clear all stored memories\",\n      \"schema\":
        {\n        \"name\": \"memory_clear\",\n        \"description\": \"Clear all
        stored memories\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\":
        {},\n          \"required\": []\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_count\",\n      \"description\": \"Get the count of stored memories\",\n      \"schema\":
        {\n        \"name\": \"memory_count\",\n        \"description\": \"Get the
        count of stored memories\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {},\n          \"required\": []\n        }\n      }\n    },\n    {\n      \"name\":
        \"memory_get_metadata\",\n      \"description\": \"Get metadata for a specific
        memory\",\n      \"schema\": {\n        \"name\": \"memory_get_metadata\",\n        \"description\":
        \"Get metadata for a specific memory\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {\n            \"key\": {\n              \"type\":
        \"string\",\n              \"description\": \"Parameter key\"\n            }\n          },\n          \"required\":
        [\n            \"key\"\n          ]\n        }\n      }\n    }\n  ]\n}\n```\n\nRespond
        with the corresponding output schema fields wrapped in a ```json ``` block,\nstarting
        with the heading `## Output values`."}],"temperature":1.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.22.1
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '11461'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 02 Oct 2025 20:22:19 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - "<OPENAI_ORGANIZATION>"
      Openai-Processing-Ms:
      - '2641'
      Openai-Project:
      - proj_n52OL5vlzVaXGnYDaGWmVX5F
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '2672'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9989'
      X-Ratelimit-Remaining-Tokens:
      - '197443'
      X-Ratelimit-Reset-Requests:
      - 1m31.841s
      X-Ratelimit-Reset-Tokens:
      - 767ms
      X-Request-Id:
      - "<REQUEST_ID>"
      X-Openai-Proxy-Wasm:
      - v0.1
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=<REDACTED>
      - _cfuvid=<REDACTED>
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 9886e92ffcb50edf-EWR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-CMK6ah4X0v3c7UtHuP05iwV84XuXp",
          "object": "chat.completion",
          "created": 1759436536,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"thought\": \"The metadata for the birthday information has been retrieved, including its creation and update dates, access count, and value length. Since there is no further action required on this metadata, I should prepare to finish the interaction.\",\n  \"action\": \"finish\",\n  \"action_input\": \"The metadata for the birthday information is: Created at: 2025-10-02 16:21:56 -0400, Updated at: 2025-10-02 16:21:56 -0400, Access count: 0, Value length: 17.\"\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 2236,
            "completion_tokens": 131,
            "total_tokens": 2367,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_560af6e559"
        }
  recorded_at: Thu, 02 Oct 2025 20:22:19 GMT
recorded_with: VCR 6.3.1
