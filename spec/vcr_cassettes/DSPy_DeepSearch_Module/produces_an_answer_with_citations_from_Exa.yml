---
http_interactions:
- request:
    method: post
    uri: https://api.exa.ai/search
    body:
      encoding: UTF-8
      string: '{"numResults":5,"useAutoprompt":true,"summary":true,"query":"What is
        Jina DeepSearch?"}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - api.exa.ai
      X-Stainless-Lang:
      - ruby
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.4.5
      X-Api-Key:
      - "<EXA_API_KEY>"
      Content-Type:
      - application/json
      Content-Length:
      - '87'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 27 Oct 2025 20:51:18 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Content-Security-Policy:
      - frame-ancestors 'self'
      Cross-Origin-Opener-Policy:
      - same-origin
      Cross-Origin-Resource-Policy:
      - same-origin
      Origin-Agent-Cluster:
      - "?1"
      Referrer-Policy:
      - no-referrer
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
      X-Content-Type-Options:
      - nosniff
      X-Dns-Prefetch-Control:
      - 'off'
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - DENY
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Xss-Protection:
      - '0'
      Vary:
      - Origin
      Access-Control-Allow-Credentials:
      - 'true'
      X-Ratelimit-Limit:
      - '9007199254740991'
      X-Ratelimit-Remaining:
      - '9007199254740990'
      X-Ratelimit-Reset:
      - '1761598280'
      Etag:
      - W/"4b7-NBk39xYWZ71H35+302kh+f708E0"
      Cf-Cache-Status:
      - DYNAMIC
      Nel:
      - '{"report_to":"cf-nel","success_fraction":0.0,"max_age":604800}'
      Report-To:
      - '{"group":"cf-nel","max_age":604800,"endpoints":[{"url":"https://a.nel.cloudflare.com/report/v4?s=99lhqZa1Xe0bSQ2Xe8iXMnt3A7m6LSsS2GEH8BIp9GLLBU7BeoJKY3gwVyHwhAb%2Fpi53xtclf0FJIp6Ch9UJYOm617zP1ioX9A%3D%3D"}]}'
      Server:
      - cloudflare
      Cf-Ray:
      - 99551212dfeb0142-MAD
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        eyJyZXF1ZXN0SWQiOiI3ZTI5NDNkMWI2NDNlMjZiOGZhZmI4OWEzOGY4ZjM0MiIsImF1dG9wcm9tcHRTdHJpbmciOiJXaGF0IGlzIEppbmEgRGVlcFNlYXJjaD8iLCJyZXNvbHZlZFNlYXJjaFR5cGUiOiJuZXVyYWwiLCJyZXN1bHRzIjpbeyJpZCI6Imh0dHBzOi8vYWktcm9ja3N0YXJzLmNvbS9qaW5hLWFpLWRlZWVwc2VhcmNoLyIsInRpdGxlIjoiRGVlcFNlYXJjaCBieSBKaW5hLmFpOiBUaGUgYnJlYWt0aHJvdWdoIGluIEFJIHNlYXJjaCBmb3IgY29tcGxleCAuLi4iLCJ1cmwiOiJodHRwczovL2FpLXJvY2tzdGFycy5jb20vamluYS1haS1kZWVlcHNlYXJjaC8iLCJwdWJsaXNoZWREYXRlIjoiMjAyNS0wMi0yNFQwMDowMDowMC4wMDBaIiwiYXV0aG9yIjpudWxsfSx7ImlkIjoiaHR0cHM6Ly9qaW5hLmFpLyIsInRpdGxlIjoiSmluYSBBSSAtIFlvdXIgU2VhcmNoIEZvdW5kYXRpb24sIFN1cGVyY2hhcmdlZC4iLCJ1cmwiOiJodHRwczovL2ppbmEuYWkvIiwiYXV0aG9yIjpudWxsfSx7ImlkIjoiaHR0cHM6Ly9sb2JlY2hhdC5jb20vZGlzY292ZXIvbW9kZWwvamluYS1kZWVwc2VhcmNoLXYxP2hsPWVuLVVTIiwidGl0bGUiOiJKaW5hIERlZXBTZWFyY2ggdjEgwrcgQUkgTW9kZWxzIMK3IExvYmVIdWIiLCJ1cmwiOiJodHRwczovL2xvYmVjaGF0LmNvbS9kaXNjb3Zlci9tb2RlbC9qaW5hLWRlZXBzZWFyY2gtdjE/aGw9ZW4tVVMiLCJwdWJsaXNoZWREYXRlIjoiMjAyNS0xMC0yM1QyMDo1MToxOC43ODNaIiwiYXV0aG9yIjpudWxsfSx7ImlkIjoiaHR0cHM6Ly9qaW5hLmFpL2RlZXBzZWFyY2gvIiwidGl0bGUiOiJEZWVwU2VhcmNoIiwidXJsIjoiaHR0cHM6Ly9qaW5hLmFpL2RlZXBzZWFyY2gvIiwicHVibGlzaGVkRGF0ZSI6IjIwMjUtMDMtMTNUMDA6MDA6MDAuMDAwWiIsImF1dGhvciI6bnVsbH0seyJpZCI6Imh0dHBzOi8vZ2l0aHViLmNvbS9qaW5hLWFpL2RlZXBzZWFyY2gtdWkiLCJ0aXRsZSI6IkdpdEh1YiAtIGppbmEtYWkvZGVlcHNlYXJjaC11aTogSmluYSBEZWVwU2VhcmNoIFVJIiwidXJsIjoiaHR0cHM6Ly9naXRodWIuY29tL2ppbmEtYWkvZGVlcHNlYXJjaC11aSIsInB1Ymxpc2hlZERhdGUiOiIyMDI1LTAyLTE3VDAwOjAwOjAwLjAwMFoiLCJhdXRob3IiOiJqaW5hLWFpIn1dLCJzZWFyY2hUaW1lIjo4NjIuNCwiY29zdERvbGxhcnMiOnsidG90YWwiOjAuMDA1LCJzZWFyY2giOnsibmV1cmFsIjowLjAwNX19fQ==
  recorded_at: Mon, 27 Oct 2025 20:51:18 GMT
- request:
    method: post
    uri: https://api.exa.ai/contents
    body:
      encoding: UTF-8
      string: '{"urls":["https://ai-rockstars.com/jina-ai-deeepsearch/"],"text":true,"highlights":true,"summary":true,"filterEmptyResults":true}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - api.exa.ai
      X-Stainless-Lang:
      - ruby
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.4.5
      X-Api-Key:
      - "<EXA_API_KEY>"
      Content-Type:
      - application/json
      Content-Length:
      - '129'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 27 Oct 2025 20:51:34 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Nel:
      - '{"report_to":"cf-nel","success_fraction":0.0,"max_age":604800}'
      Content-Security-Policy:
      - frame-ancestors 'self'
      Cross-Origin-Opener-Policy:
      - same-origin
      Cross-Origin-Resource-Policy:
      - same-origin
      Origin-Agent-Cluster:
      - "?1"
      Referrer-Policy:
      - no-referrer
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
      X-Content-Type-Options:
      - nosniff
      X-Dns-Prefetch-Control:
      - 'off'
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - DENY
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Xss-Protection:
      - '0'
      Vary:
      - Origin
      Access-Control-Allow-Credentials:
      - 'true'
      X-Ratelimit-Limit:
      - '50'
      X-Ratelimit-Remaining:
      - '49'
      X-Ratelimit-Reset:
      - '1761598281'
      Ratelimit-Policy:
      - 2000;w=1
      Ratelimit-Limit:
      - '2000'
      Ratelimit-Remaining:
      - '1955'
      Ratelimit-Reset:
      - '1'
      Etag:
      - W/"1bcb-Hufz543wpoF0dyN/cYBkZ7dJL8U"
      Report-To:
      - '{"group":"cf-nel","max_age":604800,"endpoints":[{"url":"https://a.nel.cloudflare.com/report/v4?s=bCj64pdycoTkQa1jzHdAH8TWE2nUh8gmyCFLF%2FfNAka6wai9jNIBFwLJIVGcA6CXmvA8Ae3CrabOb80NjXuKyN3DmWqjBYb2Hw%3D%3D"}]}'
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 9955121c3fa10142-MAD
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 27 Oct 2025 20:51:34 GMT
- request:
    method: post
    uri: https://api.exa.ai/contents
    body:
      encoding: UTF-8
      string: '{"urls":["https://jina.ai/"],"text":true,"highlights":true,"summary":true,"filterEmptyResults":true}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - api.exa.ai
      X-Stainless-Lang:
      - ruby
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.4.5
      X-Api-Key:
      - "<EXA_API_KEY>"
      Content-Type:
      - application/json
      Content-Length:
      - '100'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 27 Oct 2025 20:51:38 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Nel:
      - '{"report_to":"cf-nel","success_fraction":0.0,"max_age":604800}'
      Content-Security-Policy:
      - frame-ancestors 'self'
      Cross-Origin-Opener-Policy:
      - same-origin
      Cross-Origin-Resource-Policy:
      - same-origin
      Origin-Agent-Cluster:
      - "?1"
      Referrer-Policy:
      - no-referrer
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
      X-Content-Type-Options:
      - nosniff
      X-Dns-Prefetch-Control:
      - 'off'
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - DENY
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Xss-Protection:
      - '0'
      Vary:
      - Origin
      Access-Control-Allow-Credentials:
      - 'true'
      X-Ratelimit-Limit:
      - '50'
      X-Ratelimit-Remaining:
      - '49'
      X-Ratelimit-Reset:
      - '1761598296'
      Ratelimit-Policy:
      - 2000;w=1
      Ratelimit-Limit:
      - '2000'
      Ratelimit-Remaining:
      - '1977'
      Ratelimit-Reset:
      - '1'
      Etag:
      - W/"3dbc-ikXsM5IMujKl8lR07NxfZQA2XTI"
      Report-To:
      - '{"group":"cf-nel","max_age":604800,"endpoints":[{"url":"https://a.nel.cloudflare.com/report/v4?s=fmpRdI%2BM6XwLCae1aSl5iz%2F9oOUp3iPY39mssdkYOxb1XzKGoLb%2BgADs5gZr%2BDptyM9hdhVtenwi21h67F6vCCGebr4Jd1Vp2A%3D%3D"}]}'
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 9955127babce0142-MAD
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 27 Oct 2025 20:51:38 GMT
- request:
    method: post
    uri: https://api.exa.ai/contents
    body:
      encoding: UTF-8
      string: '{"urls":["https://lobechat.com/discover/model/jina-deepsearch-v1?hl=en-US"],"text":true,"highlights":true,"summary":true,"filterEmptyResults":true}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - api.exa.ai
      X-Stainless-Lang:
      - ruby
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.4.5
      X-Api-Key:
      - "<EXA_API_KEY>"
      Content-Type:
      - application/json
      Content-Length:
      - '147'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 27 Oct 2025 20:51:41 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Nel:
      - '{"report_to":"cf-nel","success_fraction":0.0,"max_age":604800}'
      Content-Security-Policy:
      - frame-ancestors 'self'
      Cross-Origin-Opener-Policy:
      - same-origin
      Cross-Origin-Resource-Policy:
      - same-origin
      Origin-Agent-Cluster:
      - "?1"
      Referrer-Policy:
      - no-referrer
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
      X-Content-Type-Options:
      - nosniff
      X-Dns-Prefetch-Control:
      - 'off'
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - DENY
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Xss-Protection:
      - '0'
      Vary:
      - Origin
      Access-Control-Allow-Credentials:
      - 'true'
      X-Ratelimit-Limit:
      - '50'
      X-Ratelimit-Remaining:
      - '49'
      X-Ratelimit-Reset:
      - '1761598300'
      Ratelimit-Policy:
      - 2000;w=1
      Ratelimit-Limit:
      - '2000'
      Ratelimit-Remaining:
      - '1991'
      Ratelimit-Reset:
      - '1'
      Etag:
      - W/"43f-yj7arb6N7EthqJzLDe5yvVm0PCk"
      Report-To:
      - '{"group":"cf-nel","max_age":604800,"endpoints":[{"url":"https://a.nel.cloudflare.com/report/v4?s=ws%2BUdmhpKzPzNZJVSUCz%2FrbgROdx5P3FGRqZyiJJYLY1ckUX8re9p8eA4aPLuOfAIgwYZ%2FZ53wvQvm4BxcVj9Olb5F70Kk74cg%3D%3D"}]}'
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 99551293eb7f0142-MAD
    body:
      encoding: ASCII-8BIT
      string: '{"requestId":"6d87148dbad654ed6e0d0d72f6a0ba44","results":[{"id":"https://lobechat.com/discover/model/jina-deepsearch-v1?hl=en-US","title":"LobeHub","url":"https://lobechat.com/discover/model/jina-deepsearch-v1?hl=en-US","publishedDate":"2024-11-01T00:00:00.000Z","author":"","text":"\n","highlights":["\n"],"highlightScores":[1],"summary":"The
        webpage for LobeHub focuses on Jina DeepSearch, a tool designed for building
        and deploying neural search applications. It highlights features such as ease
        of use, scalability, and integration capabilities, making it suitable for
        developers looking to enhance their search functionalities with AI. The page
        likely includes information on how to get started, use cases, and potential
        benefits of utilizing Jina DeepSearch in various applications.","image":"https://lobechat.com/og/cover.png?v=2"}],"statuses":[{"id":"https://lobechat.com/discover/model/jina-deepsearch-v1?hl=en-US","status":"success","source":"crawled"}],"costDollars":{"total":0.003,"contents":{"text":0.001,"highlights":0.001,"summary":0.001}},"searchTime":3429.619949000422}'
  recorded_at: Mon, 27 Oct 2025 20:51:41 GMT
- request:
    method: post
    uri: https://api.exa.ai/contents
    body:
      encoding: UTF-8
      string: '{"urls":["https://jina.ai/deepsearch/"],"text":true,"highlights":true,"summary":true,"filterEmptyResults":true}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - api.exa.ai
      X-Stainless-Lang:
      - ruby
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.4.5
      X-Api-Key:
      - "<EXA_API_KEY>"
      Content-Type:
      - application/json
      Content-Length:
      - '111'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 27 Oct 2025 20:51:48 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Nel:
      - '{"report_to":"cf-nel","success_fraction":0.0,"max_age":604800}'
      Content-Security-Policy:
      - frame-ancestors 'self'
      Cross-Origin-Opener-Policy:
      - same-origin
      Cross-Origin-Resource-Policy:
      - same-origin
      Origin-Agent-Cluster:
      - "?1"
      Referrer-Policy:
      - no-referrer
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
      X-Content-Type-Options:
      - nosniff
      X-Dns-Prefetch-Control:
      - 'off'
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - DENY
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Xss-Protection:
      - '0'
      Vary:
      - Origin
      Access-Control-Allow-Credentials:
      - 'true'
      X-Ratelimit-Limit:
      - '50'
      X-Ratelimit-Remaining:
      - '49'
      X-Ratelimit-Reset:
      - '1761598303'
      Ratelimit-Policy:
      - 2000;w=1
      Ratelimit-Limit:
      - '2000'
      Ratelimit-Remaining:
      - '1920'
      Ratelimit-Reset:
      - '1'
      Etag:
      - W/"58a9-OI5saV3BR/3aAJ+qDWQIfnTeGmY"
      Report-To:
      - '{"group":"cf-nel","max_age":604800,"endpoints":[{"url":"https://a.nel.cloudflare.com/report/v4?s=UCJX6ifIIBtTEFCsiMkmAzqwFI4wPFh%2BQ863Z8jMA1vqRLj9iWTCcoCbIiAqOA9aemezrulMJB7EzL5BBqPXYYfaRHt1tpg0Og%3D%3D"}]}'
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 995512aa7dad0142-MAD
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 27 Oct 2025 20:51:47 GMT
- request:
    method: post
    uri: https://api.exa.ai/contents
    body:
      encoding: UTF-8
      string: '{"urls":["https://github.com/jina-ai/deepsearch-ui"],"text":true,"highlights":true,"summary":true,"filterEmptyResults":true}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - api.exa.ai
      X-Stainless-Lang:
      - ruby
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.4.5
      X-Api-Key:
      - "<EXA_API_KEY>"
      Content-Type:
      - application/json
      Content-Length:
      - '124'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 27 Oct 2025 20:51:51 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Nel:
      - '{"report_to":"cf-nel","success_fraction":0.0,"max_age":604800}'
      Content-Security-Policy:
      - frame-ancestors 'self'
      Cross-Origin-Opener-Policy:
      - same-origin
      Cross-Origin-Resource-Policy:
      - same-origin
      Origin-Agent-Cluster:
      - "?1"
      Referrer-Policy:
      - no-referrer
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
      X-Content-Type-Options:
      - nosniff
      X-Dns-Prefetch-Control:
      - 'off'
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - DENY
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Xss-Protection:
      - '0'
      Vary:
      - Origin
      Access-Control-Allow-Credentials:
      - 'true'
      X-Ratelimit-Limit:
      - '50'
      X-Ratelimit-Remaining:
      - '49'
      X-Ratelimit-Reset:
      - '1761598310'
      Ratelimit-Policy:
      - 2000;w=1
      Ratelimit-Limit:
      - '2000'
      Ratelimit-Remaining:
      - '1994'
      Ratelimit-Reset:
      - '1'
      Etag:
      - W/"4ba6-9rqVPbyswAGhMmov2He5aGy8Hxs"
      Report-To:
      - '{"group":"cf-nel","max_age":604800,"endpoints":[{"url":"https://a.nel.cloudflare.com/report/v4?s=pc1WzZOnVk5PY7KKmytm48CXQ8JGWSot8CdfYPdBvVnAIQDO5rH1FvbeVFFkU2WXH6eCMWoz248kjPT2j1IYDC5AIoPEflm95w%3D%3D"}]}'
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 995512d14f9c0142-MAD
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 27 Oct 2025 20:51:51 GMT
recorded_with: VCR 6.3.1
